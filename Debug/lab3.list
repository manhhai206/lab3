
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008510  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fb0  080086a0  080086a0  000096a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009650  08009650  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009650  08009650  0000a650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009658  08009658  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009658  08009658  0000a658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800965c  0800965c  0000a65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009660  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1d4  2**0
                  CONTENTS
 10 .bss          00000988  200001d4  200001d4  0000b1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b5c  20000b5c  0000b1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a2a6  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001af1  00000000  00000000  000154aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000890  00000000  00000000  00016fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006a9  00000000  00000000  00017830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000253f9  00000000  00000000  00017ed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c71c  00000000  00000000  0003d2d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010fed8  00000000  00000000  000499ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001598c6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003304  00000000  00000000  0015990c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000036  00000000  00000000  0015cc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008688 	.word	0x08008688

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08008688 	.word	0x08008688

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	6039      	str	r1, [r7, #0]
 8000f42:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	4053      	eors	r3, r2
 8000f4e:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	011b      	lsls	r3, r3, #4
 8000f54:	b25a      	sxtb	r2, r3
 8000f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5a:	4053      	eors	r3, r2
 8000f5c:	b25b      	sxtb	r3, r3
 8000f5e:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	0a1b      	lsrs	r3, r3, #8
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	b21a      	sxth	r2, r3
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	021b      	lsls	r3, r3, #8
 8000f6e:	b21b      	sxth	r3, r3
 8000f70:	4053      	eors	r3, r2
 8000f72:	b21a      	sxth	r2, r3
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	4053      	eors	r3, r2
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	091b      	lsrs	r3, r3, #4
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	b21b      	sxth	r3, r3
 8000f86:	4053      	eors	r3, r2
 8000f88:	b21b      	sxth	r3, r3
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	801a      	strh	r2, [r3, #0]
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <crc_init>:
 * @brief Initialize the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000faa:	801a      	strh	r2, [r3, #0]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8000fc4:	f107 030e 	add.w	r3, r7, #14
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ffe7 	bl	8000f9c <crc_init>
	while (length--) {
 8000fce:	e009      	b.n	8000fe4 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	1c5a      	adds	r2, r3, #1
 8000fd4:	607a      	str	r2, [r7, #4]
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	f107 020e 	add.w	r2, r7, #14
 8000fdc:	4611      	mov	r1, r2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff ffaa 	bl	8000f38 <crc_accumulate>
	while (length--) {
 8000fe4:	887b      	ldrh	r3, [r7, #2]
 8000fe6:	1e5a      	subs	r2, r3, #1
 8000fe8:	807a      	strh	r2, [r7, #2]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1f0      	bne.n	8000fd0 <crc_calculate+0x18>
        }
        return crcTmp;
 8000fee:	89fb      	ldrh	r3, [r7, #14]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	4613      	mov	r3, r2
 8001004:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	617b      	str	r3, [r7, #20]
	while (length--) {
 800100a:	e007      	b.n	800101c <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	1c5a      	adds	r2, r3, #1
 8001010:	617a      	str	r2, [r7, #20]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	68f9      	ldr	r1, [r7, #12]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ff8e 	bl	8000f38 <crc_accumulate>
	while (length--) {
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	80fa      	strh	r2, [r7, #6]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1f2      	bne.n	800100c <crc_accumulate_buffer+0x14>
        }
}
 8001026:	bf00      	nop
 8001028:	bf00      	nop
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a0e      	ldr	r2, [pc, #56]	@ (8001080 <mavlink_sha256_init+0x50>)
 8001048:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a0d      	ldr	r2, [pc, #52]	@ (8001084 <mavlink_sha256_init+0x54>)
 800104e:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a0d      	ldr	r2, [pc, #52]	@ (8001088 <mavlink_sha256_init+0x58>)
 8001054:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a0c      	ldr	r2, [pc, #48]	@ (800108c <mavlink_sha256_init+0x5c>)
 800105a:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a0c      	ldr	r2, [pc, #48]	@ (8001090 <mavlink_sha256_init+0x60>)
 8001060:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a0b      	ldr	r2, [pc, #44]	@ (8001094 <mavlink_sha256_init+0x64>)
 8001066:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a0b      	ldr	r2, [pc, #44]	@ (8001098 <mavlink_sha256_init+0x68>)
 800106c:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a0a      	ldr	r2, [pc, #40]	@ (800109c <mavlink_sha256_init+0x6c>)
 8001072:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	6a09e667 	.word	0x6a09e667
 8001084:	bb67ae85 	.word	0xbb67ae85
 8001088:	3c6ef372 	.word	0x3c6ef372
 800108c:	a54ff53a 	.word	0xa54ff53a
 8001090:	510e527f 	.word	0x510e527f
 8001094:	9b05688c 	.word	0x9b05688c
 8001098:	1f83d9ab 	.word	0x1f83d9ab
 800109c:	5be0cd19 	.word	0x5be0cd19

080010a0 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b0cf      	sub	sp, #316	@ 0x13c
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80010aa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80010ae:	6018      	str	r0, [r3, #0]
 80010b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80010b4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80010b8:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 80010ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80010be:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    BB = m->counter[1];
 80010ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80010ce:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    CC = m->counter[2];
 80010da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80010de:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    DD = m->counter[3];
 80010ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80010ee:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    EE = m->counter[4];
 80010fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80010fe:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    FF = m->counter[5];
 800110a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800110e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GG = m->counter[6];
 800111a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800111e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6a1b      	ldr	r3, [r3, #32]
 8001126:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HH = m->counter[7];
 800112a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800112e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001136:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

    for (i = 0; i < 16; ++i)
 800113a:	2300      	movs	r3, #0
 800113c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001140:	e016      	b.n	8001170 <mavlink_sha256_calc+0xd0>
	data[i] = in[i];
 8001142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800114c:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8001150:	6812      	ldr	r2, [r2, #0]
 8001152:	4413      	add	r3, r2
 8001154:	6819      	ldr	r1, [r3, #0]
 8001156:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800115a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800115e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 8001166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800116a:	3301      	adds	r3, #1
 800116c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001174:	2b0f      	cmp	r3, #15
 8001176:	dde4      	ble.n	8001142 <mavlink_sha256_calc+0xa2>
    for (i = 16; i < 64; ++i)
 8001178:	2310      	movs	r3, #16
 800117a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800117e:	e069      	b.n	8001254 <mavlink_sha256_calc+0x1b4>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001184:	1e9a      	subs	r2, r3, #2
 8001186:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800118a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800118e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001192:	ea4f 4273 	mov.w	r2, r3, ror #17
 8001196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800119a:	1e99      	subs	r1, r3, #2
 800119c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80011a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80011a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80011a8:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80011ac:	405a      	eors	r2, r3
 80011ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80011b2:	1e99      	subs	r1, r3, #2
 80011b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80011b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80011bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80011c0:	0a9b      	lsrs	r3, r3, #10
 80011c2:	405a      	eors	r2, r3
 80011c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80011c8:	1fd9      	subs	r1, r3, #7
 80011ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80011ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80011d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80011d6:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 80011d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80011dc:	f1a3 010f 	sub.w	r1, r3, #15
 80011e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80011e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80011e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80011ec:	ea4f 11f3 	mov.w	r1, r3, ror #7
 80011f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80011f4:	f1a3 000f 	sub.w	r0, r3, #15
 80011f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80011fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001200:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001204:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8001208:	4059      	eors	r1, r3
 800120a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800120e:	f1a3 000f 	sub.w	r0, r3, #15
 8001212:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001216:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800121a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800121e:	08db      	lsrs	r3, r3, #3
 8001220:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001222:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8001224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001228:	f1a3 0110 	sub.w	r1, r3, #16
 800122c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001230:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001234:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001238:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800123a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800123e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001242:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001246:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 800124a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800124e:	3301      	adds	r3, #1
 8001250:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001258:	2b3f      	cmp	r3, #63	@ 0x3f
 800125a:	dd91      	ble.n	8001180 <mavlink_sha256_calc+0xe0>

    for (i = 0; i < 64; i++) {
 800125c:	2300      	movs	r3, #0
 800125e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001262:	e078      	b.n	8001356 <mavlink_sha256_calc+0x2b6>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8001264:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001268:	ea4f 12b3 	mov.w	r2, r3, ror #6
 800126c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001270:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8001274:	405a      	eors	r2, r3
 8001276:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800127a:	ea4f 6373 	mov.w	r3, r3, ror #25
 800127e:	405a      	eors	r2, r3
 8001280:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001284:	441a      	add	r2, r3
 8001286:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 800128a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800128e:	4019      	ands	r1, r3
 8001290:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001294:	43d8      	mvns	r0, r3
 8001296:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800129a:	4003      	ands	r3, r0
 800129c:	404b      	eors	r3, r1
 800129e:	441a      	add	r2, r3
 80012a0:	496e      	ldr	r1, [pc, #440]	@ (800145c <mavlink_sha256_calc+0x3bc>)
 80012a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80012a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012aa:	441a      	add	r2, r3
 80012ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80012b4:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80012b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80012bc:	4413      	add	r3, r2
 80012be:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 80012c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80012c6:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80012ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80012ce:	ea4f 3373 	mov.w	r3, r3, ror #13
 80012d2:	405a      	eors	r2, r3
 80012d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80012d8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80012dc:	405a      	eors	r2, r3
 80012de:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 80012e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80012e6:	4059      	eors	r1, r3
 80012e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80012ec:	4019      	ands	r1, r3
 80012ee:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 80012f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80012f6:	4003      	ands	r3, r0
 80012f8:	404b      	eors	r3, r1
 80012fa:	4413      	add	r3, r2
 80012fc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
			     
	HH = GG;
 8001300:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001304:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	GG = FF;
 8001308:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800130c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	FF = EE;
 8001310:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001314:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	EE = DD + T1;
 8001318:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800131c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001320:	4413      	add	r3, r2
 8001322:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	DD = CC;
 8001326:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800132a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	CC = BB;
 800132e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001332:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	BB = AA;
 8001336:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800133a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	AA = T1 + T2;
 800133e:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001342:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001346:	4413      	add	r3, r2
 8001348:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (i = 0; i < 64; i++) {
 800134c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001350:	3301      	adds	r3, #1
 8001352:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800135a:	2b3f      	cmp	r3, #63	@ 0x3f
 800135c:	dd82      	ble.n	8001264 <mavlink_sha256_calc+0x1c4>
    }

    m->counter[0] += AA;
 800135e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001362:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800136e:	441a      	add	r2, r3
 8001370:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001374:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 800137c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001380:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	68da      	ldr	r2, [r3, #12]
 8001388:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800138c:	441a      	add	r2, r3
 800138e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001392:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 800139a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800139e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	691a      	ldr	r2, [r3, #16]
 80013a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80013aa:	441a      	add	r2, r3
 80013ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80013b0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 80013b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80013bc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	695a      	ldr	r2, [r3, #20]
 80013c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80013c8:	441a      	add	r2, r3
 80013ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80013ce:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 80013d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80013da:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	699a      	ldr	r2, [r3, #24]
 80013e2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80013e6:	441a      	add	r2, r3
 80013e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80013ec:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 80013f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80013f8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	69da      	ldr	r2, [r3, #28]
 8001400:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001404:	441a      	add	r2, r3
 8001406:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800140a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 8001412:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001416:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6a1a      	ldr	r2, [r3, #32]
 800141e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001422:	441a      	add	r2, r3
 8001424:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001428:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 8001430:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001434:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800143c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001440:	441a      	add	r2, r3
 8001442:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001446:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800144e:	bf00      	nop
 8001450:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	08008704 	.word	0x08008704

08001460 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b09c      	sub	sp, #112	@ 0x70
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    uint32_t old_sz = m->sz[0];
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	65fb      	str	r3, [r7, #92]	@ 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	441a      	add	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800148a:	429a      	cmp	r2, r3
 800148c:	d904      	bls.n	8001498 <mavlink_sha256_update+0x38>
	++m->sz[1];
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	1c5a      	adds	r2, r3, #1
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8001498:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800149a:	08db      	lsrs	r3, r3, #3
 800149c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014a0:	66bb      	str	r3, [r7, #104]	@ 0x68
    while(len > 0){
 80014a2:	e057      	b.n	8001554 <mavlink_sha256_update+0xf4>
	uint32_t l = 64 - offset;
 80014a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80014a6:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80014aa:	667b      	str	r3, [r7, #100]	@ 0x64
        if (len < l) {
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d201      	bcs.n	80014b8 <mavlink_sha256_update+0x58>
            l = len;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	667b      	str	r3, [r7, #100]	@ 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80014be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80014c0:	4413      	add	r3, r2
 80014c2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80014c4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80014c6:	4618      	mov	r0, r3
 80014c8:	f005 fa03 	bl	80068d2 <memcpy>
	offset += l;
 80014cc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80014ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80014d0:	4413      	add	r3, r2
 80014d2:	66bb      	str	r3, [r7, #104]	@ 0x68
	p += l;
 80014d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80014d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80014d8:	4413      	add	r3, r2
 80014da:	66fb      	str	r3, [r7, #108]	@ 0x6c
	len -= l;
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 80014e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80014e6:	2b40      	cmp	r3, #64	@ 0x40
 80014e8:	d134      	bne.n	8001554 <mavlink_sha256_update+0xf4>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	3328      	adds	r3, #40	@ 0x28
 80014ee:	65bb      	str	r3, [r7, #88]	@ 0x58
	    for (i = 0; i < 16; i++){
 80014f0:	2300      	movs	r3, #0
 80014f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80014f4:	e023      	b.n	800153e <mavlink_sha256_update+0xde>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 80014f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80014fc:	4413      	add	r3, r2
 80014fe:	657b      	str	r3, [r7, #84]	@ 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8001500:	f107 0210 	add.w	r2, r7, #16
 8001504:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	653b      	str	r3, [r7, #80]	@ 0x50
                p2[0] = p1[3];
 800150c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800150e:	3303      	adds	r3, #3
 8001510:	781a      	ldrb	r2, [r3, #0]
 8001512:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001514:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8001516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001518:	1c9a      	adds	r2, r3, #2
 800151a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800151c:	3301      	adds	r3, #1
 800151e:	7812      	ldrb	r2, [r2, #0]
 8001520:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8001522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001528:	3302      	adds	r3, #2
 800152a:	7812      	ldrb	r2, [r2, #0]
 800152c:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 800152e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001530:	3303      	adds	r3, #3
 8001532:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001534:	7812      	ldrb	r2, [r2, #0]
 8001536:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8001538:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800153a:	3301      	adds	r3, #1
 800153c:	663b      	str	r3, [r7, #96]	@ 0x60
 800153e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001540:	2b0f      	cmp	r3, #15
 8001542:	ddd8      	ble.n	80014f6 <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 8001544:	f107 0310 	add.w	r3, r7, #16
 8001548:	4619      	mov	r1, r3
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f7ff fda8 	bl	80010a0 <mavlink_sha256_calc>
	    offset = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	66bb      	str	r3, [r7, #104]	@ 0x68
    while(len > 0){
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1a4      	bne.n	80014a4 <mavlink_sha256_update+0x44>
	}
    }
}
 800155a:	bf00      	nop
 800155c:	bf00      	nop
 800155e:	3770      	adds	r7, #112	@ 0x70
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b098      	sub	sp, #96	@ 0x60
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	08db      	lsrs	r3, r3, #3
 8001574:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001578:	65fb      	str	r3, [r7, #92]	@ 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 800157a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800157c:	f1c3 0377 	rsb	r3, r3, #119	@ 0x77
 8001580:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001584:	3301      	adds	r3, #1
 8001586:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3308      	adds	r3, #8
 800158c:	657b      	str	r3, [r7, #84]	@ 0x54
    
    *zeros = 0x80;
 800158e:	2380      	movs	r3, #128	@ 0x80
 8001590:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8001592:	f107 030c 	add.w	r3, r7, #12
 8001596:	3301      	adds	r3, #1
 8001598:	2247      	movs	r2, #71	@ 0x47
 800159a:	2100      	movs	r1, #0
 800159c:	4618      	mov	r0, r3
 800159e:	f005 f918 	bl	80067d2 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80015a8:	3307      	adds	r3, #7
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	3360      	adds	r3, #96	@ 0x60
 80015ae:	443b      	add	r3, r7
 80015b0:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	0a1a      	lsrs	r2, r3, #8
 80015ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80015bc:	3306      	adds	r3, #6
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	3360      	adds	r3, #96	@ 0x60
 80015c2:	443b      	add	r3, r7
 80015c4:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	0c1a      	lsrs	r2, r3, #16
 80015ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80015d0:	3305      	adds	r3, #5
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	3360      	adds	r3, #96	@ 0x60
 80015d6:	443b      	add	r3, r7
 80015d8:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	0e1a      	lsrs	r2, r3, #24
 80015e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80015e4:	3304      	adds	r3, #4
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	3360      	adds	r3, #96	@ 0x60
 80015ea:	443b      	add	r3, r7
 80015ec:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80015f6:	3303      	adds	r3, #3
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	3360      	adds	r3, #96	@ 0x60
 80015fc:	443b      	add	r3, r7
 80015fe:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	0a1a      	lsrs	r2, r3, #8
 8001608:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800160a:	3302      	adds	r3, #2
 800160c:	b2d2      	uxtb	r2, r2
 800160e:	3360      	adds	r3, #96	@ 0x60
 8001610:	443b      	add	r3, r7
 8001612:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	0c1a      	lsrs	r2, r3, #16
 800161c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800161e:	3301      	adds	r3, #1
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	3360      	adds	r3, #96	@ 0x60
 8001624:	443b      	add	r3, r7
 8001626:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	0e1b      	lsrs	r3, r3, #24
 8001630:	b2d9      	uxtb	r1, r3
 8001632:	f107 020c 	add.w	r2, r7, #12
 8001636:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001638:	4413      	add	r3, r2
 800163a:	460a      	mov	r2, r1
 800163c:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 800163e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001640:	f103 0208 	add.w	r2, r3, #8
 8001644:	f107 030c 	add.w	r3, r7, #12
 8001648:	4619      	mov	r1, r3
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff ff08 	bl	8001460 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8001650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001652:	78da      	ldrb	r2, [r3, #3]
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	3301      	adds	r3, #1
 800165c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800165e:	7892      	ldrb	r2, [r2, #2]
 8001660:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	3302      	adds	r3, #2
 8001666:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001668:	7852      	ldrb	r2, [r2, #1]
 800166a:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	3303      	adds	r3, #3
 8001670:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001672:	7812      	ldrb	r2, [r2, #0]
 8001674:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	3304      	adds	r3, #4
 800167a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800167c:	79d2      	ldrb	r2, [r2, #7]
 800167e:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	3305      	adds	r3, #5
 8001684:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001686:	7992      	ldrb	r2, [r2, #6]
 8001688:	701a      	strb	r2, [r3, #0]
}
 800168a:	bf00      	nop
 800168c:	3760      	adds	r7, #96	@ 0x60
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 800169e:	79fa      	ldrb	r2, [r7, #7]
 80016a0:	4613      	mov	r3, r2
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	4413      	add	r3, r2
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	4a03      	ldr	r2, [pc, #12]	@ (80016b8 <mavlink_get_channel_status+0x24>)
 80016aa:	4413      	add	r3, r2
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	2000051c 	.word	0x2000051c

080016bc <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_buffer array defined in function,
	// has to be defined externally
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	f240 1223 	movw	r2, #291	@ 0x123
 80016cc:	fb02 f303 	mul.w	r3, r2, r3
 80016d0:	4a03      	ldr	r2, [pc, #12]	@ (80016e0 <mavlink_get_channel_buffer+0x24>)
 80016d2:	4413      	add	r3, r2
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	2000057c 	.word	0x2000057c

080016e4 <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 80016e4:	b5b0      	push	{r4, r5, r7, lr}
 80016e6:	b0a0      	sub	sp, #128	@ 0x80
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
 80016f0:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d005      	beq.n	8001704 <mavlink_sign_packet+0x20>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <mavlink_sign_packet+0x24>
	    return 0;
 8001704:	2300      	movs	r3, #0
 8001706:	e04f      	b.n	80017a8 <mavlink_sign_packet+0xc4>
	}
	signature[0] = signing->link_id;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	785a      	ldrb	r2, [r3, #1]
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001716:	e9c7 2304 	strd	r2, r3, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	3301      	adds	r3, #1
 800171e:	f107 0110 	add.w	r1, r7, #16
 8001722:	2206      	movs	r2, #6
 8001724:	4618      	mov	r0, r3
 8001726:	f005 f8d4 	bl	80068d2 <memcpy>
	signing->timestamp++;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001730:	1c54      	adds	r4, r2, #1
 8001732:	f143 0500 	adc.w	r5, r3, #0
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	e9c3 4502 	strd	r4, r5, [r3, #8]
	
	mavlink_sha256_init(&ctx);
 800173c:	f107 0318 	add.w	r3, r7, #24
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fc75 	bl	8001030 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f103 0110 	add.w	r1, r3, #16
 800174c:	f107 0318 	add.w	r3, r7, #24
 8001750:	2220      	movs	r2, #32
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fe84 	bl	8001460 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8001758:	78fa      	ldrb	r2, [r7, #3]
 800175a:	f107 0318 	add.w	r3, r7, #24
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fe7d 	bl	8001460 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8001766:	f897 2094 	ldrb.w	r2, [r7, #148]	@ 0x94
 800176a:	f107 0318 	add.w	r3, r7, #24
 800176e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fe74 	bl	8001460 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8001778:	f107 0318 	add.w	r3, r7, #24
 800177c:	2202      	movs	r2, #2
 800177e:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fe6c 	bl	8001460 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8001788:	f107 0318 	add.w	r3, r7, #24
 800178c:	2207      	movs	r2, #7
 800178e:	68b9      	ldr	r1, [r7, #8]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fe65 	bl	8001460 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	1dda      	adds	r2, r3, #7
 800179a:	f107 0318 	add.w	r3, r7, #24
 800179e:	4611      	mov	r1, r2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fedf 	bl	8001564 <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 80017a6:	230d      	movs	r3, #13
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3780      	adds	r7, #128	@ 0x80
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bdb0      	pop	{r4, r5, r7, pc}

080017b0 <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 80017bc:	e002      	b.n	80017c4 <_mav_trim_payload+0x14>
		length--;
 80017be:	78fb      	ldrb	r3, [r7, #3]
 80017c0:	3b01      	subs	r3, #1
 80017c2:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 80017c4:	78fb      	ldrb	r3, [r7, #3]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d906      	bls.n	80017d8 <_mav_trim_payload+0x28>
 80017ca:	78fb      	ldrb	r3, [r7, #3]
 80017cc:	3b01      	subs	r3, #1
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0f2      	beq.n	80017be <_mav_trim_payload+0xe>
	}
	return length;
 80017d8:	78fb      	ldrb	r3, [r7, #3]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <mavlink_signature_check>:
 * @brief check a signature block for a packet
 */
MAVLINK_HELPER bool mavlink_signature_check(mavlink_signing_t *signing,
					    mavlink_signing_streams_t *signing_streams,
					    const mavlink_message_t *msg)
{
 80017e8:	b5b0      	push	{r4, r5, r7, lr}
 80017ea:	b0aa      	sub	sp, #168	@ 0xa8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
	if (signing == NULL) {
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <mavlink_signature_check+0x16>
		return true;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e13e      	b.n	8001a7c <mavlink_signature_check+0x294>
	}
        const uint8_t *p = (const uint8_t *)&msg->magic;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3302      	adds	r3, #2
 8001802:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	const uint8_t *psig = msg->signature;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f503 738b 	add.w	r3, r3, #278	@ 0x116
 800180c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        const uint8_t *incoming_signature = psig+7;
 8001810:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001814:	3307      	adds	r3, #7
 8001816:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	mavlink_sha256_ctx ctx;
	uint8_t signature[6];
	uint16_t i;
        
	mavlink_sha256_init(&ctx);
 800181a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fc06 	bl	8001030 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f103 0110 	add.w	r1, r3, #16
 800182a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800182e:	2220      	movs	r2, #32
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fe15 	bl	8001460 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, p, MAVLINK_NUM_HEADER_BYTES);
 8001836:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800183a:	220a      	movs	r2, #10
 800183c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fe0d 	bl	8001460 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, _MAV_PAYLOAD(msg), msg->len);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f103 010c 	add.w	r1, r3, #12
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	78db      	ldrb	r3, [r3, #3]
 8001850:	461a      	mov	r2, r3
 8001852:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fe02 	bl	8001460 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, msg->ck, 2);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f503 718a 	add.w	r1, r3, #276	@ 0x114
 8001862:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001866:	2202      	movs	r2, #2
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fdf9 	bl	8001460 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, psig, 1+6);
 800186e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001872:	2207      	movs	r2, #7
 8001874:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fdf1 	bl	8001460 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, signature);
 800187e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001882:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001886:	4611      	mov	r1, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fe6b 	bl	8001564 <mavlink_sha256_final_48>
        if (memcmp(signature, incoming_signature, 6) != 0) {
 800188e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001892:	2206      	movs	r2, #6
 8001894:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8001898:	4618      	mov	r0, r3
 800189a:	f004 ff8a 	bl	80067b2 <memcmp>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d005      	beq.n	80018b0 <mavlink_signature_check+0xc8>
                signing->last_status = MAVLINK_SIGNING_STATUS_BAD_SIGNATURE;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2202      	movs	r2, #2
 80018a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		return false;
 80018ac:	2300      	movs	r3, #0
 80018ae:	e0e5      	b.n	8001a7c <mavlink_signature_check+0x294>
	// now check timestamp
	union tstamp {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	uint8_t link_id = psig[0];
 80018b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	tstamp.t64 = 0;
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	memcpy(tstamp.t8, psig+1, 6);
 80018c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80018ca:	1c59      	adds	r1, r3, #1
 80018cc:	f107 0318 	add.w	r3, r7, #24
 80018d0:	2206      	movs	r2, #6
 80018d2:	4618      	mov	r0, r3
 80018d4:	f004 fffd 	bl	80068d2 <memcpy>

	if (signing_streams == NULL) {
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d105      	bne.n	80018ea <mavlink_signature_check+0x102>
                signing->last_status = MAVLINK_SIGNING_STATUS_NO_STREAMS;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2203      	movs	r2, #3
 80018e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                return false;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e0c8      	b.n	8001a7c <mavlink_signature_check+0x294>
	}
	
	// find stream
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 80018ea:	2300      	movs	r3, #0
 80018ec:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 80018f0:	e02b      	b.n	800194a <mavlink_signature_check+0x162>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	79d9      	ldrb	r1, [r3, #7]
 80018f6:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80018fa:	68b8      	ldr	r0, [r7, #8]
 80018fc:	4613      	mov	r3, r2
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	4413      	add	r3, r2
 8001902:	4403      	add	r3, r0
 8001904:	3303      	adds	r3, #3
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	4299      	cmp	r1, r3
 800190a:	d119      	bne.n	8001940 <mavlink_signature_check+0x158>
		    msg->compid == signing_streams->stream[i].compid &&
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	7a19      	ldrb	r1, [r3, #8]
 8001910:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8001914:	68b8      	ldr	r0, [r7, #8]
 8001916:	4613      	mov	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	4413      	add	r3, r2
 800191c:	4403      	add	r3, r0
 800191e:	3304      	adds	r3, #4
 8001920:	781b      	ldrb	r3, [r3, #0]
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8001922:	4299      	cmp	r1, r3
 8001924:	d10c      	bne.n	8001940 <mavlink_signature_check+0x158>
		    link_id == signing_streams->stream[i].link_id) {
 8001926:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 800192a:	68b9      	ldr	r1, [r7, #8]
 800192c:	4613      	mov	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	4413      	add	r3, r2
 8001932:	440b      	add	r3, r1
 8001934:	3302      	adds	r3, #2
 8001936:	781b      	ldrb	r3, [r3, #0]
		    msg->compid == signing_streams->stream[i].compid &&
 8001938:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 800193c:	429a      	cmp	r2, r3
 800193e:	d00b      	beq.n	8001958 <mavlink_signature_check+0x170>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8001940:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8001944:	3301      	adds	r3, #1
 8001946:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8001952:	429a      	cmp	r2, r3
 8001954:	d3cd      	bcc.n	80018f2 <mavlink_signature_check+0x10a>
 8001956:	e000      	b.n	800195a <mavlink_signature_check+0x172>
			break;
 8001958:	bf00      	nop
		}
	}
	if (i == signing_streams->num_signing_streams) {
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8001962:	429a      	cmp	r2, r3
 8001964:	d146      	bne.n	80019f4 <mavlink_signature_check+0x20c>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	2b0f      	cmp	r3, #15
 800196c:	d905      	bls.n	800197a <mavlink_signature_check+0x192>
			// over max number of streams
                        signing->last_status = MAVLINK_SIGNING_STATUS_TOO_MANY_STREAMS;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2204      	movs	r2, #4
 8001972:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                        return false;
 8001976:	2300      	movs	r3, #0
 8001978:	e080      	b.n	8001a7c <mavlink_signature_check+0x294>
		}
		// new stream. Only accept if timestamp is not more than 1 minute old
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 800197a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800197e:	4941      	ldr	r1, [pc, #260]	@ (8001a84 <mavlink_signature_check+0x29c>)
 8001980:	1854      	adds	r4, r2, r1
 8001982:	f143 0500 	adc.w	r5, r3, #0
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800198c:	4294      	cmp	r4, r2
 800198e:	eb75 0303 	sbcs.w	r3, r5, r3
 8001992:	d205      	bcs.n	80019a0 <mavlink_signature_check+0x1b8>
                        signing->last_status = MAVLINK_SIGNING_STATUS_OLD_TIMESTAMP;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2205      	movs	r2, #5
 8001998:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                        return false;
 800199c:	2300      	movs	r3, #0
 800199e:	e06d      	b.n	8001a7c <mavlink_signature_check+0x294>
		}
		// add new stream
		signing_streams->stream[i].sysid = msg->sysid;
 80019a0:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	79d8      	ldrb	r0, [r3, #7]
 80019a8:	68b9      	ldr	r1, [r7, #8]
 80019aa:	4613      	mov	r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	4413      	add	r3, r2
 80019b0:	440b      	add	r3, r1
 80019b2:	3303      	adds	r3, #3
 80019b4:	4602      	mov	r2, r0
 80019b6:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].compid = msg->compid;
 80019b8:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	7a18      	ldrb	r0, [r3, #8]
 80019c0:	68b9      	ldr	r1, [r7, #8]
 80019c2:	4613      	mov	r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	4413      	add	r3, r2
 80019c8:	440b      	add	r3, r1
 80019ca:	3304      	adds	r3, #4
 80019cc:	4602      	mov	r2, r0
 80019ce:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].link_id = link_id;
 80019d0:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80019d4:	68b9      	ldr	r1, [r7, #8]
 80019d6:	4613      	mov	r3, r2
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	4413      	add	r3, r2
 80019dc:	440b      	add	r3, r1
 80019de:	3302      	adds	r3, #2
 80019e0:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 80019e4:	701a      	strb	r2, [r3, #0]
		signing_streams->num_signing_streams++;
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	3301      	adds	r3, #1
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	801a      	strh	r2, [r3, #0]
 80019f2:	e021      	b.n	8001a38 <mavlink_signature_check+0x250>
	} else {
		union tstamp last_tstamp;
		last_tstamp.t64 = 0;
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 8001a00:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8001a04:	4613      	mov	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	4413      	add	r3, r2
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	1d59      	adds	r1, r3, #5
 8001a10:	f107 0310 	add.w	r3, r7, #16
 8001a14:	2206      	movs	r2, #6
 8001a16:	4618      	mov	r0, r3
 8001a18:	f004 ff5b 	bl	80068d2 <memcpy>
		if (tstamp.t64 <= last_tstamp.t64) {
 8001a1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a20:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a24:	4290      	cmp	r0, r2
 8001a26:	eb71 0303 	sbcs.w	r3, r1, r3
 8001a2a:	d305      	bcc.n	8001a38 <mavlink_signature_check+0x250>
			// repeating old timestamp
                        signing->last_status = MAVLINK_SIGNING_STATUS_REPLAY;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2206      	movs	r2, #6
 8001a30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                        return false;
 8001a34:	2300      	movs	r3, #0
 8001a36:	e021      	b.n	8001a7c <mavlink_signature_check+0x294>
		}
	}

	// remember last timestamp
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 8001a38:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	4413      	add	r3, r2
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	4413      	add	r3, r2
 8001a46:	1d58      	adds	r0, r3, #5
 8001a48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	2206      	movs	r2, #6
 8001a50:	4619      	mov	r1, r3
 8001a52:	f004 ff3e 	bl	80068d2 <memcpy>

	// our next timestamp must be at least this timestamp
	if (tstamp.t64 > signing->timestamp) {
 8001a56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a5a:	68f9      	ldr	r1, [r7, #12]
 8001a5c:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8001a60:	4290      	cmp	r0, r2
 8001a62:	eb71 0303 	sbcs.w	r3, r1, r3
 8001a66:	d204      	bcs.n	8001a72 <mavlink_signature_check+0x28a>
		signing->timestamp = tstamp.t64;
 8001a68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a6c:	68f9      	ldr	r1, [r7, #12]
 8001a6e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
        signing->last_status = MAVLINK_SIGNING_STATUS_OK;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        return true;
 8001a7a:	2301      	movs	r3, #1
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	37a8      	adds	r7, #168	@ 0xa8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bdb0      	pop	{r4, r5, r7, pc}
 8001a84:	005b8d80 	.word	0x005b8d80

08001a88 <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8001a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a8a:	b08f      	sub	sp, #60	@ 0x3c
 8001a8c:	af04      	add	r7, sp, #16
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	460b      	mov	r3, r1
 8001a94:	72fb      	strb	r3, [r7, #11]
 8001a96:	4613      	mov	r3, r2
 8001a98:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	7b1b      	ldrb	r3, [r3, #12]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	bf14      	ite	ne
 8001aa6:	2301      	movne	r3, #1
 8001aa8:	2300      	moveq	r3, #0
 8001aaa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#ifndef MAVLINK_NO_SIGN_PACKET
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001aae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001ab2:	f083 0301 	eor.w	r3, r3, #1
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d00c      	beq.n	8001ad6 <mavlink_finalize_message_buffer+0x4e>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d008      	beq.n	8001ad6 <mavlink_finalize_message_buffer+0x4e>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <mavlink_finalize_message_buffer+0x4e>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <mavlink_finalize_message_buffer+0x50>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001adc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
#else
	bool signing = false;
#endif
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 8001ae8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <mavlink_finalize_message_buffer+0x6c>
 8001af0:	230d      	movs	r3, #13
 8001af2:	e000      	b.n	8001af6 <mavlink_finalize_message_buffer+0x6e>
 8001af4:	2300      	movs	r3, #0
 8001af6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8001afa:	230a      	movs	r3, #10
 8001afc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 8001b00:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d006      	beq.n	8001b16 <mavlink_finalize_message_buffer+0x8e>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	22fe      	movs	r2, #254	@ 0xfe
 8001b0c:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8001b0e:	2306      	movs	r3, #6
 8001b10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001b14:	e002      	b.n	8001b1c <mavlink_finalize_message_buffer+0x94>
	} else {
		msg->magic = MAVLINK_STX;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	22fd      	movs	r2, #253	@ 0xfd
 8001b1a:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001b1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10a      	bne.n	8001b3a <mavlink_finalize_message_buffer+0xb2>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	330c      	adds	r3, #12
 8001b28:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fe3e 	bl	80017b0 <_mav_trim_payload>
 8001b34:	4603      	mov	r3, r0
 8001b36:	461a      	mov	r2, r3
 8001b38:	e001      	b.n	8001b3e <mavlink_finalize_message_buffer+0xb6>
 8001b3a:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	7afa      	ldrb	r2, [r7, #11]
 8001b46:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	7aba      	ldrb	r2, [r7, #10]
 8001b4c:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	711a      	strb	r2, [r3, #4]
	if (signing) {
 8001b54:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d006      	beq.n	8001b6a <mavlink_finalize_message_buffer+0xe2>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	791b      	ldrb	r3, [r3, #4]
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	799a      	ldrb	r2, [r3, #6]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	799b      	ldrb	r3, [r3, #6]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	789b      	ldrb	r3, [r3, #2]
 8001b88:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	78db      	ldrb	r3, [r3, #3]
 8001b8e:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 8001b90:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d013      	beq.n	8001bc0 <mavlink_finalize_message_buffer+0x138>
		buf[2] = msg->seq;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	799b      	ldrb	r3, [r3, #6]
 8001b9c:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	79db      	ldrb	r3, [r3, #7]
 8001ba2:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	7a1b      	ldrb	r3, [r3, #8]
 8001ba8:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	7a5a      	ldrb	r2, [r3, #9]
 8001bae:	7a99      	ldrb	r1, [r3, #10]
 8001bb0:	0209      	lsls	r1, r1, #8
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	7adb      	ldrb	r3, [r3, #11]
 8001bb6:	041b      	lsls	r3, r3, #16
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	777b      	strb	r3, [r7, #29]
 8001bbe:	e030      	b.n	8001c22 <mavlink_finalize_message_buffer+0x19a>
	} else {
		buf[2] = msg->incompat_flags;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	791b      	ldrb	r3, [r3, #4]
 8001bc4:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	795b      	ldrb	r3, [r3, #5]
 8001bca:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	799b      	ldrb	r3, [r3, #6]
 8001bd0:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	79db      	ldrb	r3, [r3, #7]
 8001bd6:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	7a1b      	ldrb	r3, [r3, #8]
 8001bdc:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	7a5a      	ldrb	r2, [r3, #9]
 8001be2:	7a99      	ldrb	r1, [r3, #10]
 8001be4:	0209      	lsls	r1, r1, #8
 8001be6:	430a      	orrs	r2, r1
 8001be8:	7adb      	ldrb	r3, [r3, #11]
 8001bea:	041b      	lsls	r3, r3, #16
 8001bec:	4313      	orrs	r3, r2
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	7a5a      	ldrb	r2, [r3, #9]
 8001bf6:	7a99      	ldrb	r1, [r3, #10]
 8001bf8:	0209      	lsls	r1, r1, #8
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	7adb      	ldrb	r3, [r3, #11]
 8001bfe:	041b      	lsls	r3, r3, #16
 8001c00:	4313      	orrs	r3, r2
 8001c02:	121b      	asrs	r3, r3, #8
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	7a5a      	ldrb	r2, [r3, #9]
 8001c0e:	7a99      	ldrb	r1, [r3, #10]
 8001c10:	0209      	lsls	r1, r1, #8
 8001c12:	430a      	orrs	r2, r1
 8001c14:	7adb      	ldrb	r3, [r3, #11]
 8001c16:	041b      	lsls	r3, r3, #16
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	141b      	asrs	r3, r3, #16
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 8001c22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	f107 0318 	add.w	r3, r7, #24
 8001c30:	3301      	adds	r3, #1
 8001c32:	4611      	mov	r1, r2
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff f9bf 	bl	8000fb8 <crc_calculate>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f103 010c 	add.w	r1, r3, #12
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	78db      	ldrb	r3, [r3, #3]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	f107 0316 	add.w	r3, r7, #22
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff f9d2 	bl	8000ff8 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 8001c54:	f107 0216 	add.w	r2, r7, #22
 8001c58:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff f96a 	bl	8000f38 <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8001c64:	8af9      	ldrh	r1, [r7, #22]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	330c      	adds	r3, #12
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	78d2      	ldrb	r2, [r2, #3]
 8001c6e:	4413      	add	r3, r2
 8001c70:	b2ca      	uxtb	r2, r1
 8001c72:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8001c74:	8afb      	ldrh	r3, [r7, #22]
 8001c76:	0a1b      	lsrs	r3, r3, #8
 8001c78:	b299      	uxth	r1, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f103 020c 	add.w	r2, r3, #12
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	78db      	ldrb	r3, [r3, #3]
 8001c84:	3301      	adds	r3, #1
 8001c86:	4413      	add	r3, r2
 8001c88:	b2ca      	uxtb	r2, r1
 8001c8a:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 8001c8c:	8afa      	ldrh	r2, [r7, #22]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	801a      	strh	r2, [r3, #0]

#ifndef MAVLINK_NO_SIGN_PACKET
	if (signing) {
 8001c92:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d01a      	beq.n	8001cd0 <mavlink_finalize_message_buffer+0x248>
		mavlink_sign_packet(status->signing,
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f503 758b 	add.w	r5, r3, #278	@ 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8001cac:	68f9      	ldr	r1, [r7, #12]
 8001cae:	310c      	adds	r1, #12
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 8001cb4:	4401      	add	r1, r0
 8001cb6:	f897 6027 	ldrb.w	r6, [r7, #39]	@ 0x27
 8001cba:	f107 0018 	add.w	r0, r7, #24
 8001cbe:	9102      	str	r1, [sp, #8]
 8001cc0:	9201      	str	r2, [sp, #4]
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	4633      	mov	r3, r6
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	4629      	mov	r1, r5
 8001cca:	4620      	mov	r0, r4
 8001ccc:	f7ff fd0a 	bl	80016e4 <mavlink_sign_packet>
	}
#endif

	return msg->len + header_len + 2 + signature_len;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	78db      	ldrb	r3, [r3, #3]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	4413      	add	r3, r2
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	3302      	adds	r3, #2
 8001cec:	b29b      	uxth	r3, r3
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	372c      	adds	r7, #44	@ 0x2c
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cf6 <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b088      	sub	sp, #32
 8001cfa:	af04      	add	r7, sp, #16
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	4608      	mov	r0, r1
 8001d00:	4611      	mov	r1, r2
 8001d02:	461a      	mov	r2, r3
 8001d04:	4603      	mov	r3, r0
 8001d06:	70fb      	strb	r3, [r7, #3]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	70bb      	strb	r3, [r7, #2]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 8001d10:	787b      	ldrb	r3, [r7, #1]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fcbe 	bl	8001694 <mavlink_get_channel_status>
 8001d18:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 8001d1a:	78ba      	ldrb	r2, [r7, #2]
 8001d1c:	78f9      	ldrb	r1, [r7, #3]
 8001d1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d22:	9302      	str	r3, [sp, #8]
 8001d24:	7f3b      	ldrb	r3, [r7, #28]
 8001d26:	9301      	str	r3, [sp, #4]
 8001d28:	7e3b      	ldrb	r3, [r7, #24]
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff feaa 	bl	8001a88 <mavlink_finalize_message_buffer>
 8001d34:	4603      	mov	r3, r0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b086      	sub	sp, #24
 8001d42:	af04      	add	r7, sp, #16
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	4608      	mov	r0, r1
 8001d48:	4611      	mov	r1, r2
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	70fb      	strb	r3, [r7, #3]
 8001d50:	460b      	mov	r3, r1
 8001d52:	70bb      	strb	r3, [r7, #2]
 8001d54:	4613      	mov	r3, r2
 8001d56:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 8001d58:	78ba      	ldrb	r2, [r7, #2]
 8001d5a:	78f9      	ldrb	r1, [r7, #3]
 8001d5c:	7d3b      	ldrb	r3, [r7, #20]
 8001d5e:	9302      	str	r3, [sp, #8]
 8001d60:	7c3b      	ldrb	r3, [r7, #16]
 8001d62:	9301      	str	r3, [sp, #4]
 8001d64:	787b      	ldrb	r3, [r7, #1]
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	2300      	movs	r3, #0
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff ffc3 	bl	8001cf6 <mavlink_finalize_message_chan>
 8001d70:	4603      	mov	r3, r0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <_mav_parse_error>:

static inline void _mav_parse_error(mavlink_status_t *status)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
    status->parse_error++;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	789b      	ldrb	r3, [r3, #2]
 8001d86:	3301      	adds	r3, #1
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	709a      	strb	r2, [r3, #2]
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	78db      	ldrb	r3, [r3, #3]
 8001da8:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	789b      	ldrb	r3, [r3, #2]
 8001dae:	2bfe      	cmp	r3, #254	@ 0xfe
 8001db0:	d13a      	bne.n	8001e28 <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8001db6:	2305      	movs	r3, #5
 8001db8:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	789a      	ldrb	r2, [r3, #2]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	7bfa      	ldrb	r2, [r7, #15]
 8001dc8:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3302      	adds	r3, #2
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	7992      	ldrb	r2, [r2, #6]
 8001dd2:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3303      	adds	r3, #3
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	79d2      	ldrb	r2, [r2, #7]
 8001ddc:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3304      	adds	r3, #4
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	7a12      	ldrb	r2, [r2, #8]
 8001de6:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	7a5a      	ldrb	r2, [r3, #9]
 8001dec:	7a99      	ldrb	r1, [r3, #10]
 8001dee:	0209      	lsls	r1, r1, #8
 8001df0:	430a      	orrs	r2, r1
 8001df2:	7adb      	ldrb	r3, [r3, #11]
 8001df4:	041b      	lsls	r3, r3, #16
 8001df6:	4313      	orrs	r3, r2
 8001df8:	461a      	mov	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3305      	adds	r3, #5
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	1d98      	adds	r0, r3, #6
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	f103 010c 	add.w	r1, r3, #12
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	78db      	ldrb	r3, [r3, #3]
 8001e10:	461a      	mov	r2, r3
 8001e12:	f004 fd5e 	bl	80068d2 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8001e16:	7dbb      	ldrb	r3, [r7, #22]
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	78d2      	ldrb	r2, [r2, #3]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3301      	adds	r3, #1
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	4413      	add	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	e06c      	b.n	8001f02 <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	330c      	adds	r3, #12
 8001e2c:	7bfa      	ldrb	r2, [r7, #15]
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff fcbd 	bl	80017b0 <_mav_trim_payload>
 8001e36:	4603      	mov	r3, r0
 8001e38:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8001e3a:	2309      	movs	r3, #9
 8001e3c:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	789a      	ldrb	r2, [r3, #2]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	7bfa      	ldrb	r2, [r7, #15]
 8001e4c:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3302      	adds	r3, #2
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	7912      	ldrb	r2, [r2, #4]
 8001e56:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3303      	adds	r3, #3
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	7952      	ldrb	r2, [r2, #5]
 8001e60:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3304      	adds	r3, #4
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	7992      	ldrb	r2, [r2, #6]
 8001e6a:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3305      	adds	r3, #5
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	79d2      	ldrb	r2, [r2, #7]
 8001e74:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3306      	adds	r3, #6
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	7a12      	ldrb	r2, [r2, #8]
 8001e7e:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	7a5a      	ldrb	r2, [r3, #9]
 8001e84:	7a99      	ldrb	r1, [r3, #10]
 8001e86:	0209      	lsls	r1, r1, #8
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	7adb      	ldrb	r3, [r3, #11]
 8001e8c:	041b      	lsls	r3, r3, #16
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	461a      	mov	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3307      	adds	r3, #7
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	7a5a      	ldrb	r2, [r3, #9]
 8001e9e:	7a99      	ldrb	r1, [r3, #10]
 8001ea0:	0209      	lsls	r1, r1, #8
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	7adb      	ldrb	r3, [r3, #11]
 8001ea6:	041b      	lsls	r3, r3, #16
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	0a1a      	lsrs	r2, r3, #8
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3308      	adds	r3, #8
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	7a5a      	ldrb	r2, [r3, #9]
 8001eb8:	7a99      	ldrb	r1, [r3, #10]
 8001eba:	0209      	lsls	r1, r1, #8
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	7adb      	ldrb	r3, [r3, #11]
 8001ec0:	041b      	lsls	r3, r3, #16
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	0c1a      	lsrs	r2, r3, #16
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3309      	adds	r3, #9
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f103 000a 	add.w	r0, r3, #10
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	330c      	adds	r3, #12
 8001ed8:	7bfa      	ldrb	r2, [r7, #15]
 8001eda:	4619      	mov	r1, r3
 8001edc:	f004 fcf9 	bl	80068d2 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8001ee0:	7dba      	ldrb	r2, [r7, #22]
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	4413      	add	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	791b      	ldrb	r3, [r3, #4]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <mavlink_msg_to_send_buffer+0x164>
 8001efa:	230d      	movs	r3, #13
 8001efc:	e000      	b.n	8001f00 <mavlink_msg_to_send_buffer+0x166>
 8001efe:	2300      	movs	r3, #0
 8001f00:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	0a1b      	lsrs	r3, r3, #8
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 8001f20:	7dfb      	ldrb	r3, [r7, #23]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d008      	beq.n	8001f38 <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1c98      	adds	r0, r3, #2
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	f503 738b 	add.w	r3, r3, #278	@ 0x116
 8001f30:	7dfa      	ldrb	r2, [r7, #23]
 8001f32:	4619      	mov	r1, r3
 8001f34:	f004 fccd 	bl	80068d2 <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8001f38:	7dbb      	ldrb	r3, [r7, #22]
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	4413      	add	r3, r2
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	7dfb      	ldrb	r3, [r7, #23]
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	3303      	adds	r3, #3
 8001f4e:	b29b      	uxth	r3, r3
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
	uint16_t crcTmp = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	81fb      	strh	r3, [r7, #14]
	crc_init(&crcTmp);
 8001f64:	f107 030e 	add.w	r3, r7, #14
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff f817 	bl	8000f9c <crc_init>
	msg->checksum = crcTmp;
 8001f6e:	89fa      	ldrh	r2, [r7, #14]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	801a      	strh	r2, [r3, #0]
}
 8001f74:	bf00      	nop
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	70fb      	strb	r3, [r7, #3]
	uint16_t checksum = msg->checksum;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	81fb      	strh	r3, [r7, #14]
	crc_accumulate(c, &checksum);
 8001f90:	f107 020e 	add.w	r2, r7, #14
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	4611      	mov	r1, r2
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe ffcd 	bl	8000f38 <crc_accumulate>
	msg->checksum = checksum;
 8001f9e:	89fa      	ldrh	r2, [r7, #14]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	801a      	strh	r2, [r3, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <mavlink_get_msg_entry>:
/*
  return the crc_entry value for a msgid
*/
#ifndef MAVLINK_GET_MSG_ENTRY
MAVLINK_HELPER const mavlink_msg_entry_t *mavlink_get_msg_entry(uint32_t msgid)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b087      	sub	sp, #28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
	static const mavlink_msg_entry_t mavlink_message_crcs[] = MAVLINK_MESSAGE_CRCS;
        /*
	  use a bisection search to find the right entry. A perfect hash may be better
	  Note that this assumes the table is sorted by msgid
	*/
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]
 8001fb8:	23e4      	movs	r3, #228	@ 0xe4
 8001fba:	613b      	str	r3, [r7, #16]
        while (low < high) {
 8001fbc:	e025      	b.n	800200a <mavlink_get_msg_entry+0x5e>
            uint32_t mid = (low+1+high)/2;
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	085b      	lsrs	r3, r3, #1
 8001fc8:	60fb      	str	r3, [r7, #12]
            if (msgid < mavlink_message_crcs[mid].msgid) {
 8001fca:	491f      	ldr	r1, [pc, #124]	@ (8002048 <mavlink_get_msg_entry+0x9c>)
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	4413      	add	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d203      	bcs.n	8001fe8 <mavlink_get_msg_entry+0x3c>
                high = mid-1;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	613b      	str	r3, [r7, #16]
                continue;
 8001fe6:	e010      	b.n	800200a <mavlink_get_msg_entry+0x5e>
            }
            if (msgid > mavlink_message_crcs[mid].msgid) {
 8001fe8:	4917      	ldr	r1, [pc, #92]	@ (8002048 <mavlink_get_msg_entry+0x9c>)
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	4613      	mov	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d902      	bls.n	8002004 <mavlink_get_msg_entry+0x58>
                low = mid;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	617b      	str	r3, [r7, #20]
                continue;
 8002002:	e002      	b.n	800200a <mavlink_get_msg_entry+0x5e>
            }
            low = mid;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	617b      	str	r3, [r7, #20]
            break;
 8002008:	e003      	b.n	8002012 <mavlink_get_msg_entry+0x66>
        while (low < high) {
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	429a      	cmp	r2, r3
 8002010:	d3d5      	bcc.n	8001fbe <mavlink_get_msg_entry+0x12>
        }
        if (mavlink_message_crcs[low].msgid != msgid) {
 8002012:	490d      	ldr	r1, [pc, #52]	@ (8002048 <mavlink_get_msg_entry+0x9c>)
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	4613      	mov	r3, r2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	4413      	add	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	440b      	add	r3, r1
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <mavlink_get_msg_entry+0x80>
            // msgid is not in the table
            return NULL;
 8002028:	2300      	movs	r3, #0
 800202a:	e006      	b.n	800203a <mavlink_get_msg_entry+0x8e>
        }
        return &mavlink_message_crcs[low];
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	4613      	mov	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4413      	add	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4a04      	ldr	r2, [pc, #16]	@ (8002048 <mavlink_get_msg_entry+0x9c>)
 8002038:	4413      	add	r3, r2
}
 800203a:	4618      	mov	r0, r3
 800203c:	371c      	adds	r7, #28
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	08008804 	.word	0x08008804

0800204c <mavlink_frame_char_buffer>:
MAVLINK_HELPER uint8_t mavlink_frame_char_buffer(mavlink_message_t* rxmsg, 
                                                 mavlink_status_t* status,
                                                 uint8_t c, 
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	4613      	mov	r3, r2
 800205a:	71fb      	strb	r3, [r7, #7]

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	78db      	ldrb	r3, [r3, #3]
 8002066:	2b0f      	cmp	r3, #15
 8002068:	f200 826c 	bhi.w	8002544 <mavlink_frame_char_buffer+0x4f8>
 800206c:	a201      	add	r2, pc, #4	@ (adr r2, 8002074 <mavlink_frame_char_buffer+0x28>)
 800206e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002072:	bf00      	nop
 8002074:	080020b5 	.word	0x080020b5
 8002078:	080020b5 	.word	0x080020b5
 800207c:	08002113 	.word	0x08002113
 8002080:	08002179 	.word	0x08002179
 8002084:	080021ad 	.word	0x080021ad
 8002088:	080021c5 	.word	0x080021c5
 800208c:	080021dd 	.word	0x080021dd
 8002090:	080021f5 	.word	0x080021f5
 8002094:	0800220d 	.word	0x0800220d
 8002098:	08002267 	.word	0x08002267
 800209c:	080022b3 	.word	0x080022b3
 80020a0:	0800230f 	.word	0x0800230f
 80020a4:	08002347 	.word	0x08002347
 80020a8:	080023d3 	.word	0x080023d3
 80020ac:	080023d3 	.word	0x080023d3
 80020b0:	0800248f 	.word	0x0800248f
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	2bfd      	cmp	r3, #253	@ 0xfd
 80020b8:	d113      	bne.n	80020e2 <mavlink_frame_char_buffer+0x96>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2202      	movs	r2, #2
 80020be:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	79fa      	ldrb	r2, [r7, #7]
 80020ca:	709a      	strb	r2, [r3, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	7b1b      	ldrb	r3, [r3, #12]
 80020d0:	f023 0301 	bic.w	r3, r3, #1
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f7ff ff3c 	bl	8001f58 <mavlink_start_checksum>
			rxmsg->len = 0;
			rxmsg->magic = c;
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
			mavlink_start_checksum(rxmsg);
		}
		break;
 80020e0:	e227      	b.n	8002532 <mavlink_frame_char_buffer+0x4e6>
		} else if (c == MAVLINK_STX_MAVLINK1)
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	2bfe      	cmp	r3, #254	@ 0xfe
 80020e6:	f040 8224 	bne.w	8002532 <mavlink_frame_char_buffer+0x4e6>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	2202      	movs	r2, #2
 80020ee:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	79fa      	ldrb	r2, [r7, #7]
 80020fa:	709a      	strb	r2, [r3, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	7b1b      	ldrb	r3, [r3, #12]
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	b2da      	uxtb	r2, r3
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f7ff ff24 	bl	8001f58 <mavlink_start_checksum>
		break;
 8002110:	e20f      	b.n	8002532 <mavlink_frame_char_buffer+0x4e6>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00f      	beq.n	800213a <mavlink_frame_char_buffer+0xee>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	785b      	ldrb	r3, [r3, #1]
 800211e:	3301      	adds	r3, #1
 8002120:	b2da      	uxtb	r2, r3
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	705a      	strb	r2, [r3, #1]
			_mav_parse_error(status);
 8002126:	68b8      	ldr	r0, [r7, #8]
 8002128:	f7ff fe27 	bl	8001d7a <_mav_parse_error>
			status->msg_received = 0;
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2200      	movs	r2, #0
 8002130:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	2201      	movs	r2, #1
 8002136:	70da      	strb	r2, [r3, #3]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
                        } else {
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
                        }
		}
		break;
 8002138:	e204      	b.n	8002544 <mavlink_frame_char_buffer+0x4f8>
			rxmsg->len = c;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	79fa      	ldrb	r2, [r7, #7]
 800213e:	70da      	strb	r2, [r3, #3]
			status->packet_idx = 0;
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2200      	movs	r2, #0
 8002144:	711a      	strb	r2, [r3, #4]
			mavlink_update_checksum(rxmsg, c);
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	4619      	mov	r1, r3
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f7ff ff16 	bl	8001f7c <mavlink_update_checksum>
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	7b1b      	ldrb	r3, [r3, #12]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d009      	beq.n	8002170 <mavlink_frame_char_buffer+0x124>
                            rxmsg->incompat_flags = 0;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	711a      	strb	r2, [r3, #4]
                            rxmsg->compat_flags = 0;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	715a      	strb	r2, [r3, #5]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2205      	movs	r2, #5
 800216c:	70da      	strb	r2, [r3, #3]
		break;
 800216e:	e1e9      	b.n	8002544 <mavlink_frame_char_buffer+0x4f8>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2203      	movs	r2, #3
 8002174:	70da      	strb	r2, [r3, #3]
		break;
 8002176:	e1e5      	b.n	8002544 <mavlink_frame_char_buffer+0x4f8>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->incompat_flags = c;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	79fa      	ldrb	r2, [r7, #7]
 800217c:	711a      	strb	r2, [r3, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	791b      	ldrb	r3, [r3, #4]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d909      	bls.n	800219a <mavlink_frame_char_buffer+0x14e>
			// message includes an incompatible feature flag
			_mav_parse_error(status);
 8002186:	68b8      	ldr	r0, [r7, #8]
 8002188:	f7ff fdf7 	bl	8001d7a <_mav_parse_error>
			status->msg_received = 0;
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2200      	movs	r2, #0
 8002190:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	2201      	movs	r2, #1
 8002196:	70da      	strb	r2, [r3, #3]
			break;
 8002198:	e1d4      	b.n	8002544 <mavlink_frame_char_buffer+0x4f8>
		}
		mavlink_update_checksum(rxmsg, c);
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	4619      	mov	r1, r3
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f7ff feec 	bl	8001f7c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2204      	movs	r2, #4
 80021a8:	70da      	strb	r2, [r3, #3]
		break;
 80021aa:	e1cb      	b.n	8002544 <mavlink_frame_char_buffer+0x4f8>

	case MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS:
		rxmsg->compat_flags = c;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	79fa      	ldrb	r2, [r7, #7]
 80021b0:	715a      	strb	r2, [r3, #5]
		mavlink_update_checksum(rxmsg, c);
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	4619      	mov	r1, r3
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f7ff fee0 	bl	8001f7c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2205      	movs	r2, #5
 80021c0:	70da      	strb	r2, [r3, #3]
		break;
 80021c2:	e1bf      	b.n	8002544 <mavlink_frame_char_buffer+0x4f8>

	case MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS:
		rxmsg->seq = c;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	79fa      	ldrb	r2, [r7, #7]
 80021c8:	719a      	strb	r2, [r3, #6]
		mavlink_update_checksum(rxmsg, c);
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	4619      	mov	r1, r3
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f7ff fed4 	bl	8001f7c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2206      	movs	r2, #6
 80021d8:	70da      	strb	r2, [r3, #3]
		break;
 80021da:	e1b3      	b.n	8002544 <mavlink_frame_char_buffer+0x4f8>
                
	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	79fa      	ldrb	r2, [r7, #7]
 80021e0:	71da      	strb	r2, [r3, #7]
		mavlink_update_checksum(rxmsg, c);
 80021e2:	79fb      	ldrb	r3, [r7, #7]
 80021e4:	4619      	mov	r1, r3
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f7ff fec8 	bl	8001f7c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	2207      	movs	r2, #7
 80021f0:	70da      	strb	r2, [r3, #3]
		break;
 80021f2:	e1a7      	b.n	8002544 <mavlink_frame_char_buffer+0x4f8>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	79fa      	ldrb	r2, [r7, #7]
 80021f8:	721a      	strb	r2, [r3, #8]
		mavlink_update_checksum(rxmsg, c);
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	4619      	mov	r1, r3
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f7ff febc 	bl	8001f7c <mavlink_update_checksum>
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2208      	movs	r2, #8
 8002208:	70da      	strb	r2, [r3, #3]
		break;
 800220a:	e19b      	b.n	8002544 <mavlink_frame_char_buffer+0x4f8>

	case MAVLINK_PARSE_STATE_GOT_COMPID:
		rxmsg->msgid = c;
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	b2d9      	uxtb	r1, r3
 8002216:	2000      	movs	r0, #0
 8002218:	4301      	orrs	r1, r0
 800221a:	7251      	strb	r1, [r2, #9]
 800221c:	0a19      	lsrs	r1, r3, #8
 800221e:	b2c9      	uxtb	r1, r1
 8002220:	2000      	movs	r0, #0
 8002222:	4301      	orrs	r1, r0
 8002224:	7291      	strb	r1, [r2, #10]
 8002226:	0c1b      	lsrs	r3, r3, #16
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2100      	movs	r1, #0
 800222c:	430b      	orrs	r3, r1
 800222e:	72d3      	strb	r3, [r2, #11]
		mavlink_update_checksum(rxmsg, c);
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	4619      	mov	r1, r3
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f7ff fea1 	bl	8001f7c <mavlink_update_checksum>
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	7b1b      	ldrb	r3, [r3, #12]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00b      	beq.n	800225e <mavlink_frame_char_buffer+0x212>
			if(rxmsg->len > 0) {
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	78db      	ldrb	r3, [r3, #3]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <mavlink_frame_char_buffer+0x20a>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	220b      	movs	r2, #11
 8002252:	70da      	strb	r2, [r3, #3]
			}
#endif
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
		}
		break;
 8002254:	e176      	b.n	8002544 <mavlink_frame_char_buffer+0x4f8>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	220c      	movs	r2, #12
 800225a:	70da      	strb	r2, [r3, #3]
		break;
 800225c:	e172      	b.n	8002544 <mavlink_frame_char_buffer+0x4f8>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	2209      	movs	r2, #9
 8002262:	70da      	strb	r2, [r3, #3]
		break;
 8002264:	e16e      	b.n	8002544 <mavlink_frame_char_buffer+0x4f8>

	case MAVLINK_PARSE_STATE_GOT_MSGID1:
		rxmsg->msgid |= ((uint32_t)c)<<8;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	7a5a      	ldrb	r2, [r3, #9]
 800226a:	7a99      	ldrb	r1, [r3, #10]
 800226c:	0209      	lsls	r1, r1, #8
 800226e:	430a      	orrs	r2, r1
 8002270:	7adb      	ldrb	r3, [r3, #11]
 8002272:	041b      	lsls	r3, r3, #16
 8002274:	4313      	orrs	r3, r2
 8002276:	461a      	mov	r2, r3
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	021b      	lsls	r3, r3, #8
 800227c:	4313      	orrs	r3, r2
 800227e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	b2d1      	uxtb	r1, r2
 8002286:	2000      	movs	r0, #0
 8002288:	4301      	orrs	r1, r0
 800228a:	7259      	strb	r1, [r3, #9]
 800228c:	0a11      	lsrs	r1, r2, #8
 800228e:	b2c9      	uxtb	r1, r1
 8002290:	2000      	movs	r0, #0
 8002292:	4301      	orrs	r1, r0
 8002294:	7299      	strb	r1, [r3, #10]
 8002296:	0c12      	lsrs	r2, r2, #16
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	2100      	movs	r1, #0
 800229c:	430a      	orrs	r2, r1
 800229e:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	4619      	mov	r1, r3
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f7ff fe69 	bl	8001f7c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	220a      	movs	r2, #10
 80022ae:	70da      	strb	r2, [r3, #3]
		break;
 80022b0:	e148      	b.n	8002544 <mavlink_frame_char_buffer+0x4f8>

	case MAVLINK_PARSE_STATE_GOT_MSGID2:
		rxmsg->msgid |= ((uint32_t)c)<<16;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	7a5a      	ldrb	r2, [r3, #9]
 80022b6:	7a99      	ldrb	r1, [r3, #10]
 80022b8:	0209      	lsls	r1, r1, #8
 80022ba:	430a      	orrs	r2, r1
 80022bc:	7adb      	ldrb	r3, [r3, #11]
 80022be:	041b      	lsls	r3, r3, #16
 80022c0:	4313      	orrs	r3, r2
 80022c2:	461a      	mov	r2, r3
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	041b      	lsls	r3, r3, #16
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	b2d1      	uxtb	r1, r2
 80022d2:	2000      	movs	r0, #0
 80022d4:	4301      	orrs	r1, r0
 80022d6:	7259      	strb	r1, [r3, #9]
 80022d8:	0a11      	lsrs	r1, r2, #8
 80022da:	b2c9      	uxtb	r1, r1
 80022dc:	2000      	movs	r0, #0
 80022de:	4301      	orrs	r1, r0
 80022e0:	7299      	strb	r1, [r3, #10]
 80022e2:	0c12      	lsrs	r2, r2, #16
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	2100      	movs	r1, #0
 80022e8:	430a      	orrs	r2, r1
 80022ea:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	4619      	mov	r1, r3
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f7ff fe43 	bl	8001f7c <mavlink_update_checksum>
		if(rxmsg->len > 0){
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	78db      	ldrb	r3, [r3, #3]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <mavlink_frame_char_buffer+0x2ba>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	220b      	movs	r2, #11
 8002302:	70da      	strb	r2, [r3, #3]
			_mav_parse_error(status);
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			break;
        }
#endif
		break;
 8002304:	e11e      	b.n	8002544 <mavlink_frame_char_buffer+0x4f8>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	220c      	movs	r2, #12
 800230a:	70da      	strb	r2, [r3, #3]
		break;
 800230c:	e11a      	b.n	8002544 <mavlink_frame_char_buffer+0x4f8>
                
	case MAVLINK_PARSE_STATE_GOT_MSGID3:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f103 020c 	add.w	r2, r3, #12
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	791b      	ldrb	r3, [r3, #4]
 8002318:	1c59      	adds	r1, r3, #1
 800231a:	b2c8      	uxtb	r0, r1
 800231c:	68b9      	ldr	r1, [r7, #8]
 800231e:	7108      	strb	r0, [r1, #4]
 8002320:	4413      	add	r3, r2
 8002322:	79fa      	ldrb	r2, [r7, #7]
 8002324:	701a      	strb	r2, [r3, #0]
		mavlink_update_checksum(rxmsg, c);
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	4619      	mov	r1, r3
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f7ff fe26 	bl	8001f7c <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	791a      	ldrb	r2, [r3, #4]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	78db      	ldrb	r3, [r3, #3]
 8002338:	429a      	cmp	r2, r3
 800233a:	f040 80fc 	bne.w	8002536 <mavlink_frame_char_buffer+0x4ea>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	220c      	movs	r2, #12
 8002342:	70da      	strb	r2, [r3, #3]
		}
		break;
 8002344:	e0f7      	b.n	8002536 <mavlink_frame_char_buffer+0x4ea>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD: {
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	7a5a      	ldrb	r2, [r3, #9]
 800234a:	7a99      	ldrb	r1, [r3, #10]
 800234c:	0209      	lsls	r1, r1, #8
 800234e:	430a      	orrs	r2, r1
 8002350:	7adb      	ldrb	r3, [r3, #11]
 8002352:	041b      	lsls	r3, r3, #16
 8002354:	4313      	orrs	r3, r2
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff fe28 	bl	8001fac <mavlink_get_msg_entry>
 800235c:	61b8      	str	r0, [r7, #24]
		uint8_t crc_extra = e?e->crc_extra:0;
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <mavlink_frame_char_buffer+0x31e>
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	791b      	ldrb	r3, [r3, #4]
 8002368:	e000      	b.n	800236c <mavlink_frame_char_buffer+0x320>
 800236a:	2300      	movs	r3, #0
 800236c:	75fb      	strb	r3, [r7, #23]
		mavlink_update_checksum(rxmsg, crc_extra);
 800236e:	7dfb      	ldrb	r3, [r7, #23]
 8002370:	4619      	mov	r1, r3
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f7ff fe02 	bl	8001f7c <mavlink_update_checksum>
		if (c != (rxmsg->checksum & 0xFF)) {
 8002378:	79fa      	ldrb	r2, [r7, #7]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	b29b      	uxth	r3, r3
 8002380:	b2db      	uxtb	r3, r3
 8002382:	429a      	cmp	r2, r3
 8002384:	d003      	beq.n	800238e <mavlink_frame_char_buffer+0x342>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	220e      	movs	r2, #14
 800238a:	70da      	strb	r2, [r3, #3]
 800238c:	e002      	b.n	8002394 <mavlink_frame_char_buffer+0x348>
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	220d      	movs	r2, #13
 8002392:	70da      	strb	r2, [r3, #3]
		}
                rxmsg->ck[0] = c;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	79fa      	ldrb	r2, [r7, #7]
 8002398:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114

		// zero-fill the packet to cope with short incoming packets
                if (e && status->packet_idx < e->max_msg_len) {
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 80cb 	beq.w	800253a <mavlink_frame_char_buffer+0x4ee>
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	791a      	ldrb	r2, [r3, #4]
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	799b      	ldrb	r3, [r3, #6]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	f080 80c4 	bcs.w	800253a <mavlink_frame_char_buffer+0x4ee>
                        memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	330c      	adds	r3, #12
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	7912      	ldrb	r2, [r2, #4]
 80023ba:	1898      	adds	r0, r3, r2
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	799b      	ldrb	r3, [r3, #6]
 80023c0:	461a      	mov	r2, r3
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	791b      	ldrb	r3, [r3, #4]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	461a      	mov	r2, r3
 80023ca:	2100      	movs	r1, #0
 80023cc:	f004 fa01 	bl	80067d2 <memset>
		}
		break;
 80023d0:	e0b3      	b.n	800253a <mavlink_frame_char_buffer+0x4ee>
        }

	case MAVLINK_PARSE_STATE_GOT_CRC1:
	case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	78db      	ldrb	r3, [r3, #3]
 80023d6:	2b0e      	cmp	r3, #14
 80023d8:	d008      	beq.n	80023ec <mavlink_frame_char_buffer+0x3a0>
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	0a1b      	lsrs	r3, r3, #8
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d003      	beq.n	80023f4 <mavlink_frame_char_buffer+0x3a8>
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2202      	movs	r2, #2
 80023f0:	701a      	strb	r2, [r3, #0]
 80023f2:	e002      	b.n	80023fa <mavlink_frame_char_buffer+0x3ae>
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2201      	movs	r2, #1
 80023f8:	701a      	strb	r2, [r3, #0]
		}
		rxmsg->ck[1] = c;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	79fa      	ldrb	r2, [r7, #7]
 80023fe:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115

		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	791b      	ldrb	r3, [r3, #4]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00e      	beq.n	800242c <mavlink_frame_char_buffer+0x3e0>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	220f      	movs	r2, #15
 8002412:	70da      	strb	r2, [r3, #3]
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	220d      	movs	r2, #13
 8002418:	735a      	strb	r2, [r3, #13]

			// If the CRC is already wrong, don't overwrite msg_received,
			// otherwise we can end up with garbage flagged as valid.
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b02      	cmp	r3, #2
 8002420:	f000 808d 	beq.w	800253e <mavlink_frame_char_buffer+0x4f2>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2200      	movs	r2, #0
 8002428:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			if (r_message != NULL) {
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
			}
		}
		break;
 800242a:	e088      	b.n	800253e <mavlink_frame_char_buffer+0x4f2>
			if (status->signing &&
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d01f      	beq.n	8002474 <mavlink_frame_char_buffer+0x428>
			   	(status->signing->accept_unsigned_callback == NULL ||
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			if (status->signing &&
 800243a:	2b00      	cmp	r3, #0
 800243c:	d013      	beq.n	8002466 <mavlink_frame_char_buffer+0x41a>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	7a59      	ldrb	r1, [r3, #9]
 8002448:	7a98      	ldrb	r0, [r3, #10]
 800244a:	0200      	lsls	r0, r0, #8
 800244c:	4301      	orrs	r1, r0
 800244e:	7adb      	ldrb	r3, [r3, #11]
 8002450:	041b      	lsls	r3, r3, #16
 8002452:	430b      	orrs	r3, r1
 8002454:	4619      	mov	r1, r3
 8002456:	68b8      	ldr	r0, [r7, #8]
 8002458:	4790      	blx	r2
 800245a:	4603      	mov	r3, r0
 800245c:	f083 0301 	eor.w	r3, r3, #1
 8002460:	b2db      	uxtb	r3, r3
			   	(status->signing->accept_unsigned_callback == NULL ||
 8002462:	2b00      	cmp	r3, #0
 8002464:	d006      	beq.n	8002474 <mavlink_frame_char_buffer+0x428>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d002      	beq.n	8002474 <mavlink_frame_char_buffer+0x428>
					status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2203      	movs	r2, #3
 8002472:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2201      	movs	r2, #1
 8002478:	70da      	strb	r2, [r3, #3]
			if (r_message != NULL) {
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d05e      	beq.n	800253e <mavlink_frame_char_buffer+0x4f2>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8002480:	f240 1223 	movw	r2, #291	@ 0x123
 8002484:	68f9      	ldr	r1, [r7, #12]
 8002486:	6838      	ldr	r0, [r7, #0]
 8002488:	f004 fa23 	bl	80068d2 <memcpy>
		break;
 800248c:	e057      	b.n	800253e <mavlink_frame_char_buffer+0x4f2>
	case MAVLINK_PARSE_STATE_SIGNATURE_WAIT:
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	7b5b      	ldrb	r3, [r3, #13]
 8002492:	f1c3 030d 	rsb	r3, r3, #13
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	4413      	add	r3, r2
 800249a:	79fa      	ldrb	r2, [r7, #7]
 800249c:	f883 2116 	strb.w	r2, [r3, #278]	@ 0x116
		status->signature_wait--;
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	7b5b      	ldrb	r3, [r3, #13]
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	735a      	strb	r2, [r3, #13]
		if (status->signature_wait == 0) {
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	7b5b      	ldrb	r3, [r3, #13]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d146      	bne.n	8002542 <mavlink_frame_char_buffer+0x4f6>
			// we have the whole signature, check it is OK
#ifndef MAVLINK_NO_SIGNATURE_CHECK
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	6918      	ldr	r0, [r3, #16]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	4619      	mov	r1, r3
 80024c0:	f7ff f992 	bl	80017e8 <mavlink_signature_check>
 80024c4:	4603      	mov	r3, r0
 80024c6:	77fb      	strb	r3, [r7, #31]
#else
			bool sig_ok = true;
#endif
			if (!sig_ok &&
 80024c8:	7ffb      	ldrb	r3, [r7, #31]
 80024ca:	f083 0301 	eor.w	r3, r3, #1
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d017      	beq.n	8002504 <mavlink_frame_char_buffer+0x4b8>
			   	(status->signing->accept_unsigned_callback &&
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			if (!sig_ok &&
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d012      	beq.n	8002504 <mavlink_frame_char_buffer+0x4b8>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	7a59      	ldrb	r1, [r3, #9]
 80024e8:	7a98      	ldrb	r0, [r3, #10]
 80024ea:	0200      	lsls	r0, r0, #8
 80024ec:	4301      	orrs	r1, r0
 80024ee:	7adb      	ldrb	r3, [r3, #11]
 80024f0:	041b      	lsls	r3, r3, #16
 80024f2:	430b      	orrs	r3, r1
 80024f4:	4619      	mov	r1, r3
 80024f6:	68b8      	ldr	r0, [r7, #8]
 80024f8:	4790      	blx	r2
 80024fa:	4603      	mov	r3, r0
			   	(status->signing->accept_unsigned_callback &&
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <mavlink_frame_char_buffer+0x4b8>
				// accepted via application level override
				sig_ok = true;
 8002500:	2301      	movs	r3, #1
 8002502:	77fb      	strb	r3, [r7, #31]
			}
			if (sig_ok) {
 8002504:	7ffb      	ldrb	r3, [r7, #31]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <mavlink_frame_char_buffer+0x4c6>
				status->msg_received = MAVLINK_FRAMING_OK;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2201      	movs	r2, #1
 800250e:	701a      	strb	r2, [r3, #0]
 8002510:	e002      	b.n	8002518 <mavlink_frame_char_buffer+0x4cc>
			} else {
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2203      	movs	r2, #3
 8002516:	701a      	strb	r2, [r3, #0]
			}
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2201      	movs	r2, #1
 800251c:	70da      	strb	r2, [r3, #3]
			if (r_message !=NULL) {
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00e      	beq.n	8002542 <mavlink_frame_char_buffer+0x4f6>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8002524:	f240 1223 	movw	r2, #291	@ 0x123
 8002528:	68f9      	ldr	r1, [r7, #12]
 800252a:	6838      	ldr	r0, [r7, #0]
 800252c:	f004 f9d1 	bl	80068d2 <memcpy>
			}
		}
		break;
 8002530:	e007      	b.n	8002542 <mavlink_frame_char_buffer+0x4f6>
		break;
 8002532:	bf00      	nop
 8002534:	e006      	b.n	8002544 <mavlink_frame_char_buffer+0x4f8>
		break;
 8002536:	bf00      	nop
 8002538:	e004      	b.n	8002544 <mavlink_frame_char_buffer+0x4f8>
		break;
 800253a:	bf00      	nop
 800253c:	e002      	b.n	8002544 <mavlink_frame_char_buffer+0x4f8>
		break;
 800253e:	bf00      	nop
 8002540:	e000      	b.n	8002544 <mavlink_frame_char_buffer+0x4f8>
		break;
 8002542:	bf00      	nop
	}

	// If a message has been successfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d110      	bne.n	800256e <mavlink_frame_char_buffer+0x522>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	799a      	ldrb	r2, [r3, #6]
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	715a      	strb	r2, [r3, #5]
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	891b      	ldrh	r3, [r3, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d102      	bne.n	8002562 <mavlink_frame_char_buffer+0x516>
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2200      	movs	r2, #0
 8002560:	815a      	strh	r2, [r3, #10]
		// Count this packet as received
		status->packet_rx_success_count++;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	891b      	ldrh	r3, [r3, #8]
 8002566:	3301      	adds	r3, #1
 8002568:	b29a      	uxth	r2, r3
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	811a      	strh	r2, [r3, #8]
	}

       if (r_message != NULL) {
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <mavlink_frame_char_buffer+0x530>
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	78da      	ldrb	r2, [r3, #3]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	70da      	strb	r2, [r3, #3]
       }
       if (r_mavlink_status != NULL) {	
 800257c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800257e:	2b00      	cmp	r3, #0
 8002580:	d01a      	beq.n	80025b8 <mavlink_frame_char_buffer+0x56c>
           r_mavlink_status->parse_state = status->parse_state;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	78da      	ldrb	r2, [r3, #3]
 8002586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002588:	70da      	strb	r2, [r3, #3]
           r_mavlink_status->packet_idx = status->packet_idx;
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	791a      	ldrb	r2, [r3, #4]
 800258e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002590:	711a      	strb	r2, [r3, #4]
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	795b      	ldrb	r3, [r3, #5]
 8002596:	3301      	adds	r3, #1
 8002598:	b2da      	uxtb	r2, r3
 800259a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800259c:	715a      	strb	r2, [r3, #5]
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	891a      	ldrh	r2, [r3, #8]
 80025a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a4:	811a      	strh	r2, [r3, #8]
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	789b      	ldrb	r3, [r3, #2]
 80025aa:	461a      	mov	r2, r3
 80025ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ae:	815a      	strh	r2, [r3, #10]
           r_mavlink_status->flags = status->flags;
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	7b1a      	ldrb	r2, [r3, #12]
 80025b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025b6:	731a      	strb	r2, [r3, #12]
       }
       status->parse_error = 0;
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2200      	movs	r2, #0
 80025bc:	709a      	strb	r2, [r3, #2]

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d110      	bne.n	80025e8 <mavlink_frame_char_buffer+0x59c>
		  msg CRC with the one on the wire so that if the
		  caller decides to forward the message anyway that
		  mavlink_msg_to_send_buffer() won't overwrite the
		  checksum
		 */
            if (r_message != NULL) {
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00d      	beq.n	80025e8 <mavlink_frame_char_buffer+0x59c>
                r_message->checksum = rxmsg->ck[0] | (rxmsg->ck[1]<<8);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 80025d2:	b21a      	sxth	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 80025da:	021b      	lsls	r3, r3, #8
 80025dc:	b21b      	sxth	r3, r3
 80025de:	4313      	orrs	r3, r2
 80025e0:	b21b      	sxth	r3, r3
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	801a      	strh	r2, [r3, #0]
            }
	}

	return status->msg_received;
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	781b      	ldrb	r3, [r3, #0]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3720      	adds	r7, #32
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <mavlink_frame_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_frame_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 80025f4:	b590      	push	{r4, r7, lr}
 80025f6:	b087      	sub	sp, #28
 80025f8:	af02      	add	r7, sp, #8
 80025fa:	60ba      	str	r2, [r7, #8]
 80025fc:	607b      	str	r3, [r7, #4]
 80025fe:	4603      	mov	r3, r0
 8002600:	73fb      	strb	r3, [r7, #15]
 8002602:	460b      	mov	r3, r1
 8002604:	73bb      	strb	r3, [r7, #14]
	return mavlink_frame_char_buffer(mavlink_get_channel_buffer(chan),
 8002606:	7bfb      	ldrb	r3, [r7, #15]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff f857 	bl	80016bc <mavlink_get_channel_buffer>
 800260e:	4604      	mov	r4, r0
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff f83e 	bl	8001694 <mavlink_get_channel_status>
 8002618:	4601      	mov	r1, r0
 800261a:	7bba      	ldrb	r2, [r7, #14]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	4620      	mov	r0, r4
 8002624:	f7ff fd12 	bl	800204c <mavlink_frame_char_buffer>
 8002628:	4603      	mov	r3, r0
					 mavlink_get_channel_status(chan),
					 c,
					 r_message,
					 r_mavlink_status);
}
 800262a:	4618      	mov	r0, r3
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	bd90      	pop	{r4, r7, pc}

08002632 <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b088      	sub	sp, #32
 8002636:	af00      	add	r7, sp, #0
 8002638:	60ba      	str	r2, [r7, #8]
 800263a:	607b      	str	r3, [r7, #4]
 800263c:	4603      	mov	r3, r0
 800263e:	73fb      	strb	r3, [r7, #15]
 8002640:	460b      	mov	r3, r1
 8002642:	73bb      	strb	r3, [r7, #14]
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
 8002644:	7bb9      	ldrb	r1, [r7, #14]
 8002646:	7bf8      	ldrb	r0, [r7, #15]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	f7ff ffd2 	bl	80025f4 <mavlink_frame_char>
 8002650:	4603      	mov	r3, r0
 8002652:	77fb      	strb	r3, [r7, #31]
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 8002654:	7ffb      	ldrb	r3, [r7, #31]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d002      	beq.n	8002660 <mavlink_parse_char+0x2e>
 800265a:	7ffb      	ldrb	r3, [r7, #31]
 800265c:	2b03      	cmp	r3, #3
 800265e:	d120      	bne.n	80026a2 <mavlink_parse_char+0x70>
	msg_received == MAVLINK_FRAMING_BAD_SIGNATURE) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff f82a 	bl	80016bc <mavlink_get_channel_buffer>
 8002668:	61b8      	str	r0, [r7, #24]
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
 800266a:	7bfb      	ldrb	r3, [r7, #15]
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff f811 	bl	8001694 <mavlink_get_channel_status>
 8002672:	6178      	str	r0, [r7, #20]
	    _mav_parse_error(status);
 8002674:	6978      	ldr	r0, [r7, #20]
 8002676:	f7ff fb80 	bl	8001d7a <_mav_parse_error>
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	2201      	movs	r2, #1
 8002684:	70da      	strb	r2, [r3, #3]
	    if (c == MAVLINK_STX)
 8002686:	7bbb      	ldrb	r3, [r7, #14]
 8002688:	2bfd      	cmp	r3, #253	@ 0xfd
 800268a:	d108      	bne.n	800269e <mavlink_parse_char+0x6c>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	2202      	movs	r2, #2
 8002690:	70da      	strb	r2, [r3, #3]
		    rxmsg->len = 0;
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	2200      	movs	r2, #0
 8002696:	70da      	strb	r2, [r3, #3]
		    mavlink_start_checksum(rxmsg);
 8002698:	69b8      	ldr	r0, [r7, #24]
 800269a:	f7ff fc5d 	bl	8001f58 <mavlink_start_checksum>
	    }
	    return 0;
 800269e:	2300      	movs	r3, #0
 80026a0:	e000      	b.n	80026a4 <mavlink_parse_char+0x72>
    }
    return msg_received;
 80026a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3720      	adds	r7, #32
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static inline void mav_array_memcpy(void *dest, const void *src, size_t n)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
	if (src == NULL) {
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d105      	bne.n	80026ca <mav_array_memcpy+0x1e>
		memset(dest, 0, n);
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	2100      	movs	r1, #0
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f004 f885 	bl	80067d2 <memset>
	} else {
		memcpy(dest, src, n);
	}
}
 80026c8:	e004      	b.n	80026d4 <mav_array_memcpy+0x28>
		memcpy(dest, src, n);
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	68b9      	ldr	r1, [r7, #8]
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f004 f8ff 	bl	80068d2 <memcpy>
}
 80026d4:	bf00      	nop
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <mavlink_msg_attitude_decode>:
 *
 * @param msg The message to decode
 * @param attitude C-struct to decode the message contents into
 */
static inline void mavlink_msg_attitude_decode(const mavlink_message_t* msg, mavlink_attitude_t* attitude)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
    attitude->yaw = mavlink_msg_attitude_get_yaw(msg);
    attitude->rollspeed = mavlink_msg_attitude_get_rollspeed(msg);
    attitude->pitchspeed = mavlink_msg_attitude_get_pitchspeed(msg);
    attitude->yawspeed = mavlink_msg_attitude_get_yawspeed(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_ATTITUDE_LEN? msg->len : MAVLINK_MSG_ID_ATTITUDE_LEN;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	78db      	ldrb	r3, [r3, #3]
 80026ea:	2b1c      	cmp	r3, #28
 80026ec:	bf28      	it	cs
 80026ee:	231c      	movcs	r3, #28
 80026f0:	73fb      	strb	r3, [r7, #15]
        memset(attitude, 0, MAVLINK_MSG_ID_ATTITUDE_LEN);
 80026f2:	221c      	movs	r2, #28
 80026f4:	2100      	movs	r1, #0
 80026f6:	6838      	ldr	r0, [r7, #0]
 80026f8:	f004 f86b 	bl	80067d2 <memset>
    memcpy(attitude, _MAV_PAYLOAD(msg), len);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	330c      	adds	r3, #12
 8002700:	7bfa      	ldrb	r2, [r7, #15]
 8002702:	4619      	mov	r1, r3
 8002704:	6838      	ldr	r0, [r7, #0]
 8002706:	f004 f8e4 	bl	80068d2 <memcpy>
#endif
}
 800270a:	bf00      	nop
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <mavlink_msg_statustext_pack>:
 * @param chunk_seq  This chunk's sequence number; indexing is from zero.  Any null character in the text field is taken to mean this was the last chunk.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_statustext_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t severity, const char *text, uint16_t id, uint8_t chunk_seq)
{
 8002712:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002714:	b093      	sub	sp, #76	@ 0x4c
 8002716:	af02      	add	r7, sp, #8
 8002718:	603a      	str	r2, [r7, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	4603      	mov	r3, r0
 800271e:	71fb      	strb	r3, [r7, #7]
 8002720:	460b      	mov	r3, r1
 8002722:	71bb      	strb	r3, [r7, #6]
 8002724:	4613      	mov	r3, r2
 8002726:	717b      	strb	r3, [r7, #5]
    _mav_put_uint8_t(buf, 53, chunk_seq);
    _mav_put_char_array(buf, 1, text, 50);
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_STATUSTEXT_LEN);
#else
    mavlink_statustext_t packet;
    packet.severity = severity;
 8002728:	797b      	ldrb	r3, [r7, #5]
 800272a:	723b      	strb	r3, [r7, #8]
    packet.id = id;
 800272c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002730:	f8a7 303b 	strh.w	r3, [r7, #59]	@ 0x3b
    packet.chunk_seq = chunk_seq;
 8002734:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8002738:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    mav_array_memcpy(packet.text, text, sizeof(char)*50);
 800273c:	f107 0308 	add.w	r3, r7, #8
 8002740:	3301      	adds	r3, #1
 8002742:	2232      	movs	r2, #50	@ 0x32
 8002744:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff ffb0 	bl	80026ac <mav_array_memcpy>
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_STATUSTEXT_LEN);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	330c      	adds	r3, #12
 8002750:	f107 0408 	add.w	r4, r7, #8
 8002754:	469c      	mov	ip, r3
 8002756:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 800275a:	4665      	mov	r5, ip
 800275c:	4626      	mov	r6, r4
 800275e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002760:	6028      	str	r0, [r5, #0]
 8002762:	6069      	str	r1, [r5, #4]
 8002764:	60aa      	str	r2, [r5, #8]
 8002766:	60eb      	str	r3, [r5, #12]
 8002768:	3410      	adds	r4, #16
 800276a:	f10c 0c10 	add.w	ip, ip, #16
 800276e:	4574      	cmp	r4, lr
 8002770:	d1f3      	bne.n	800275a <mavlink_msg_statustext_pack+0x48>
 8002772:	4663      	mov	r3, ip
 8002774:	4622      	mov	r2, r4
 8002776:	6810      	ldr	r0, [r2, #0]
 8002778:	6018      	str	r0, [r3, #0]
 800277a:	8892      	ldrh	r2, [r2, #4]
 800277c:	809a      	strh	r2, [r3, #4]
#endif

    msg->msgid = MAVLINK_MSG_ID_STATUSTEXT;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2200      	movs	r2, #0
 8002782:	f062 0202 	orn	r2, r2, #2
 8002786:	725a      	strb	r2, [r3, #9]
 8002788:	2200      	movs	r2, #0
 800278a:	729a      	strb	r2, [r3, #10]
 800278c:	2200      	movs	r2, #0
 800278e:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_STATUSTEXT_MIN_LEN, MAVLINK_MSG_ID_STATUSTEXT_LEN, MAVLINK_MSG_ID_STATUSTEXT_CRC);
 8002790:	79ba      	ldrb	r2, [r7, #6]
 8002792:	79f9      	ldrb	r1, [r7, #7]
 8002794:	2353      	movs	r3, #83	@ 0x53
 8002796:	9301      	str	r3, [sp, #4]
 8002798:	2336      	movs	r3, #54	@ 0x36
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	2333      	movs	r3, #51	@ 0x33
 800279e:	6838      	ldr	r0, [r7, #0]
 80027a0:	f7ff facd 	bl	8001d3e <mavlink_finalize_message>
 80027a4:	4603      	mov	r3, r0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3744      	adds	r7, #68	@ 0x44
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080027b0 <send_status_text>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void send_status_text(const char* text)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 80027b6:	af04      	add	r7, sp, #16
 80027b8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80027bc:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80027c0:	6018      	str	r0, [r3, #0]
    mavlink_message_t msg_out;
    uint8_t buffer[MAVLINK_MAX_PACKET_LEN];

    mavlink_msg_statustext_pack(
 80027c2:	4b17      	ldr	r3, [pc, #92]	@ (8002820 <send_status_text+0x70>)
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	1c5a      	adds	r2, r3, #1
 80027c8:	b291      	uxth	r1, r2
 80027ca:	4a15      	ldr	r2, [pc, #84]	@ (8002820 <send_status_text+0x70>)
 80027cc:	8011      	strh	r1, [r2, #0]
 80027ce:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80027d2:	2100      	movs	r1, #0
 80027d4:	9102      	str	r1, [sp, #8]
 80027d6:	9301      	str	r3, [sp, #4]
 80027d8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80027dc:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	2304      	movs	r3, #4
 80027e6:	21c8      	movs	r1, #200	@ 0xc8
 80027e8:	2001      	movs	r0, #1
 80027ea:	f7ff ff92 	bl	8002712 <mavlink_msg_statustext_pack>
        text,
        status_msg_id++,          // Message ID tự tăng
        0                         // chunk_seq (0 vì không chia gói)
    );

    uint16_t len = mavlink_msg_to_send_buffer(buffer, &msg_out);
 80027ee:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80027f2:	f107 0308 	add.w	r3, r7, #8
 80027f6:	4611      	mov	r1, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff face 	bl	8001d9a <mavlink_msg_to_send_buffer>
 80027fe:	4603      	mov	r3, r0
 8002800:	f8a7 3246 	strh.w	r3, [r7, #582]	@ 0x246
    HAL_UART_Transmit(&huart1, buffer, len, HAL_MAX_DELAY);
 8002804:	f8b7 2246 	ldrh.w	r2, [r7, #582]	@ 0x246
 8002808:	f107 0108 	add.w	r1, r7, #8
 800280c:	f04f 33ff 	mov.w	r3, #4294967295
 8002810:	4804      	ldr	r0, [pc, #16]	@ (8002824 <send_status_text+0x74>)
 8002812:	f002 f897 	bl	8004944 <HAL_UART_Transmit>
}
 8002816:	bf00      	nop
 8002818:	f507 7712 	add.w	r7, r7, #584	@ 0x248
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	20000470 	.word	0x20000470
 8002824:	20000474 	.word	0x20000474

08002828 <notify_angle_threshold>:


void notify_angle_threshold(uint8_t level)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	71fb      	strb	r3, [r7, #7]
    const char* msg = NULL;
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]

    if (level == 1) msg = "Angle > 10 degrees";
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d102      	bne.n	8002842 <notify_angle_threshold+0x1a>
 800283c:	4b0a      	ldr	r3, [pc, #40]	@ (8002868 <notify_angle_threshold+0x40>)
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	e00a      	b.n	8002858 <notify_angle_threshold+0x30>
    else if (level == 2) msg = "Angle > 30 degrees";
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	2b02      	cmp	r3, #2
 8002846:	d102      	bne.n	800284e <notify_angle_threshold+0x26>
 8002848:	4b08      	ldr	r3, [pc, #32]	@ (800286c <notify_angle_threshold+0x44>)
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	e004      	b.n	8002858 <notify_angle_threshold+0x30>
    else if (level == 3) msg = "Angle > 45 degrees";
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	2b03      	cmp	r3, #3
 8002852:	d105      	bne.n	8002860 <notify_angle_threshold+0x38>
 8002854:	4b06      	ldr	r3, [pc, #24]	@ (8002870 <notify_angle_threshold+0x48>)
 8002856:	60fb      	str	r3, [r7, #12]
    else return;

    send_status_text(msg);
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f7ff ffa9 	bl	80027b0 <send_status_text>
 800285e:	e000      	b.n	8002862 <notify_angle_threshold+0x3a>
    else return;
 8002860:	bf00      	nop
}
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	080086a0 	.word	0x080086a0
 800286c:	080086b4 	.word	0x080086b4
 8002870:	080086c8 	.word	0x080086c8
 8002874:	00000000 	.word	0x00000000

08002878 <process_byte>:

void process_byte(uint8_t byte)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	71fb      	strb	r3, [r7, #7]
    if (mavlink_parse_char(MAVLINK_COMM_0, byte, &msg, &status)) {
 8002882:	79f9      	ldrb	r1, [r7, #7]
 8002884:	4b78      	ldr	r3, [pc, #480]	@ (8002a68 <process_byte+0x1f0>)
 8002886:	4a79      	ldr	r2, [pc, #484]	@ (8002a6c <process_byte+0x1f4>)
 8002888:	2000      	movs	r0, #0
 800288a:	f7ff fed2 	bl	8002632 <mavlink_parse_char>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 80df 	beq.w	8002a54 <process_byte+0x1dc>

        if (msg.msgid == MAVLINK_MSG_ID_ATTITUDE) {
 8002896:	4b75      	ldr	r3, [pc, #468]	@ (8002a6c <process_byte+0x1f4>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800289e:	2b1e      	cmp	r3, #30
 80028a0:	f040 80d8 	bne.w	8002a54 <process_byte+0x1dc>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); // Báo hiệu nhận ATTITUDE
 80028a4:	2201      	movs	r2, #1
 80028a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80028aa:	4871      	ldr	r0, [pc, #452]	@ (8002a70 <process_byte+0x1f8>)
 80028ac:	f001 fb88 	bl	8003fc0 <HAL_GPIO_WritePin>

            mavlink_msg_attitude_decode(&msg, &att);
 80028b0:	4970      	ldr	r1, [pc, #448]	@ (8002a74 <process_byte+0x1fc>)
 80028b2:	486e      	ldr	r0, [pc, #440]	@ (8002a6c <process_byte+0x1f4>)
 80028b4:	f7ff ff12 	bl	80026dc <mavlink_msg_attitude_decode>

            pitch_deg = att.pitch * 180.0f / M_PI;
 80028b8:	4b6e      	ldr	r3, [pc, #440]	@ (8002a74 <process_byte+0x1fc>)
 80028ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80028be:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8002a78 <process_byte+0x200>
 80028c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028c6:	ee17 0a90 	vmov	r0, s15
 80028ca:	f7fd fe3d 	bl	8000548 <__aeabi_f2d>
 80028ce:	a364      	add	r3, pc, #400	@ (adr r3, 8002a60 <process_byte+0x1e8>)
 80028d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d4:	f7fd ffba 	bl	800084c <__aeabi_ddiv>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	4610      	mov	r0, r2
 80028de:	4619      	mov	r1, r3
 80028e0:	f7fe f962 	bl	8000ba8 <__aeabi_d2f>
 80028e4:	4603      	mov	r3, r0
 80028e6:	4a65      	ldr	r2, [pc, #404]	@ (8002a7c <process_byte+0x204>)
 80028e8:	6013      	str	r3, [r2, #0]
            roll_deg  = att.roll  * 180.0f / M_PI;
 80028ea:	4b62      	ldr	r3, [pc, #392]	@ (8002a74 <process_byte+0x1fc>)
 80028ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80028f0:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8002a78 <process_byte+0x200>
 80028f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028f8:	ee17 0a90 	vmov	r0, s15
 80028fc:	f7fd fe24 	bl	8000548 <__aeabi_f2d>
 8002900:	a357      	add	r3, pc, #348	@ (adr r3, 8002a60 <process_byte+0x1e8>)
 8002902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002906:	f7fd ffa1 	bl	800084c <__aeabi_ddiv>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	4610      	mov	r0, r2
 8002910:	4619      	mov	r1, r3
 8002912:	f7fe f949 	bl	8000ba8 <__aeabi_d2f>
 8002916:	4603      	mov	r3, r0
 8002918:	4a59      	ldr	r2, [pc, #356]	@ (8002a80 <process_byte+0x208>)
 800291a:	6013      	str	r3, [r2, #0]
            yaw_deg   = att.yaw   * 180.0f / M_PI;
 800291c:	4b55      	ldr	r3, [pc, #340]	@ (8002a74 <process_byte+0x1fc>)
 800291e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002922:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8002a78 <process_byte+0x200>
 8002926:	ee67 7a87 	vmul.f32	s15, s15, s14
 800292a:	ee17 0a90 	vmov	r0, s15
 800292e:	f7fd fe0b 	bl	8000548 <__aeabi_f2d>
 8002932:	a34b      	add	r3, pc, #300	@ (adr r3, 8002a60 <process_byte+0x1e8>)
 8002934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002938:	f7fd ff88 	bl	800084c <__aeabi_ddiv>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4610      	mov	r0, r2
 8002942:	4619      	mov	r1, r3
 8002944:	f7fe f930 	bl	8000ba8 <__aeabi_d2f>
 8002948:	4603      	mov	r3, r0
 800294a:	4a4e      	ldr	r2, [pc, #312]	@ (8002a84 <process_byte+0x20c>)
 800294c:	6013      	str	r3, [r2, #0]

            max_angle = fmaxf(fmaxf(fabsf(pitch_deg), fabsf(roll_deg)), fabsf(yaw_deg));
 800294e:	4b4b      	ldr	r3, [pc, #300]	@ (8002a7c <process_byte+0x204>)
 8002950:	edd3 7a00 	vldr	s15, [r3]
 8002954:	eeb0 7ae7 	vabs.f32	s14, s15
 8002958:	4b49      	ldr	r3, [pc, #292]	@ (8002a80 <process_byte+0x208>)
 800295a:	edd3 7a00 	vldr	s15, [r3]
 800295e:	eef0 7ae7 	vabs.f32	s15, s15
 8002962:	eef0 0a67 	vmov.f32	s1, s15
 8002966:	eeb0 0a47 	vmov.f32	s0, s14
 800296a:	f005 fe53 	bl	8008614 <fmaxf>
 800296e:	eeb0 7a40 	vmov.f32	s14, s0
 8002972:	4b44      	ldr	r3, [pc, #272]	@ (8002a84 <process_byte+0x20c>)
 8002974:	edd3 7a00 	vldr	s15, [r3]
 8002978:	eef0 7ae7 	vabs.f32	s15, s15
 800297c:	eef0 0a67 	vmov.f32	s1, s15
 8002980:	eeb0 0a47 	vmov.f32	s0, s14
 8002984:	f005 fe46 	bl	8008614 <fmaxf>
 8002988:	eef0 7a40 	vmov.f32	s15, s0
 800298c:	4b3e      	ldr	r3, [pc, #248]	@ (8002a88 <process_byte+0x210>)
 800298e:	edc3 7a00 	vstr	s15, [r3]

            // Reset LED
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8002992:	2200      	movs	r2, #0
 8002994:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002998:	4835      	ldr	r0, [pc, #212]	@ (8002a70 <process_byte+0x1f8>)
 800299a:	f001 fb11 	bl	8003fc0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800299e:	2200      	movs	r2, #0
 80029a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80029a4:	4832      	ldr	r0, [pc, #200]	@ (8002a70 <process_byte+0x1f8>)
 80029a6:	f001 fb0b 	bl	8003fc0 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80029aa:	2200      	movs	r2, #0
 80029ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80029b0:	482f      	ldr	r0, [pc, #188]	@ (8002a70 <process_byte+0x1f8>)
 80029b2:	f001 fb05 	bl	8003fc0 <HAL_GPIO_WritePin>

            uint8_t current_level = (max_angle > 45) ? 3 : (max_angle > 30) ? 2 : (max_angle > 10) ? 1 : 0;
 80029b6:	4b34      	ldr	r3, [pc, #208]	@ (8002a88 <process_byte+0x210>)
 80029b8:	edd3 7a00 	vldr	s15, [r3]
 80029bc:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8002a8c <process_byte+0x214>
 80029c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c8:	dd01      	ble.n	80029ce <process_byte+0x156>
 80029ca:	2303      	movs	r3, #3
 80029cc:	e018      	b.n	8002a00 <process_byte+0x188>
 80029ce:	4b2e      	ldr	r3, [pc, #184]	@ (8002a88 <process_byte+0x210>)
 80029d0:	edd3 7a00 	vldr	s15, [r3]
 80029d4:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80029d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e0:	dd01      	ble.n	80029e6 <process_byte+0x16e>
 80029e2:	2302      	movs	r3, #2
 80029e4:	e00c      	b.n	8002a00 <process_byte+0x188>
 80029e6:	4b28      	ldr	r3, [pc, #160]	@ (8002a88 <process_byte+0x210>)
 80029e8:	edd3 7a00 	vldr	s15, [r3]
 80029ec:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80029f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f8:	bfcc      	ite	gt
 80029fa:	2301      	movgt	r3, #1
 80029fc:	2300      	movle	r3, #0
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	73fb      	strb	r3, [r7, #15]

            if (current_level != last_level) {
 8002a02:	4b23      	ldr	r3, [pc, #140]	@ (8002a90 <process_byte+0x218>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	7bfa      	ldrb	r2, [r7, #15]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d006      	beq.n	8002a1a <process_byte+0x1a2>
                last_level = current_level;
 8002a0c:	4a20      	ldr	r2, [pc, #128]	@ (8002a90 <process_byte+0x218>)
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
 8002a10:	7013      	strb	r3, [r2, #0]
                notify_angle_threshold(current_level);
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ff07 	bl	8002828 <notify_angle_threshold>
            }

            if (current_level == 3) HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d106      	bne.n	8002a2e <process_byte+0x1b6>
 8002a20:	2201      	movs	r2, #1
 8002a22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a26:	4812      	ldr	r0, [pc, #72]	@ (8002a70 <process_byte+0x1f8>)
 8002a28:	f001 faca 	bl	8003fc0 <HAL_GPIO_WritePin>
            else if (current_level == 2) HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
            else if (current_level == 1) HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
        }
    }
}
 8002a2c:	e012      	b.n	8002a54 <process_byte+0x1dc>
            else if (current_level == 2) HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d106      	bne.n	8002a42 <process_byte+0x1ca>
 8002a34:	2201      	movs	r2, #1
 8002a36:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002a3a:	480d      	ldr	r0, [pc, #52]	@ (8002a70 <process_byte+0x1f8>)
 8002a3c:	f001 fac0 	bl	8003fc0 <HAL_GPIO_WritePin>
}
 8002a40:	e008      	b.n	8002a54 <process_byte+0x1dc>
            else if (current_level == 1) HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d105      	bne.n	8002a54 <process_byte+0x1dc>
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a4e:	4808      	ldr	r0, [pc, #32]	@ (8002a70 <process_byte+0x1f8>)
 8002a50:	f001 fab6 	bl	8003fc0 <HAL_GPIO_WritePin>
}
 8002a54:	bf00      	nop
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	f3af 8000 	nop.w
 8002a60:	54442d18 	.word	0x54442d18
 8002a64:	400921fb 	.word	0x400921fb
 8002a68:	2000042c 	.word	0x2000042c
 8002a6c:	20000308 	.word	0x20000308
 8002a70:	40020c00 	.word	0x40020c00
 8002a74:	20000444 	.word	0x20000444
 8002a78:	43340000 	.word	0x43340000
 8002a7c:	20000460 	.word	0x20000460
 8002a80:	20000464 	.word	0x20000464
 8002a84:	20000468 	.word	0x20000468
 8002a88:	2000046c 	.word	0x2000046c
 8002a8c:	42340000 	.word	0x42340000
 8002a90:	20000472 	.word	0x20000472

08002a94 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == USART1) {
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a0e      	ldr	r2, [pc, #56]	@ (8002ae0 <HAL_UARTEx_RxEventCallback+0x4c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d115      	bne.n	8002ad6 <HAL_UARTEx_RxEventCallback+0x42>
        for (uint16_t i = 0; i < Size; i++) {
 8002aaa:	2300      	movs	r3, #0
 8002aac:	81fb      	strh	r3, [r7, #14]
 8002aae:	e008      	b.n	8002ac2 <HAL_UARTEx_RxEventCallback+0x2e>
            process_byte(mavlink_rx_buffer[i]);
 8002ab0:	89fb      	ldrh	r3, [r7, #14]
 8002ab2:	4a0c      	ldr	r2, [pc, #48]	@ (8002ae4 <HAL_UARTEx_RxEventCallback+0x50>)
 8002ab4:	5cd3      	ldrb	r3, [r2, r3]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff fede 	bl	8002878 <process_byte>
        for (uint16_t i = 0; i < Size; i++) {
 8002abc:	89fb      	ldrh	r3, [r7, #14]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	81fb      	strh	r3, [r7, #14]
 8002ac2:	89fa      	ldrh	r2, [r7, #14]
 8002ac4:	887b      	ldrh	r3, [r7, #2]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d3f2      	bcc.n	8002ab0 <HAL_UARTEx_RxEventCallback+0x1c>
        }

        HAL_UARTEx_ReceiveToIdle_DMA(&huart1, mavlink_rx_buffer, MAVLINK_BUFFER_SIZE);
 8002aca:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002ace:	4905      	ldr	r1, [pc, #20]	@ (8002ae4 <HAL_UARTEx_RxEventCallback+0x50>)
 8002ad0:	4805      	ldr	r0, [pc, #20]	@ (8002ae8 <HAL_UARTEx_RxEventCallback+0x54>)
 8002ad2:	f001 ffc2 	bl	8004a5a <HAL_UARTEx_ReceiveToIdle_DMA>
    }
}
 8002ad6:	bf00      	nop
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40011000 	.word	0x40011000
 8002ae4:	200001f0 	.word	0x200001f0
 8002ae8:	20000474 	.word	0x20000474

08002aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002af0:	f000 fb20 	bl	8003134 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002af4:	f000 f820 	bl	8002b38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002af8:	f000 f8d2 	bl	8002ca0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002afc:	f000 f8b0 	bl	8002c60 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002b00:	f000 f884 	bl	8002c0c <MX_USART1_UART_Init>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, mavlink_rx_buffer, MAVLINK_BUFFER_SIZE);
 8002b04:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002b08:	4908      	ldr	r1, [pc, #32]	@ (8002b2c <main+0x40>)
 8002b0a:	4809      	ldr	r0, [pc, #36]	@ (8002b30 <main+0x44>)
 8002b0c:	f001 ffa5 	bl	8004a5a <HAL_UARTEx_ReceiveToIdle_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      if (HAL_UART_GetError(&huart1) == HAL_UART_ERROR_NONE) {
 8002b10:	4807      	ldr	r0, [pc, #28]	@ (8002b30 <main+0x44>)
 8002b12:	f002 fab9 	bl	8005088 <HAL_UART_GetError>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d102      	bne.n	8002b22 <main+0x36>
          send_status_text("STM32 is sending MAVLink STATUSTEXT!");
 8002b1c:	4805      	ldr	r0, [pc, #20]	@ (8002b34 <main+0x48>)
 8002b1e:	f7ff fe47 	bl	80027b0 <send_status_text>
      }
      HAL_Delay(5000);
 8002b22:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002b26:	f000 fb77 	bl	8003218 <HAL_Delay>
      if (HAL_UART_GetError(&huart1) == HAL_UART_ERROR_NONE) {
 8002b2a:	e7f1      	b.n	8002b10 <main+0x24>
 8002b2c:	200001f0 	.word	0x200001f0
 8002b30:	20000474 	.word	0x20000474
 8002b34:	080086dc 	.word	0x080086dc

08002b38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b094      	sub	sp, #80	@ 0x50
 8002b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b3e:	f107 0320 	add.w	r3, r7, #32
 8002b42:	2230      	movs	r2, #48	@ 0x30
 8002b44:	2100      	movs	r1, #0
 8002b46:	4618      	mov	r0, r3
 8002b48:	f003 fe43 	bl	80067d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b4c:	f107 030c 	add.w	r3, r7, #12
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60bb      	str	r3, [r7, #8]
 8002b60:	4b28      	ldr	r3, [pc, #160]	@ (8002c04 <SystemClock_Config+0xcc>)
 8002b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b64:	4a27      	ldr	r2, [pc, #156]	@ (8002c04 <SystemClock_Config+0xcc>)
 8002b66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b6c:	4b25      	ldr	r3, [pc, #148]	@ (8002c04 <SystemClock_Config+0xcc>)
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b78:	2300      	movs	r3, #0
 8002b7a:	607b      	str	r3, [r7, #4]
 8002b7c:	4b22      	ldr	r3, [pc, #136]	@ (8002c08 <SystemClock_Config+0xd0>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a21      	ldr	r2, [pc, #132]	@ (8002c08 <SystemClock_Config+0xd0>)
 8002b82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	4b1f      	ldr	r3, [pc, #124]	@ (8002c08 <SystemClock_Config+0xd0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b90:	607b      	str	r3, [r7, #4]
 8002b92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b94:	2302      	movs	r3, #2
 8002b96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b9c:	2310      	movs	r3, #16
 8002b9e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002ba8:	2308      	movs	r3, #8
 8002baa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002bac:	23a8      	movs	r3, #168	@ 0xa8
 8002bae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002bb4:	2304      	movs	r3, #4
 8002bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bb8:	f107 0320 	add.w	r3, r7, #32
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f001 fa19 	bl	8003ff4 <HAL_RCC_OscConfig>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002bc8:	f000 f8bc 	bl	8002d44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bcc:	230f      	movs	r3, #15
 8002bce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002bd8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002bdc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002bde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002be2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002be4:	f107 030c 	add.w	r3, r7, #12
 8002be8:	2105      	movs	r1, #5
 8002bea:	4618      	mov	r0, r3
 8002bec:	f001 fc7a 	bl	80044e4 <HAL_RCC_ClockConfig>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002bf6:	f000 f8a5 	bl	8002d44 <Error_Handler>
  }
}
 8002bfa:	bf00      	nop
 8002bfc:	3750      	adds	r7, #80	@ 0x50
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40007000 	.word	0x40007000

08002c0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c10:	4b11      	ldr	r3, [pc, #68]	@ (8002c58 <MX_USART1_UART_Init+0x4c>)
 8002c12:	4a12      	ldr	r2, [pc, #72]	@ (8002c5c <MX_USART1_UART_Init+0x50>)
 8002c14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c16:	4b10      	ldr	r3, [pc, #64]	@ (8002c58 <MX_USART1_UART_Init+0x4c>)
 8002c18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c58 <MX_USART1_UART_Init+0x4c>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c24:	4b0c      	ldr	r3, [pc, #48]	@ (8002c58 <MX_USART1_UART_Init+0x4c>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c58 <MX_USART1_UART_Init+0x4c>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c30:	4b09      	ldr	r3, [pc, #36]	@ (8002c58 <MX_USART1_UART_Init+0x4c>)
 8002c32:	220c      	movs	r2, #12
 8002c34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c36:	4b08      	ldr	r3, [pc, #32]	@ (8002c58 <MX_USART1_UART_Init+0x4c>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c3c:	4b06      	ldr	r3, [pc, #24]	@ (8002c58 <MX_USART1_UART_Init+0x4c>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c42:	4805      	ldr	r0, [pc, #20]	@ (8002c58 <MX_USART1_UART_Init+0x4c>)
 8002c44:	f001 fe2e 	bl	80048a4 <HAL_UART_Init>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002c4e:	f000 f879 	bl	8002d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20000474 	.word	0x20000474
 8002c5c:	40011000 	.word	0x40011000

08002c60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	607b      	str	r3, [r7, #4]
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c9c <MX_DMA_Init+0x3c>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6e:	4a0b      	ldr	r2, [pc, #44]	@ (8002c9c <MX_DMA_Init+0x3c>)
 8002c70:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c76:	4b09      	ldr	r3, [pc, #36]	@ (8002c9c <MX_DMA_Init+0x3c>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c7e:	607b      	str	r3, [r7, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8002c82:	2200      	movs	r2, #0
 8002c84:	2100      	movs	r1, #0
 8002c86:	2044      	movs	r0, #68	@ 0x44
 8002c88:	f000 fbc5 	bl	8003416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8002c8c:	2044      	movs	r0, #68	@ 0x44
 8002c8e:	f000 fbde 	bl	800344e <HAL_NVIC_EnableIRQ>

}
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800

08002ca0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b088      	sub	sp, #32
 8002ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca6:	f107 030c 	add.w	r3, r7, #12
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	605a      	str	r2, [r3, #4]
 8002cb0:	609a      	str	r2, [r3, #8]
 8002cb2:	60da      	str	r2, [r3, #12]
 8002cb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	4b20      	ldr	r3, [pc, #128]	@ (8002d3c <MX_GPIO_Init+0x9c>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8002d3c <MX_GPIO_Init+0x9c>)
 8002cc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8002d3c <MX_GPIO_Init+0x9c>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cce:	60bb      	str	r3, [r7, #8]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	607b      	str	r3, [r7, #4]
 8002cd6:	4b19      	ldr	r3, [pc, #100]	@ (8002d3c <MX_GPIO_Init+0x9c>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cda:	4a18      	ldr	r2, [pc, #96]	@ (8002d3c <MX_GPIO_Init+0x9c>)
 8002cdc:	f043 0308 	orr.w	r3, r3, #8
 8002ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ce2:	4b16      	ldr	r3, [pc, #88]	@ (8002d3c <MX_GPIO_Init+0x9c>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	607b      	str	r3, [r7, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	603b      	str	r3, [r7, #0]
 8002cf2:	4b12      	ldr	r3, [pc, #72]	@ (8002d3c <MX_GPIO_Init+0x9c>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf6:	4a11      	ldr	r2, [pc, #68]	@ (8002d3c <MX_GPIO_Init+0x9c>)
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8002d3c <MX_GPIO_Init+0x9c>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	603b      	str	r3, [r7, #0]
 8002d08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8002d10:	480b      	ldr	r0, [pc, #44]	@ (8002d40 <MX_GPIO_Init+0xa0>)
 8002d12:	f001 f955 	bl	8003fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002d16:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002d1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d24:	2300      	movs	r3, #0
 8002d26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d28:	f107 030c 	add.w	r3, r7, #12
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4804      	ldr	r0, [pc, #16]	@ (8002d40 <MX_GPIO_Init+0xa0>)
 8002d30:	f000 ffaa 	bl	8003c88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d34:	bf00      	nop
 8002d36:	3720      	adds	r7, #32
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40020c00 	.word	0x40020c00

08002d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d48:	b672      	cpsid	i
}
 8002d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d4c:	bf00      	nop
 8002d4e:	e7fd      	b.n	8002d4c <Error_Handler+0x8>

08002d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d56:	2300      	movs	r3, #0
 8002d58:	607b      	str	r3, [r7, #4]
 8002d5a:	4b10      	ldr	r3, [pc, #64]	@ (8002d9c <HAL_MspInit+0x4c>)
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5e:	4a0f      	ldr	r2, [pc, #60]	@ (8002d9c <HAL_MspInit+0x4c>)
 8002d60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d64:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d66:	4b0d      	ldr	r3, [pc, #52]	@ (8002d9c <HAL_MspInit+0x4c>)
 8002d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d6e:	607b      	str	r3, [r7, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	603b      	str	r3, [r7, #0]
 8002d76:	4b09      	ldr	r3, [pc, #36]	@ (8002d9c <HAL_MspInit+0x4c>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7a:	4a08      	ldr	r2, [pc, #32]	@ (8002d9c <HAL_MspInit+0x4c>)
 8002d7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d80:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d82:	4b06      	ldr	r3, [pc, #24]	@ (8002d9c <HAL_MspInit+0x4c>)
 8002d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d8a:	603b      	str	r3, [r7, #0]
 8002d8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40023800 	.word	0x40023800

08002da0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b08a      	sub	sp, #40	@ 0x28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da8:	f107 0314 	add.w	r3, r7, #20
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	605a      	str	r2, [r3, #4]
 8002db2:	609a      	str	r2, [r3, #8]
 8002db4:	60da      	str	r2, [r3, #12]
 8002db6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a35      	ldr	r2, [pc, #212]	@ (8002e94 <HAL_UART_MspInit+0xf4>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d163      	bne.n	8002e8a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	613b      	str	r3, [r7, #16]
 8002dc6:	4b34      	ldr	r3, [pc, #208]	@ (8002e98 <HAL_UART_MspInit+0xf8>)
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dca:	4a33      	ldr	r2, [pc, #204]	@ (8002e98 <HAL_UART_MspInit+0xf8>)
 8002dcc:	f043 0310 	orr.w	r3, r3, #16
 8002dd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dd2:	4b31      	ldr	r3, [pc, #196]	@ (8002e98 <HAL_UART_MspInit+0xf8>)
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd6:	f003 0310 	and.w	r3, r3, #16
 8002dda:	613b      	str	r3, [r7, #16]
 8002ddc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	4b2d      	ldr	r3, [pc, #180]	@ (8002e98 <HAL_UART_MspInit+0xf8>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de6:	4a2c      	ldr	r2, [pc, #176]	@ (8002e98 <HAL_UART_MspInit+0xf8>)
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dee:	4b2a      	ldr	r3, [pc, #168]	@ (8002e98 <HAL_UART_MspInit+0xf8>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002dfa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e00:	2302      	movs	r3, #2
 8002e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e0c:	2307      	movs	r3, #7
 8002e0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e10:	f107 0314 	add.w	r3, r7, #20
 8002e14:	4619      	mov	r1, r3
 8002e16:	4821      	ldr	r0, [pc, #132]	@ (8002e9c <HAL_UART_MspInit+0xfc>)
 8002e18:	f000 ff36 	bl	8003c88 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8002e1c:	4b20      	ldr	r3, [pc, #128]	@ (8002ea0 <HAL_UART_MspInit+0x100>)
 8002e1e:	4a21      	ldr	r2, [pc, #132]	@ (8002ea4 <HAL_UART_MspInit+0x104>)
 8002e20:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002e22:	4b1f      	ldr	r3, [pc, #124]	@ (8002ea0 <HAL_UART_MspInit+0x100>)
 8002e24:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002e28:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e2a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea0 <HAL_UART_MspInit+0x100>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e30:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea0 <HAL_UART_MspInit+0x100>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e36:	4b1a      	ldr	r3, [pc, #104]	@ (8002ea0 <HAL_UART_MspInit+0x100>)
 8002e38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e3c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e3e:	4b18      	ldr	r3, [pc, #96]	@ (8002ea0 <HAL_UART_MspInit+0x100>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e44:	4b16      	ldr	r3, [pc, #88]	@ (8002ea0 <HAL_UART_MspInit+0x100>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002e4a:	4b15      	ldr	r3, [pc, #84]	@ (8002ea0 <HAL_UART_MspInit+0x100>)
 8002e4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e50:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e52:	4b13      	ldr	r3, [pc, #76]	@ (8002ea0 <HAL_UART_MspInit+0x100>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e58:	4b11      	ldr	r3, [pc, #68]	@ (8002ea0 <HAL_UART_MspInit+0x100>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002e5e:	4810      	ldr	r0, [pc, #64]	@ (8002ea0 <HAL_UART_MspInit+0x100>)
 8002e60:	f000 fb10 	bl	8003484 <HAL_DMA_Init>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002e6a:	f7ff ff6b 	bl	8002d44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a0b      	ldr	r2, [pc, #44]	@ (8002ea0 <HAL_UART_MspInit+0x100>)
 8002e72:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002e74:	4a0a      	ldr	r2, [pc, #40]	@ (8002ea0 <HAL_UART_MspInit+0x100>)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	2025      	movs	r0, #37	@ 0x25
 8002e80:	f000 fac9 	bl	8003416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e84:	2025      	movs	r0, #37	@ 0x25
 8002e86:	f000 fae2 	bl	800344e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002e8a:	bf00      	nop
 8002e8c:	3728      	adds	r7, #40	@ 0x28
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40011000 	.word	0x40011000
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	40020000 	.word	0x40020000
 8002ea0:	200004bc 	.word	0x200004bc
 8002ea4:	40026488 	.word	0x40026488

08002ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002eac:	bf00      	nop
 8002eae:	e7fd      	b.n	8002eac <NMI_Handler+0x4>

08002eb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eb4:	bf00      	nop
 8002eb6:	e7fd      	b.n	8002eb4 <HardFault_Handler+0x4>

08002eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ebc:	bf00      	nop
 8002ebe:	e7fd      	b.n	8002ebc <MemManage_Handler+0x4>

08002ec0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ec4:	bf00      	nop
 8002ec6:	e7fd      	b.n	8002ec4 <BusFault_Handler+0x4>

08002ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ecc:	bf00      	nop
 8002ece:	e7fd      	b.n	8002ecc <UsageFault_Handler+0x4>

08002ed0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ed4:	bf00      	nop
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ee2:	bf00      	nop
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ef0:	bf00      	nop
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002efe:	f000 f96b 	bl	80031d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f02:	bf00      	nop
 8002f04:	bd80      	pop	{r7, pc}
	...

08002f08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f0c:	4802      	ldr	r0, [pc, #8]	@ (8002f18 <USART1_IRQHandler+0x10>)
 8002f0e:	f001 fe01 	bl	8004b14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f12:	bf00      	nop
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20000474 	.word	0x20000474

08002f1c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002f20:	4802      	ldr	r0, [pc, #8]	@ (8002f2c <DMA2_Stream5_IRQHandler+0x10>)
 8002f22:	f000 fc47 	bl	80037b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8002f26:	bf00      	nop
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	200004bc 	.word	0x200004bc

08002f30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  return 1;
 8002f34:	2301      	movs	r3, #1
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <_kill>:

int _kill(int pid, int sig)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f4a:	f003 fc95 	bl	8006878 <__errno>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2216      	movs	r2, #22
 8002f52:	601a      	str	r2, [r3, #0]
  return -1;
 8002f54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <_exit>:

void _exit (int status)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f68:	f04f 31ff 	mov.w	r1, #4294967295
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7ff ffe7 	bl	8002f40 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f72:	bf00      	nop
 8002f74:	e7fd      	b.n	8002f72 <_exit+0x12>

08002f76 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b086      	sub	sp, #24
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f82:	2300      	movs	r3, #0
 8002f84:	617b      	str	r3, [r7, #20]
 8002f86:	e00a      	b.n	8002f9e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f88:	f3af 8000 	nop.w
 8002f8c:	4601      	mov	r1, r0
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	1c5a      	adds	r2, r3, #1
 8002f92:	60ba      	str	r2, [r7, #8]
 8002f94:	b2ca      	uxtb	r2, r1
 8002f96:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	dbf0      	blt.n	8002f88 <_read+0x12>
  }

  return len;
 8002fa6:	687b      	ldr	r3, [r7, #4]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	e009      	b.n	8002fd6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	60ba      	str	r2, [r7, #8]
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	617b      	str	r3, [r7, #20]
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	dbf1      	blt.n	8002fc2 <_write+0x12>
  }
  return len;
 8002fde:	687b      	ldr	r3, [r7, #4]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <_close>:

int _close(int file)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ff0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003010:	605a      	str	r2, [r3, #4]
  return 0;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <_isatty>:

int _isatty(int file)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003028:	2301      	movs	r3, #1
}
 800302a:	4618      	mov	r0, r3
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003036:	b480      	push	{r7}
 8003038:	b085      	sub	sp, #20
 800303a:	af00      	add	r7, sp, #0
 800303c:	60f8      	str	r0, [r7, #12]
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003058:	4a14      	ldr	r2, [pc, #80]	@ (80030ac <_sbrk+0x5c>)
 800305a:	4b15      	ldr	r3, [pc, #84]	@ (80030b0 <_sbrk+0x60>)
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003064:	4b13      	ldr	r3, [pc, #76]	@ (80030b4 <_sbrk+0x64>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d102      	bne.n	8003072 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800306c:	4b11      	ldr	r3, [pc, #68]	@ (80030b4 <_sbrk+0x64>)
 800306e:	4a12      	ldr	r2, [pc, #72]	@ (80030b8 <_sbrk+0x68>)
 8003070:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003072:	4b10      	ldr	r3, [pc, #64]	@ (80030b4 <_sbrk+0x64>)
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4413      	add	r3, r2
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	429a      	cmp	r2, r3
 800307e:	d207      	bcs.n	8003090 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003080:	f003 fbfa 	bl	8006878 <__errno>
 8003084:	4603      	mov	r3, r0
 8003086:	220c      	movs	r2, #12
 8003088:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800308a:	f04f 33ff 	mov.w	r3, #4294967295
 800308e:	e009      	b.n	80030a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003090:	4b08      	ldr	r3, [pc, #32]	@ (80030b4 <_sbrk+0x64>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003096:	4b07      	ldr	r3, [pc, #28]	@ (80030b4 <_sbrk+0x64>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4413      	add	r3, r2
 800309e:	4a05      	ldr	r2, [pc, #20]	@ (80030b4 <_sbrk+0x64>)
 80030a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030a2:	68fb      	ldr	r3, [r7, #12]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	20020000 	.word	0x20020000
 80030b0:	00000400 	.word	0x00000400
 80030b4:	20000a08 	.word	0x20000a08
 80030b8:	20000b60 	.word	0x20000b60

080030bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030c0:	4b06      	ldr	r3, [pc, #24]	@ (80030dc <SystemInit+0x20>)
 80030c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c6:	4a05      	ldr	r2, [pc, #20]	@ (80030dc <SystemInit+0x20>)
 80030c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80030cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030d0:	bf00      	nop
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	e000ed00 	.word	0xe000ed00

080030e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80030e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003118 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80030e4:	f7ff ffea 	bl	80030bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030e8:	480c      	ldr	r0, [pc, #48]	@ (800311c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80030ea:	490d      	ldr	r1, [pc, #52]	@ (8003120 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003124 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030f0:	e002      	b.n	80030f8 <LoopCopyDataInit>

080030f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030f6:	3304      	adds	r3, #4

080030f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030fc:	d3f9      	bcc.n	80030f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003128 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003100:	4c0a      	ldr	r4, [pc, #40]	@ (800312c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003104:	e001      	b.n	800310a <LoopFillZerobss>

08003106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003108:	3204      	adds	r2, #4

0800310a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800310a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800310c:	d3fb      	bcc.n	8003106 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800310e:	f003 fbb9 	bl	8006884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003112:	f7ff fceb 	bl	8002aec <main>
  bx  lr    
 8003116:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003118:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800311c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003120:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003124:	08009660 	.word	0x08009660
  ldr r2, =_sbss
 8003128:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800312c:	20000b5c 	.word	0x20000b5c

08003130 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003130:	e7fe      	b.n	8003130 <ADC_IRQHandler>
	...

08003134 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003138:	4b0e      	ldr	r3, [pc, #56]	@ (8003174 <HAL_Init+0x40>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a0d      	ldr	r2, [pc, #52]	@ (8003174 <HAL_Init+0x40>)
 800313e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003142:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003144:	4b0b      	ldr	r3, [pc, #44]	@ (8003174 <HAL_Init+0x40>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a0a      	ldr	r2, [pc, #40]	@ (8003174 <HAL_Init+0x40>)
 800314a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800314e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003150:	4b08      	ldr	r3, [pc, #32]	@ (8003174 <HAL_Init+0x40>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a07      	ldr	r2, [pc, #28]	@ (8003174 <HAL_Init+0x40>)
 8003156:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800315a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800315c:	2003      	movs	r0, #3
 800315e:	f000 f94f 	bl	8003400 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003162:	200f      	movs	r0, #15
 8003164:	f000 f808 	bl	8003178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003168:	f7ff fdf2 	bl	8002d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40023c00 	.word	0x40023c00

08003178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003180:	4b12      	ldr	r3, [pc, #72]	@ (80031cc <HAL_InitTick+0x54>)
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	4b12      	ldr	r3, [pc, #72]	@ (80031d0 <HAL_InitTick+0x58>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	4619      	mov	r1, r3
 800318a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800318e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003192:	fbb2 f3f3 	udiv	r3, r2, r3
 8003196:	4618      	mov	r0, r3
 8003198:	f000 f967 	bl	800346a <HAL_SYSTICK_Config>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e00e      	b.n	80031c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b0f      	cmp	r3, #15
 80031aa:	d80a      	bhi.n	80031c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031ac:	2200      	movs	r2, #0
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	f04f 30ff 	mov.w	r0, #4294967295
 80031b4:	f000 f92f 	bl	8003416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031b8:	4a06      	ldr	r2, [pc, #24]	@ (80031d4 <HAL_InitTick+0x5c>)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	e000      	b.n	80031c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	20000000 	.word	0x20000000
 80031d0:	20000008 	.word	0x20000008
 80031d4:	20000004 	.word	0x20000004

080031d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031dc:	4b06      	ldr	r3, [pc, #24]	@ (80031f8 <HAL_IncTick+0x20>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	461a      	mov	r2, r3
 80031e2:	4b06      	ldr	r3, [pc, #24]	@ (80031fc <HAL_IncTick+0x24>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4413      	add	r3, r2
 80031e8:	4a04      	ldr	r2, [pc, #16]	@ (80031fc <HAL_IncTick+0x24>)
 80031ea:	6013      	str	r3, [r2, #0]
}
 80031ec:	bf00      	nop
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	20000008 	.word	0x20000008
 80031fc:	20000a0c 	.word	0x20000a0c

08003200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  return uwTick;
 8003204:	4b03      	ldr	r3, [pc, #12]	@ (8003214 <HAL_GetTick+0x14>)
 8003206:	681b      	ldr	r3, [r3, #0]
}
 8003208:	4618      	mov	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	20000a0c 	.word	0x20000a0c

08003218 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003220:	f7ff ffee 	bl	8003200 <HAL_GetTick>
 8003224:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003230:	d005      	beq.n	800323e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003232:	4b0a      	ldr	r3, [pc, #40]	@ (800325c <HAL_Delay+0x44>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	461a      	mov	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4413      	add	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800323e:	bf00      	nop
 8003240:	f7ff ffde 	bl	8003200 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	429a      	cmp	r2, r3
 800324e:	d8f7      	bhi.n	8003240 <HAL_Delay+0x28>
  {
  }
}
 8003250:	bf00      	nop
 8003252:	bf00      	nop
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	20000008 	.word	0x20000008

08003260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003270:	4b0c      	ldr	r3, [pc, #48]	@ (80032a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800327c:	4013      	ands	r3, r2
 800327e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003288:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800328c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003292:	4a04      	ldr	r2, [pc, #16]	@ (80032a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	60d3      	str	r3, [r2, #12]
}
 8003298:	bf00      	nop
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	e000ed00 	.word	0xe000ed00

080032a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032ac:	4b04      	ldr	r3, [pc, #16]	@ (80032c0 <__NVIC_GetPriorityGrouping+0x18>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	0a1b      	lsrs	r3, r3, #8
 80032b2:	f003 0307 	and.w	r3, r3, #7
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	e000ed00 	.word	0xe000ed00

080032c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	db0b      	blt.n	80032ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032d6:	79fb      	ldrb	r3, [r7, #7]
 80032d8:	f003 021f 	and.w	r2, r3, #31
 80032dc:	4907      	ldr	r1, [pc, #28]	@ (80032fc <__NVIC_EnableIRQ+0x38>)
 80032de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e2:	095b      	lsrs	r3, r3, #5
 80032e4:	2001      	movs	r0, #1
 80032e6:	fa00 f202 	lsl.w	r2, r0, r2
 80032ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	e000e100 	.word	0xe000e100

08003300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	4603      	mov	r3, r0
 8003308:	6039      	str	r1, [r7, #0]
 800330a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800330c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003310:	2b00      	cmp	r3, #0
 8003312:	db0a      	blt.n	800332a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	b2da      	uxtb	r2, r3
 8003318:	490c      	ldr	r1, [pc, #48]	@ (800334c <__NVIC_SetPriority+0x4c>)
 800331a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331e:	0112      	lsls	r2, r2, #4
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	440b      	add	r3, r1
 8003324:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003328:	e00a      	b.n	8003340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	b2da      	uxtb	r2, r3
 800332e:	4908      	ldr	r1, [pc, #32]	@ (8003350 <__NVIC_SetPriority+0x50>)
 8003330:	79fb      	ldrb	r3, [r7, #7]
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	3b04      	subs	r3, #4
 8003338:	0112      	lsls	r2, r2, #4
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	440b      	add	r3, r1
 800333e:	761a      	strb	r2, [r3, #24]
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	e000e100 	.word	0xe000e100
 8003350:	e000ed00 	.word	0xe000ed00

08003354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003354:	b480      	push	{r7}
 8003356:	b089      	sub	sp, #36	@ 0x24
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f1c3 0307 	rsb	r3, r3, #7
 800336e:	2b04      	cmp	r3, #4
 8003370:	bf28      	it	cs
 8003372:	2304      	movcs	r3, #4
 8003374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	3304      	adds	r3, #4
 800337a:	2b06      	cmp	r3, #6
 800337c:	d902      	bls.n	8003384 <NVIC_EncodePriority+0x30>
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	3b03      	subs	r3, #3
 8003382:	e000      	b.n	8003386 <NVIC_EncodePriority+0x32>
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003388:	f04f 32ff 	mov.w	r2, #4294967295
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43da      	mvns	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	401a      	ands	r2, r3
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800339c:	f04f 31ff 	mov.w	r1, #4294967295
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	fa01 f303 	lsl.w	r3, r1, r3
 80033a6:	43d9      	mvns	r1, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033ac:	4313      	orrs	r3, r2
         );
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3724      	adds	r7, #36	@ 0x24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
	...

080033bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033cc:	d301      	bcc.n	80033d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033ce:	2301      	movs	r3, #1
 80033d0:	e00f      	b.n	80033f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033d2:	4a0a      	ldr	r2, [pc, #40]	@ (80033fc <SysTick_Config+0x40>)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033da:	210f      	movs	r1, #15
 80033dc:	f04f 30ff 	mov.w	r0, #4294967295
 80033e0:	f7ff ff8e 	bl	8003300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033e4:	4b05      	ldr	r3, [pc, #20]	@ (80033fc <SysTick_Config+0x40>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ea:	4b04      	ldr	r3, [pc, #16]	@ (80033fc <SysTick_Config+0x40>)
 80033ec:	2207      	movs	r2, #7
 80033ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	e000e010 	.word	0xe000e010

08003400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7ff ff29 	bl	8003260 <__NVIC_SetPriorityGrouping>
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003416:	b580      	push	{r7, lr}
 8003418:	b086      	sub	sp, #24
 800341a:	af00      	add	r7, sp, #0
 800341c:	4603      	mov	r3, r0
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	607a      	str	r2, [r7, #4]
 8003422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003428:	f7ff ff3e 	bl	80032a8 <__NVIC_GetPriorityGrouping>
 800342c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	68b9      	ldr	r1, [r7, #8]
 8003432:	6978      	ldr	r0, [r7, #20]
 8003434:	f7ff ff8e 	bl	8003354 <NVIC_EncodePriority>
 8003438:	4602      	mov	r2, r0
 800343a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800343e:	4611      	mov	r1, r2
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff ff5d 	bl	8003300 <__NVIC_SetPriority>
}
 8003446:	bf00      	nop
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b082      	sub	sp, #8
 8003452:	af00      	add	r7, sp, #0
 8003454:	4603      	mov	r3, r0
 8003456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff ff31 	bl	80032c4 <__NVIC_EnableIRQ>
}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b082      	sub	sp, #8
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7ff ffa2 	bl	80033bc <SysTick_Config>
 8003478:	4603      	mov	r3, r0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003490:	f7ff feb6 	bl	8003200 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e099      	b.n	80035d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0201 	bic.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034c0:	e00f      	b.n	80034e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034c2:	f7ff fe9d 	bl	8003200 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b05      	cmp	r3, #5
 80034ce:	d908      	bls.n	80034e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2220      	movs	r2, #32
 80034d4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2203      	movs	r2, #3
 80034da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e078      	b.n	80035d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1e8      	bne.n	80034c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	4b38      	ldr	r3, [pc, #224]	@ (80035dc <HAL_DMA_Init+0x158>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800350e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800351a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003526:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003538:	2b04      	cmp	r3, #4
 800353a:	d107      	bne.n	800354c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003544:	4313      	orrs	r3, r2
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	4313      	orrs	r3, r2
 800354a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f023 0307 	bic.w	r3, r3, #7
 8003562:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	4313      	orrs	r3, r2
 800356c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003572:	2b04      	cmp	r3, #4
 8003574:	d117      	bne.n	80035a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	4313      	orrs	r3, r2
 800357e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00e      	beq.n	80035a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 fb01 	bl	8003b90 <DMA_CheckFifoParam>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2240      	movs	r2, #64	@ 0x40
 8003598:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80035a2:	2301      	movs	r3, #1
 80035a4:	e016      	b.n	80035d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 fab8 	bl	8003b24 <DMA_CalcBaseAndBitshift>
 80035b4:	4603      	mov	r3, r0
 80035b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035bc:	223f      	movs	r2, #63	@ 0x3f
 80035be:	409a      	lsls	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	f010803f 	.word	0xf010803f

080035e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035ee:	2300      	movs	r3, #0
 80035f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d101      	bne.n	8003606 <HAL_DMA_Start_IT+0x26>
 8003602:	2302      	movs	r3, #2
 8003604:	e040      	b.n	8003688 <HAL_DMA_Start_IT+0xa8>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b01      	cmp	r3, #1
 8003618:	d12f      	bne.n	800367a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2202      	movs	r2, #2
 800361e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 fa4a 	bl	8003ac8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003638:	223f      	movs	r2, #63	@ 0x3f
 800363a:	409a      	lsls	r2, r3
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0216 	orr.w	r2, r2, #22
 800364e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003654:	2b00      	cmp	r3, #0
 8003656:	d007      	beq.n	8003668 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0208 	orr.w	r2, r2, #8
 8003666:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0201 	orr.w	r2, r2, #1
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	e005      	b.n	8003686 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003682:	2302      	movs	r3, #2
 8003684:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003686:	7dfb      	ldrb	r3, [r7, #23]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800369c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800369e:	f7ff fdaf 	bl	8003200 <HAL_GetTick>
 80036a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d008      	beq.n	80036c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2280      	movs	r2, #128	@ 0x80
 80036b4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e052      	b.n	8003768 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0216 	bic.w	r2, r2, #22
 80036d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	695a      	ldr	r2, [r3, #20]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d103      	bne.n	80036f2 <HAL_DMA_Abort+0x62>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d007      	beq.n	8003702 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0208 	bic.w	r2, r2, #8
 8003700:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0201 	bic.w	r2, r2, #1
 8003710:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003712:	e013      	b.n	800373c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003714:	f7ff fd74 	bl	8003200 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b05      	cmp	r3, #5
 8003720:	d90c      	bls.n	800373c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2220      	movs	r2, #32
 8003726:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2203      	movs	r2, #3
 800372c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e015      	b.n	8003768 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1e4      	bne.n	8003714 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800374e:	223f      	movs	r2, #63	@ 0x3f
 8003750:	409a      	lsls	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d004      	beq.n	800378e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2280      	movs	r2, #128	@ 0x80
 8003788:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e00c      	b.n	80037a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2205      	movs	r2, #5
 8003792:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0201 	bic.w	r2, r2, #1
 80037a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80037bc:	2300      	movs	r3, #0
 80037be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037c0:	4b8e      	ldr	r3, [pc, #568]	@ (80039fc <HAL_DMA_IRQHandler+0x248>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a8e      	ldr	r2, [pc, #568]	@ (8003a00 <HAL_DMA_IRQHandler+0x24c>)
 80037c6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ca:	0a9b      	lsrs	r3, r3, #10
 80037cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037de:	2208      	movs	r2, #8
 80037e0:	409a      	lsls	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4013      	ands	r3, r2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d01a      	beq.n	8003820 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d013      	beq.n	8003820 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0204 	bic.w	r2, r2, #4
 8003806:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800380c:	2208      	movs	r2, #8
 800380e:	409a      	lsls	r2, r3
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003818:	f043 0201 	orr.w	r2, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003824:	2201      	movs	r2, #1
 8003826:	409a      	lsls	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4013      	ands	r3, r2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d012      	beq.n	8003856 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00b      	beq.n	8003856 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003842:	2201      	movs	r2, #1
 8003844:	409a      	lsls	r2, r3
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800384e:	f043 0202 	orr.w	r2, r3, #2
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800385a:	2204      	movs	r2, #4
 800385c:	409a      	lsls	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4013      	ands	r3, r2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d012      	beq.n	800388c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00b      	beq.n	800388c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003878:	2204      	movs	r2, #4
 800387a:	409a      	lsls	r2, r3
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003884:	f043 0204 	orr.w	r2, r3, #4
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003890:	2210      	movs	r2, #16
 8003892:	409a      	lsls	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4013      	ands	r3, r2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d043      	beq.n	8003924 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d03c      	beq.n	8003924 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ae:	2210      	movs	r2, #16
 80038b0:	409a      	lsls	r2, r3
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d018      	beq.n	80038f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d108      	bne.n	80038e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d024      	beq.n	8003924 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	4798      	blx	r3
 80038e2:	e01f      	b.n	8003924 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d01b      	beq.n	8003924 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	4798      	blx	r3
 80038f4:	e016      	b.n	8003924 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003900:	2b00      	cmp	r3, #0
 8003902:	d107      	bne.n	8003914 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0208 	bic.w	r2, r2, #8
 8003912:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003928:	2220      	movs	r2, #32
 800392a:	409a      	lsls	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4013      	ands	r3, r2
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 808f 	beq.w	8003a54 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0310 	and.w	r3, r3, #16
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 8087 	beq.w	8003a54 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800394a:	2220      	movs	r2, #32
 800394c:	409a      	lsls	r2, r3
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b05      	cmp	r3, #5
 800395c:	d136      	bne.n	80039cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0216 	bic.w	r2, r2, #22
 800396c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	695a      	ldr	r2, [r3, #20]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800397c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003982:	2b00      	cmp	r3, #0
 8003984:	d103      	bne.n	800398e <HAL_DMA_IRQHandler+0x1da>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800398a:	2b00      	cmp	r3, #0
 800398c:	d007      	beq.n	800399e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0208 	bic.w	r2, r2, #8
 800399c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a2:	223f      	movs	r2, #63	@ 0x3f
 80039a4:	409a      	lsls	r2, r3
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d07e      	beq.n	8003ac0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	4798      	blx	r3
        }
        return;
 80039ca:	e079      	b.n	8003ac0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d01d      	beq.n	8003a16 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10d      	bne.n	8003a04 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d031      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	4798      	blx	r3
 80039f8:	e02c      	b.n	8003a54 <HAL_DMA_IRQHandler+0x2a0>
 80039fa:	bf00      	nop
 80039fc:	20000000 	.word	0x20000000
 8003a00:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d023      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	4798      	blx	r3
 8003a14:	e01e      	b.n	8003a54 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10f      	bne.n	8003a44 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 0210 	bic.w	r2, r2, #16
 8003a32:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d032      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d022      	beq.n	8003aae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2205      	movs	r2, #5
 8003a6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0201 	bic.w	r2, r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	3301      	adds	r3, #1
 8003a84:	60bb      	str	r3, [r7, #8]
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d307      	bcc.n	8003a9c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1f2      	bne.n	8003a80 <HAL_DMA_IRQHandler+0x2cc>
 8003a9a:	e000      	b.n	8003a9e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003a9c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d005      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	4798      	blx	r3
 8003abe:	e000      	b.n	8003ac2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ac0:	bf00      	nop
    }
  }
}
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
 8003ad4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003ae4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	2b40      	cmp	r3, #64	@ 0x40
 8003af4:	d108      	bne.n	8003b08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b06:	e007      	b.n	8003b18 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	60da      	str	r2, [r3, #12]
}
 8003b18:	bf00      	nop
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	3b10      	subs	r3, #16
 8003b34:	4a14      	ldr	r2, [pc, #80]	@ (8003b88 <DMA_CalcBaseAndBitshift+0x64>)
 8003b36:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3a:	091b      	lsrs	r3, r3, #4
 8003b3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b3e:	4a13      	ldr	r2, [pc, #76]	@ (8003b8c <DMA_CalcBaseAndBitshift+0x68>)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4413      	add	r3, r2
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	461a      	mov	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2b03      	cmp	r3, #3
 8003b50:	d909      	bls.n	8003b66 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003b5a:	f023 0303 	bic.w	r3, r3, #3
 8003b5e:	1d1a      	adds	r2, r3, #4
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b64:	e007      	b.n	8003b76 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003b6e:	f023 0303 	bic.w	r3, r3, #3
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	aaaaaaab 	.word	0xaaaaaaab
 8003b8c:	080092d8 	.word	0x080092d8

08003b90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d11f      	bne.n	8003bea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2b03      	cmp	r3, #3
 8003bae:	d856      	bhi.n	8003c5e <DMA_CheckFifoParam+0xce>
 8003bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8003bb8 <DMA_CheckFifoParam+0x28>)
 8003bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb6:	bf00      	nop
 8003bb8:	08003bc9 	.word	0x08003bc9
 8003bbc:	08003bdb 	.word	0x08003bdb
 8003bc0:	08003bc9 	.word	0x08003bc9
 8003bc4:	08003c5f 	.word	0x08003c5f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bcc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d046      	beq.n	8003c62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bd8:	e043      	b.n	8003c62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bde:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003be2:	d140      	bne.n	8003c66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003be8:	e03d      	b.n	8003c66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bf2:	d121      	bne.n	8003c38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	2b03      	cmp	r3, #3
 8003bf8:	d837      	bhi.n	8003c6a <DMA_CheckFifoParam+0xda>
 8003bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8003c00 <DMA_CheckFifoParam+0x70>)
 8003bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c00:	08003c11 	.word	0x08003c11
 8003c04:	08003c17 	.word	0x08003c17
 8003c08:	08003c11 	.word	0x08003c11
 8003c0c:	08003c29 	.word	0x08003c29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	73fb      	strb	r3, [r7, #15]
      break;
 8003c14:	e030      	b.n	8003c78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d025      	beq.n	8003c6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c26:	e022      	b.n	8003c6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c30:	d11f      	bne.n	8003c72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c36:	e01c      	b.n	8003c72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d903      	bls.n	8003c46 <DMA_CheckFifoParam+0xb6>
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2b03      	cmp	r3, #3
 8003c42:	d003      	beq.n	8003c4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c44:	e018      	b.n	8003c78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	73fb      	strb	r3, [r7, #15]
      break;
 8003c4a:	e015      	b.n	8003c78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00e      	beq.n	8003c76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c5c:	e00b      	b.n	8003c76 <DMA_CheckFifoParam+0xe6>
      break;
 8003c5e:	bf00      	nop
 8003c60:	e00a      	b.n	8003c78 <DMA_CheckFifoParam+0xe8>
      break;
 8003c62:	bf00      	nop
 8003c64:	e008      	b.n	8003c78 <DMA_CheckFifoParam+0xe8>
      break;
 8003c66:	bf00      	nop
 8003c68:	e006      	b.n	8003c78 <DMA_CheckFifoParam+0xe8>
      break;
 8003c6a:	bf00      	nop
 8003c6c:	e004      	b.n	8003c78 <DMA_CheckFifoParam+0xe8>
      break;
 8003c6e:	bf00      	nop
 8003c70:	e002      	b.n	8003c78 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c72:	bf00      	nop
 8003c74:	e000      	b.n	8003c78 <DMA_CheckFifoParam+0xe8>
      break;
 8003c76:	bf00      	nop
    }
  } 
  
  return status; 
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop

08003c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b089      	sub	sp, #36	@ 0x24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	61fb      	str	r3, [r7, #28]
 8003ca2:	e16b      	b.n	8003f7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	f040 815a 	bne.w	8003f76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f003 0303 	and.w	r3, r3, #3
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d005      	beq.n	8003cda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d130      	bne.n	8003d3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	2203      	movs	r2, #3
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	43db      	mvns	r3, r3
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d10:	2201      	movs	r2, #1
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	43db      	mvns	r3, r3
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	091b      	lsrs	r3, r3, #4
 8003d26:	f003 0201 	and.w	r2, r3, #1
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f003 0303 	and.w	r3, r3, #3
 8003d44:	2b03      	cmp	r3, #3
 8003d46:	d017      	beq.n	8003d78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	2203      	movs	r2, #3
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d123      	bne.n	8003dcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	08da      	lsrs	r2, r3, #3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3208      	adds	r2, #8
 8003d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	220f      	movs	r2, #15
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	43db      	mvns	r3, r3
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4013      	ands	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	08da      	lsrs	r2, r3, #3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3208      	adds	r2, #8
 8003dc6:	69b9      	ldr	r1, [r7, #24]
 8003dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	2203      	movs	r2, #3
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	4013      	ands	r3, r2
 8003de2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f003 0203 	and.w	r2, r3, #3
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 80b4 	beq.w	8003f76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	4b60      	ldr	r3, [pc, #384]	@ (8003f94 <HAL_GPIO_Init+0x30c>)
 8003e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e16:	4a5f      	ldr	r2, [pc, #380]	@ (8003f94 <HAL_GPIO_Init+0x30c>)
 8003e18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e1e:	4b5d      	ldr	r3, [pc, #372]	@ (8003f94 <HAL_GPIO_Init+0x30c>)
 8003e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e2a:	4a5b      	ldr	r2, [pc, #364]	@ (8003f98 <HAL_GPIO_Init+0x310>)
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	089b      	lsrs	r3, r3, #2
 8003e30:	3302      	adds	r3, #2
 8003e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	220f      	movs	r2, #15
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	43db      	mvns	r3, r3
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a52      	ldr	r2, [pc, #328]	@ (8003f9c <HAL_GPIO_Init+0x314>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d02b      	beq.n	8003eae <HAL_GPIO_Init+0x226>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a51      	ldr	r2, [pc, #324]	@ (8003fa0 <HAL_GPIO_Init+0x318>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d025      	beq.n	8003eaa <HAL_GPIO_Init+0x222>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a50      	ldr	r2, [pc, #320]	@ (8003fa4 <HAL_GPIO_Init+0x31c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d01f      	beq.n	8003ea6 <HAL_GPIO_Init+0x21e>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a4f      	ldr	r2, [pc, #316]	@ (8003fa8 <HAL_GPIO_Init+0x320>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d019      	beq.n	8003ea2 <HAL_GPIO_Init+0x21a>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a4e      	ldr	r2, [pc, #312]	@ (8003fac <HAL_GPIO_Init+0x324>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d013      	beq.n	8003e9e <HAL_GPIO_Init+0x216>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a4d      	ldr	r2, [pc, #308]	@ (8003fb0 <HAL_GPIO_Init+0x328>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d00d      	beq.n	8003e9a <HAL_GPIO_Init+0x212>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a4c      	ldr	r2, [pc, #304]	@ (8003fb4 <HAL_GPIO_Init+0x32c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d007      	beq.n	8003e96 <HAL_GPIO_Init+0x20e>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a4b      	ldr	r2, [pc, #300]	@ (8003fb8 <HAL_GPIO_Init+0x330>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d101      	bne.n	8003e92 <HAL_GPIO_Init+0x20a>
 8003e8e:	2307      	movs	r3, #7
 8003e90:	e00e      	b.n	8003eb0 <HAL_GPIO_Init+0x228>
 8003e92:	2308      	movs	r3, #8
 8003e94:	e00c      	b.n	8003eb0 <HAL_GPIO_Init+0x228>
 8003e96:	2306      	movs	r3, #6
 8003e98:	e00a      	b.n	8003eb0 <HAL_GPIO_Init+0x228>
 8003e9a:	2305      	movs	r3, #5
 8003e9c:	e008      	b.n	8003eb0 <HAL_GPIO_Init+0x228>
 8003e9e:	2304      	movs	r3, #4
 8003ea0:	e006      	b.n	8003eb0 <HAL_GPIO_Init+0x228>
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e004      	b.n	8003eb0 <HAL_GPIO_Init+0x228>
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	e002      	b.n	8003eb0 <HAL_GPIO_Init+0x228>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e000      	b.n	8003eb0 <HAL_GPIO_Init+0x228>
 8003eae:	2300      	movs	r3, #0
 8003eb0:	69fa      	ldr	r2, [r7, #28]
 8003eb2:	f002 0203 	and.w	r2, r2, #3
 8003eb6:	0092      	lsls	r2, r2, #2
 8003eb8:	4093      	lsls	r3, r2
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ec0:	4935      	ldr	r1, [pc, #212]	@ (8003f98 <HAL_GPIO_Init+0x310>)
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	089b      	lsrs	r3, r3, #2
 8003ec6:	3302      	adds	r3, #2
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ece:	4b3b      	ldr	r3, [pc, #236]	@ (8003fbc <HAL_GPIO_Init+0x334>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	43db      	mvns	r3, r3
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	4013      	ands	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ef2:	4a32      	ldr	r2, [pc, #200]	@ (8003fbc <HAL_GPIO_Init+0x334>)
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ef8:	4b30      	ldr	r3, [pc, #192]	@ (8003fbc <HAL_GPIO_Init+0x334>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	43db      	mvns	r3, r3
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	4013      	ands	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f1c:	4a27      	ldr	r2, [pc, #156]	@ (8003fbc <HAL_GPIO_Init+0x334>)
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f22:	4b26      	ldr	r3, [pc, #152]	@ (8003fbc <HAL_GPIO_Init+0x334>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f46:	4a1d      	ldr	r2, [pc, #116]	@ (8003fbc <HAL_GPIO_Init+0x334>)
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8003fbc <HAL_GPIO_Init+0x334>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	43db      	mvns	r3, r3
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f70:	4a12      	ldr	r2, [pc, #72]	@ (8003fbc <HAL_GPIO_Init+0x334>)
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	61fb      	str	r3, [r7, #28]
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	2b0f      	cmp	r3, #15
 8003f80:	f67f ae90 	bls.w	8003ca4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f84:	bf00      	nop
 8003f86:	bf00      	nop
 8003f88:	3724      	adds	r7, #36	@ 0x24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	40023800 	.word	0x40023800
 8003f98:	40013800 	.word	0x40013800
 8003f9c:	40020000 	.word	0x40020000
 8003fa0:	40020400 	.word	0x40020400
 8003fa4:	40020800 	.word	0x40020800
 8003fa8:	40020c00 	.word	0x40020c00
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	40021400 	.word	0x40021400
 8003fb4:	40021800 	.word	0x40021800
 8003fb8:	40021c00 	.word	0x40021c00
 8003fbc:	40013c00 	.word	0x40013c00

08003fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	807b      	strh	r3, [r7, #2]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fd0:	787b      	ldrb	r3, [r7, #1]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d003      	beq.n	8003fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fd6:	887a      	ldrh	r2, [r7, #2]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fdc:	e003      	b.n	8003fe6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003fde:	887b      	ldrh	r3, [r7, #2]
 8003fe0:	041a      	lsls	r2, r3, #16
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	619a      	str	r2, [r3, #24]
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
	...

08003ff4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e267      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d075      	beq.n	80040fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004012:	4b88      	ldr	r3, [pc, #544]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 030c 	and.w	r3, r3, #12
 800401a:	2b04      	cmp	r3, #4
 800401c:	d00c      	beq.n	8004038 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800401e:	4b85      	ldr	r3, [pc, #532]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004026:	2b08      	cmp	r3, #8
 8004028:	d112      	bne.n	8004050 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800402a:	4b82      	ldr	r3, [pc, #520]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004032:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004036:	d10b      	bne.n	8004050 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004038:	4b7e      	ldr	r3, [pc, #504]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d05b      	beq.n	80040fc <HAL_RCC_OscConfig+0x108>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d157      	bne.n	80040fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e242      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004058:	d106      	bne.n	8004068 <HAL_RCC_OscConfig+0x74>
 800405a:	4b76      	ldr	r3, [pc, #472]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a75      	ldr	r2, [pc, #468]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 8004060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	e01d      	b.n	80040a4 <HAL_RCC_OscConfig+0xb0>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004070:	d10c      	bne.n	800408c <HAL_RCC_OscConfig+0x98>
 8004072:	4b70      	ldr	r3, [pc, #448]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a6f      	ldr	r2, [pc, #444]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 8004078:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	4b6d      	ldr	r3, [pc, #436]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a6c      	ldr	r2, [pc, #432]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 8004084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	e00b      	b.n	80040a4 <HAL_RCC_OscConfig+0xb0>
 800408c:	4b69      	ldr	r3, [pc, #420]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a68      	ldr	r2, [pc, #416]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 8004092:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004096:	6013      	str	r3, [r2, #0]
 8004098:	4b66      	ldr	r3, [pc, #408]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a65      	ldr	r2, [pc, #404]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 800409e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d013      	beq.n	80040d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ac:	f7ff f8a8 	bl	8003200 <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040b4:	f7ff f8a4 	bl	8003200 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b64      	cmp	r3, #100	@ 0x64
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e207      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040c6:	4b5b      	ldr	r3, [pc, #364]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0f0      	beq.n	80040b4 <HAL_RCC_OscConfig+0xc0>
 80040d2:	e014      	b.n	80040fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d4:	f7ff f894 	bl	8003200 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040dc:	f7ff f890 	bl	8003200 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b64      	cmp	r3, #100	@ 0x64
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e1f3      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ee:	4b51      	ldr	r3, [pc, #324]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1f0      	bne.n	80040dc <HAL_RCC_OscConfig+0xe8>
 80040fa:	e000      	b.n	80040fe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d063      	beq.n	80041d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800410a:	4b4a      	ldr	r3, [pc, #296]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 030c 	and.w	r3, r3, #12
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00b      	beq.n	800412e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004116:	4b47      	ldr	r3, [pc, #284]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800411e:	2b08      	cmp	r3, #8
 8004120:	d11c      	bne.n	800415c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004122:	4b44      	ldr	r3, [pc, #272]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d116      	bne.n	800415c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800412e:	4b41      	ldr	r3, [pc, #260]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d005      	beq.n	8004146 <HAL_RCC_OscConfig+0x152>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d001      	beq.n	8004146 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e1c7      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004146:	4b3b      	ldr	r3, [pc, #236]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	4937      	ldr	r1, [pc, #220]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 8004156:	4313      	orrs	r3, r2
 8004158:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800415a:	e03a      	b.n	80041d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d020      	beq.n	80041a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004164:	4b34      	ldr	r3, [pc, #208]	@ (8004238 <HAL_RCC_OscConfig+0x244>)
 8004166:	2201      	movs	r2, #1
 8004168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416a:	f7ff f849 	bl	8003200 <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004170:	e008      	b.n	8004184 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004172:	f7ff f845 	bl	8003200 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e1a8      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004184:	4b2b      	ldr	r3, [pc, #172]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d0f0      	beq.n	8004172 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004190:	4b28      	ldr	r3, [pc, #160]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	4925      	ldr	r1, [pc, #148]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	600b      	str	r3, [r1, #0]
 80041a4:	e015      	b.n	80041d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041a6:	4b24      	ldr	r3, [pc, #144]	@ (8004238 <HAL_RCC_OscConfig+0x244>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ac:	f7ff f828 	bl	8003200 <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041b4:	f7ff f824 	bl	8003200 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e187      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041c6:	4b1b      	ldr	r3, [pc, #108]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1f0      	bne.n	80041b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0308 	and.w	r3, r3, #8
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d036      	beq.n	800424c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d016      	beq.n	8004214 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041e6:	4b15      	ldr	r3, [pc, #84]	@ (800423c <HAL_RCC_OscConfig+0x248>)
 80041e8:	2201      	movs	r2, #1
 80041ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ec:	f7ff f808 	bl	8003200 <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041f4:	f7ff f804 	bl	8003200 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e167      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004206:	4b0b      	ldr	r3, [pc, #44]	@ (8004234 <HAL_RCC_OscConfig+0x240>)
 8004208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0f0      	beq.n	80041f4 <HAL_RCC_OscConfig+0x200>
 8004212:	e01b      	b.n	800424c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004214:	4b09      	ldr	r3, [pc, #36]	@ (800423c <HAL_RCC_OscConfig+0x248>)
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800421a:	f7fe fff1 	bl	8003200 <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004220:	e00e      	b.n	8004240 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004222:	f7fe ffed 	bl	8003200 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d907      	bls.n	8004240 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e150      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
 8004234:	40023800 	.word	0x40023800
 8004238:	42470000 	.word	0x42470000
 800423c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004240:	4b88      	ldr	r3, [pc, #544]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 8004242:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1ea      	bne.n	8004222 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 8097 	beq.w	8004388 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800425a:	2300      	movs	r3, #0
 800425c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800425e:	4b81      	ldr	r3, [pc, #516]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 8004260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10f      	bne.n	800428a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800426a:	2300      	movs	r3, #0
 800426c:	60bb      	str	r3, [r7, #8]
 800426e:	4b7d      	ldr	r3, [pc, #500]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 8004270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004272:	4a7c      	ldr	r2, [pc, #496]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 8004274:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004278:	6413      	str	r3, [r2, #64]	@ 0x40
 800427a:	4b7a      	ldr	r3, [pc, #488]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 800427c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004282:	60bb      	str	r3, [r7, #8]
 8004284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004286:	2301      	movs	r3, #1
 8004288:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800428a:	4b77      	ldr	r3, [pc, #476]	@ (8004468 <HAL_RCC_OscConfig+0x474>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004292:	2b00      	cmp	r3, #0
 8004294:	d118      	bne.n	80042c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004296:	4b74      	ldr	r3, [pc, #464]	@ (8004468 <HAL_RCC_OscConfig+0x474>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a73      	ldr	r2, [pc, #460]	@ (8004468 <HAL_RCC_OscConfig+0x474>)
 800429c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042a2:	f7fe ffad 	bl	8003200 <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042aa:	f7fe ffa9 	bl	8003200 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e10c      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042bc:	4b6a      	ldr	r3, [pc, #424]	@ (8004468 <HAL_RCC_OscConfig+0x474>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0f0      	beq.n	80042aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d106      	bne.n	80042de <HAL_RCC_OscConfig+0x2ea>
 80042d0:	4b64      	ldr	r3, [pc, #400]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 80042d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d4:	4a63      	ldr	r2, [pc, #396]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 80042d6:	f043 0301 	orr.w	r3, r3, #1
 80042da:	6713      	str	r3, [r2, #112]	@ 0x70
 80042dc:	e01c      	b.n	8004318 <HAL_RCC_OscConfig+0x324>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	2b05      	cmp	r3, #5
 80042e4:	d10c      	bne.n	8004300 <HAL_RCC_OscConfig+0x30c>
 80042e6:	4b5f      	ldr	r3, [pc, #380]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 80042e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ea:	4a5e      	ldr	r2, [pc, #376]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 80042ec:	f043 0304 	orr.w	r3, r3, #4
 80042f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80042f2:	4b5c      	ldr	r3, [pc, #368]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 80042f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f6:	4a5b      	ldr	r2, [pc, #364]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80042fe:	e00b      	b.n	8004318 <HAL_RCC_OscConfig+0x324>
 8004300:	4b58      	ldr	r3, [pc, #352]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 8004302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004304:	4a57      	ldr	r2, [pc, #348]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 8004306:	f023 0301 	bic.w	r3, r3, #1
 800430a:	6713      	str	r3, [r2, #112]	@ 0x70
 800430c:	4b55      	ldr	r3, [pc, #340]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 800430e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004310:	4a54      	ldr	r2, [pc, #336]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 8004312:	f023 0304 	bic.w	r3, r3, #4
 8004316:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d015      	beq.n	800434c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004320:	f7fe ff6e 	bl	8003200 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004326:	e00a      	b.n	800433e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004328:	f7fe ff6a 	bl	8003200 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004336:	4293      	cmp	r3, r2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e0cb      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800433e:	4b49      	ldr	r3, [pc, #292]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 8004340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0ee      	beq.n	8004328 <HAL_RCC_OscConfig+0x334>
 800434a:	e014      	b.n	8004376 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800434c:	f7fe ff58 	bl	8003200 <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004352:	e00a      	b.n	800436a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004354:	f7fe ff54 	bl	8003200 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004362:	4293      	cmp	r3, r2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e0b5      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800436a:	4b3e      	ldr	r3, [pc, #248]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 800436c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1ee      	bne.n	8004354 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004376:	7dfb      	ldrb	r3, [r7, #23]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d105      	bne.n	8004388 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800437c:	4b39      	ldr	r3, [pc, #228]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 800437e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004380:	4a38      	ldr	r2, [pc, #224]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 8004382:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004386:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 80a1 	beq.w	80044d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004392:	4b34      	ldr	r3, [pc, #208]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 030c 	and.w	r3, r3, #12
 800439a:	2b08      	cmp	r3, #8
 800439c:	d05c      	beq.n	8004458 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d141      	bne.n	800442a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043a6:	4b31      	ldr	r3, [pc, #196]	@ (800446c <HAL_RCC_OscConfig+0x478>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ac:	f7fe ff28 	bl	8003200 <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b4:	f7fe ff24 	bl	8003200 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e087      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c6:	4b27      	ldr	r3, [pc, #156]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1f0      	bne.n	80043b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	69da      	ldr	r2, [r3, #28]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e0:	019b      	lsls	r3, r3, #6
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e8:	085b      	lsrs	r3, r3, #1
 80043ea:	3b01      	subs	r3, #1
 80043ec:	041b      	lsls	r3, r3, #16
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f4:	061b      	lsls	r3, r3, #24
 80043f6:	491b      	ldr	r1, [pc, #108]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043fc:	4b1b      	ldr	r3, [pc, #108]	@ (800446c <HAL_RCC_OscConfig+0x478>)
 80043fe:	2201      	movs	r2, #1
 8004400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004402:	f7fe fefd 	bl	8003200 <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004408:	e008      	b.n	800441c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800440a:	f7fe fef9 	bl	8003200 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e05c      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800441c:	4b11      	ldr	r3, [pc, #68]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0f0      	beq.n	800440a <HAL_RCC_OscConfig+0x416>
 8004428:	e054      	b.n	80044d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800442a:	4b10      	ldr	r3, [pc, #64]	@ (800446c <HAL_RCC_OscConfig+0x478>)
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004430:	f7fe fee6 	bl	8003200 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004438:	f7fe fee2 	bl	8003200 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e045      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800444a:	4b06      	ldr	r3, [pc, #24]	@ (8004464 <HAL_RCC_OscConfig+0x470>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1f0      	bne.n	8004438 <HAL_RCC_OscConfig+0x444>
 8004456:	e03d      	b.n	80044d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d107      	bne.n	8004470 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e038      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
 8004464:	40023800 	.word	0x40023800
 8004468:	40007000 	.word	0x40007000
 800446c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004470:	4b1b      	ldr	r3, [pc, #108]	@ (80044e0 <HAL_RCC_OscConfig+0x4ec>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d028      	beq.n	80044d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004488:	429a      	cmp	r2, r3
 800448a:	d121      	bne.n	80044d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004496:	429a      	cmp	r2, r3
 8004498:	d11a      	bne.n	80044d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80044a0:	4013      	ands	r3, r2
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80044a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d111      	bne.n	80044d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b6:	085b      	lsrs	r3, r3, #1
 80044b8:	3b01      	subs	r3, #1
 80044ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044bc:	429a      	cmp	r2, r3
 80044be:	d107      	bne.n	80044d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d001      	beq.n	80044d4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e000      	b.n	80044d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40023800 	.word	0x40023800

080044e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e0cc      	b.n	8004692 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044f8:	4b68      	ldr	r3, [pc, #416]	@ (800469c <HAL_RCC_ClockConfig+0x1b8>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	429a      	cmp	r2, r3
 8004504:	d90c      	bls.n	8004520 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004506:	4b65      	ldr	r3, [pc, #404]	@ (800469c <HAL_RCC_ClockConfig+0x1b8>)
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	b2d2      	uxtb	r2, r2
 800450c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800450e:	4b63      	ldr	r3, [pc, #396]	@ (800469c <HAL_RCC_ClockConfig+0x1b8>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	429a      	cmp	r2, r3
 800451a:	d001      	beq.n	8004520 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e0b8      	b.n	8004692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d020      	beq.n	800456e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	d005      	beq.n	8004544 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004538:	4b59      	ldr	r3, [pc, #356]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	4a58      	ldr	r2, [pc, #352]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 800453e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004542:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0308 	and.w	r3, r3, #8
 800454c:	2b00      	cmp	r3, #0
 800454e:	d005      	beq.n	800455c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004550:	4b53      	ldr	r3, [pc, #332]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	4a52      	ldr	r2, [pc, #328]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004556:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800455a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800455c:	4b50      	ldr	r3, [pc, #320]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	494d      	ldr	r1, [pc, #308]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 800456a:	4313      	orrs	r3, r2
 800456c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d044      	beq.n	8004604 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d107      	bne.n	8004592 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004582:	4b47      	ldr	r3, [pc, #284]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d119      	bne.n	80045c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e07f      	b.n	8004692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2b02      	cmp	r3, #2
 8004598:	d003      	beq.n	80045a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d107      	bne.n	80045b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045a2:	4b3f      	ldr	r3, [pc, #252]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d109      	bne.n	80045c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e06f      	b.n	8004692 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b2:	4b3b      	ldr	r3, [pc, #236]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e067      	b.n	8004692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045c2:	4b37      	ldr	r3, [pc, #220]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f023 0203 	bic.w	r2, r3, #3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	4934      	ldr	r1, [pc, #208]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045d4:	f7fe fe14 	bl	8003200 <HAL_GetTick>
 80045d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045da:	e00a      	b.n	80045f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045dc:	f7fe fe10 	bl	8003200 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e04f      	b.n	8004692 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f2:	4b2b      	ldr	r3, [pc, #172]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 020c 	and.w	r2, r3, #12
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	429a      	cmp	r2, r3
 8004602:	d1eb      	bne.n	80045dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004604:	4b25      	ldr	r3, [pc, #148]	@ (800469c <HAL_RCC_ClockConfig+0x1b8>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d20c      	bcs.n	800462c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004612:	4b22      	ldr	r3, [pc, #136]	@ (800469c <HAL_RCC_ClockConfig+0x1b8>)
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	b2d2      	uxtb	r2, r2
 8004618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800461a:	4b20      	ldr	r3, [pc, #128]	@ (800469c <HAL_RCC_ClockConfig+0x1b8>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	429a      	cmp	r2, r3
 8004626:	d001      	beq.n	800462c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e032      	b.n	8004692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b00      	cmp	r3, #0
 8004636:	d008      	beq.n	800464a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004638:	4b19      	ldr	r3, [pc, #100]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	4916      	ldr	r1, [pc, #88]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004646:	4313      	orrs	r3, r2
 8004648:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b00      	cmp	r3, #0
 8004654:	d009      	beq.n	800466a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004656:	4b12      	ldr	r3, [pc, #72]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	490e      	ldr	r1, [pc, #56]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004666:	4313      	orrs	r3, r2
 8004668:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800466a:	f000 f821 	bl	80046b0 <HAL_RCC_GetSysClockFreq>
 800466e:	4602      	mov	r2, r0
 8004670:	4b0b      	ldr	r3, [pc, #44]	@ (80046a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	091b      	lsrs	r3, r3, #4
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	490a      	ldr	r1, [pc, #40]	@ (80046a4 <HAL_RCC_ClockConfig+0x1c0>)
 800467c:	5ccb      	ldrb	r3, [r1, r3]
 800467e:	fa22 f303 	lsr.w	r3, r2, r3
 8004682:	4a09      	ldr	r2, [pc, #36]	@ (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004686:	4b09      	ldr	r3, [pc, #36]	@ (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4618      	mov	r0, r3
 800468c:	f7fe fd74 	bl	8003178 <HAL_InitTick>

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	40023c00 	.word	0x40023c00
 80046a0:	40023800 	.word	0x40023800
 80046a4:	080092c0 	.word	0x080092c0
 80046a8:	20000000 	.word	0x20000000
 80046ac:	20000004 	.word	0x20000004

080046b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046b4:	b090      	sub	sp, #64	@ 0x40
 80046b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046c8:	4b59      	ldr	r3, [pc, #356]	@ (8004830 <HAL_RCC_GetSysClockFreq+0x180>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f003 030c 	and.w	r3, r3, #12
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d00d      	beq.n	80046f0 <HAL_RCC_GetSysClockFreq+0x40>
 80046d4:	2b08      	cmp	r3, #8
 80046d6:	f200 80a1 	bhi.w	800481c <HAL_RCC_GetSysClockFreq+0x16c>
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <HAL_RCC_GetSysClockFreq+0x34>
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d003      	beq.n	80046ea <HAL_RCC_GetSysClockFreq+0x3a>
 80046e2:	e09b      	b.n	800481c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046e4:	4b53      	ldr	r3, [pc, #332]	@ (8004834 <HAL_RCC_GetSysClockFreq+0x184>)
 80046e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046e8:	e09b      	b.n	8004822 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046ea:	4b53      	ldr	r3, [pc, #332]	@ (8004838 <HAL_RCC_GetSysClockFreq+0x188>)
 80046ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046ee:	e098      	b.n	8004822 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046f0:	4b4f      	ldr	r3, [pc, #316]	@ (8004830 <HAL_RCC_GetSysClockFreq+0x180>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046f8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046fa:	4b4d      	ldr	r3, [pc, #308]	@ (8004830 <HAL_RCC_GetSysClockFreq+0x180>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d028      	beq.n	8004758 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004706:	4b4a      	ldr	r3, [pc, #296]	@ (8004830 <HAL_RCC_GetSysClockFreq+0x180>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	099b      	lsrs	r3, r3, #6
 800470c:	2200      	movs	r2, #0
 800470e:	623b      	str	r3, [r7, #32]
 8004710:	627a      	str	r2, [r7, #36]	@ 0x24
 8004712:	6a3b      	ldr	r3, [r7, #32]
 8004714:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004718:	2100      	movs	r1, #0
 800471a:	4b47      	ldr	r3, [pc, #284]	@ (8004838 <HAL_RCC_GetSysClockFreq+0x188>)
 800471c:	fb03 f201 	mul.w	r2, r3, r1
 8004720:	2300      	movs	r3, #0
 8004722:	fb00 f303 	mul.w	r3, r0, r3
 8004726:	4413      	add	r3, r2
 8004728:	4a43      	ldr	r2, [pc, #268]	@ (8004838 <HAL_RCC_GetSysClockFreq+0x188>)
 800472a:	fba0 1202 	umull	r1, r2, r0, r2
 800472e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004730:	460a      	mov	r2, r1
 8004732:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004734:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004736:	4413      	add	r3, r2
 8004738:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800473a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800473c:	2200      	movs	r2, #0
 800473e:	61bb      	str	r3, [r7, #24]
 8004740:	61fa      	str	r2, [r7, #28]
 8004742:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004746:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800474a:	f7fc fa7d 	bl	8000c48 <__aeabi_uldivmod>
 800474e:	4602      	mov	r2, r0
 8004750:	460b      	mov	r3, r1
 8004752:	4613      	mov	r3, r2
 8004754:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004756:	e053      	b.n	8004800 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004758:	4b35      	ldr	r3, [pc, #212]	@ (8004830 <HAL_RCC_GetSysClockFreq+0x180>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	099b      	lsrs	r3, r3, #6
 800475e:	2200      	movs	r2, #0
 8004760:	613b      	str	r3, [r7, #16]
 8004762:	617a      	str	r2, [r7, #20]
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800476a:	f04f 0b00 	mov.w	fp, #0
 800476e:	4652      	mov	r2, sl
 8004770:	465b      	mov	r3, fp
 8004772:	f04f 0000 	mov.w	r0, #0
 8004776:	f04f 0100 	mov.w	r1, #0
 800477a:	0159      	lsls	r1, r3, #5
 800477c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004780:	0150      	lsls	r0, r2, #5
 8004782:	4602      	mov	r2, r0
 8004784:	460b      	mov	r3, r1
 8004786:	ebb2 080a 	subs.w	r8, r2, sl
 800478a:	eb63 090b 	sbc.w	r9, r3, fp
 800478e:	f04f 0200 	mov.w	r2, #0
 8004792:	f04f 0300 	mov.w	r3, #0
 8004796:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800479a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800479e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80047a2:	ebb2 0408 	subs.w	r4, r2, r8
 80047a6:	eb63 0509 	sbc.w	r5, r3, r9
 80047aa:	f04f 0200 	mov.w	r2, #0
 80047ae:	f04f 0300 	mov.w	r3, #0
 80047b2:	00eb      	lsls	r3, r5, #3
 80047b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047b8:	00e2      	lsls	r2, r4, #3
 80047ba:	4614      	mov	r4, r2
 80047bc:	461d      	mov	r5, r3
 80047be:	eb14 030a 	adds.w	r3, r4, sl
 80047c2:	603b      	str	r3, [r7, #0]
 80047c4:	eb45 030b 	adc.w	r3, r5, fp
 80047c8:	607b      	str	r3, [r7, #4]
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	f04f 0300 	mov.w	r3, #0
 80047d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047d6:	4629      	mov	r1, r5
 80047d8:	028b      	lsls	r3, r1, #10
 80047da:	4621      	mov	r1, r4
 80047dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047e0:	4621      	mov	r1, r4
 80047e2:	028a      	lsls	r2, r1, #10
 80047e4:	4610      	mov	r0, r2
 80047e6:	4619      	mov	r1, r3
 80047e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047ea:	2200      	movs	r2, #0
 80047ec:	60bb      	str	r3, [r7, #8]
 80047ee:	60fa      	str	r2, [r7, #12]
 80047f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047f4:	f7fc fa28 	bl	8000c48 <__aeabi_uldivmod>
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	4613      	mov	r3, r2
 80047fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004800:	4b0b      	ldr	r3, [pc, #44]	@ (8004830 <HAL_RCC_GetSysClockFreq+0x180>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	0c1b      	lsrs	r3, r3, #16
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	3301      	adds	r3, #1
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004810:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004814:	fbb2 f3f3 	udiv	r3, r2, r3
 8004818:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800481a:	e002      	b.n	8004822 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800481c:	4b05      	ldr	r3, [pc, #20]	@ (8004834 <HAL_RCC_GetSysClockFreq+0x184>)
 800481e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004820:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004824:	4618      	mov	r0, r3
 8004826:	3740      	adds	r7, #64	@ 0x40
 8004828:	46bd      	mov	sp, r7
 800482a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800482e:	bf00      	nop
 8004830:	40023800 	.word	0x40023800
 8004834:	00f42400 	.word	0x00f42400
 8004838:	017d7840 	.word	0x017d7840

0800483c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004840:	4b03      	ldr	r3, [pc, #12]	@ (8004850 <HAL_RCC_GetHCLKFreq+0x14>)
 8004842:	681b      	ldr	r3, [r3, #0]
}
 8004844:	4618      	mov	r0, r3
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	20000000 	.word	0x20000000

08004854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004858:	f7ff fff0 	bl	800483c <HAL_RCC_GetHCLKFreq>
 800485c:	4602      	mov	r2, r0
 800485e:	4b05      	ldr	r3, [pc, #20]	@ (8004874 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	0a9b      	lsrs	r3, r3, #10
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	4903      	ldr	r1, [pc, #12]	@ (8004878 <HAL_RCC_GetPCLK1Freq+0x24>)
 800486a:	5ccb      	ldrb	r3, [r1, r3]
 800486c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004870:	4618      	mov	r0, r3
 8004872:	bd80      	pop	{r7, pc}
 8004874:	40023800 	.word	0x40023800
 8004878:	080092d0 	.word	0x080092d0

0800487c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004880:	f7ff ffdc 	bl	800483c <HAL_RCC_GetHCLKFreq>
 8004884:	4602      	mov	r2, r0
 8004886:	4b05      	ldr	r3, [pc, #20]	@ (800489c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	0b5b      	lsrs	r3, r3, #13
 800488c:	f003 0307 	and.w	r3, r3, #7
 8004890:	4903      	ldr	r1, [pc, #12]	@ (80048a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004892:	5ccb      	ldrb	r3, [r1, r3]
 8004894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004898:	4618      	mov	r0, r3
 800489a:	bd80      	pop	{r7, pc}
 800489c:	40023800 	.word	0x40023800
 80048a0:	080092d0 	.word	0x080092d0

080048a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e042      	b.n	800493c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d106      	bne.n	80048d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7fe fa68 	bl	8002da0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2224      	movs	r2, #36	@ 0x24
 80048d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 ff91 	bl	8005810 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	691a      	ldr	r2, [r3, #16]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	695a      	ldr	r2, [r3, #20]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800490c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68da      	ldr	r2, [r3, #12]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800491c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2220      	movs	r2, #32
 8004930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3708      	adds	r7, #8
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b08a      	sub	sp, #40	@ 0x28
 8004948:	af02      	add	r7, sp, #8
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	603b      	str	r3, [r7, #0]
 8004950:	4613      	mov	r3, r2
 8004952:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b20      	cmp	r3, #32
 8004962:	d175      	bne.n	8004a50 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <HAL_UART_Transmit+0x2c>
 800496a:	88fb      	ldrh	r3, [r7, #6]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e06e      	b.n	8004a52 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2221      	movs	r2, #33	@ 0x21
 800497e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004982:	f7fe fc3d 	bl	8003200 <HAL_GetTick>
 8004986:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	88fa      	ldrh	r2, [r7, #6]
 800498c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	88fa      	ldrh	r2, [r7, #6]
 8004992:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800499c:	d108      	bne.n	80049b0 <HAL_UART_Transmit+0x6c>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d104      	bne.n	80049b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80049a6:	2300      	movs	r3, #0
 80049a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	e003      	b.n	80049b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049b4:	2300      	movs	r3, #0
 80049b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049b8:	e02e      	b.n	8004a18 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	2200      	movs	r2, #0
 80049c2:	2180      	movs	r1, #128	@ 0x80
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 fc69 	bl	800529c <UART_WaitOnFlagUntilTimeout>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d005      	beq.n	80049dc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e03a      	b.n	8004a52 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10b      	bne.n	80049fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	461a      	mov	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	3302      	adds	r3, #2
 80049f6:	61bb      	str	r3, [r7, #24]
 80049f8:	e007      	b.n	8004a0a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	781a      	ldrb	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	3301      	adds	r3, #1
 8004a08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1cb      	bne.n	80049ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	2140      	movs	r1, #64	@ 0x40
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 fc35 	bl	800529c <UART_WaitOnFlagUntilTimeout>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d005      	beq.n	8004a44 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e006      	b.n	8004a52 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2220      	movs	r2, #32
 8004a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	e000      	b.n	8004a52 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a50:	2302      	movs	r3, #2
  }
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3720      	adds	r7, #32
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b08c      	sub	sp, #48	@ 0x30
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	60f8      	str	r0, [r7, #12]
 8004a62:	60b9      	str	r1, [r7, #8]
 8004a64:	4613      	mov	r3, r2
 8004a66:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b20      	cmp	r3, #32
 8004a72:	d14a      	bne.n	8004b0a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004a7a:	88fb      	ldrh	r3, [r7, #6]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e043      	b.n	8004b0c <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2201      	movs	r2, #1
 8004a88:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004a90:	88fb      	ldrh	r3, [r7, #6]
 8004a92:	461a      	mov	r2, r3
 8004a94:	68b9      	ldr	r1, [r7, #8]
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f000 fc5a 	bl	8005350 <UART_Start_Receive_DMA>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004aa2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d12c      	bne.n	8004b04 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d125      	bne.n	8004afe <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	613b      	str	r3, [r7, #16]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	613b      	str	r3, [r7, #16]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	613b      	str	r3, [r7, #16]
 8004ac6:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	330c      	adds	r3, #12
 8004ace:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	e853 3f00 	ldrex	r3, [r3]
 8004ad6:	617b      	str	r3, [r7, #20]
   return(result);
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f043 0310 	orr.w	r3, r3, #16
 8004ade:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	330c      	adds	r3, #12
 8004ae6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ae8:	627a      	str	r2, [r7, #36]	@ 0x24
 8004aea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aec:	6a39      	ldr	r1, [r7, #32]
 8004aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004af0:	e841 2300 	strex	r3, r2, [r1]
 8004af4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1e5      	bne.n	8004ac8 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8004afc:	e002      	b.n	8004b04 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004b04:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004b08:	e000      	b.n	8004b0c <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004b0a:	2302      	movs	r3, #2
  }
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3730      	adds	r7, #48	@ 0x30
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b0ba      	sub	sp, #232	@ 0xe8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004b52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10f      	bne.n	8004b7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b5e:	f003 0320 	and.w	r3, r3, #32
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d009      	beq.n	8004b7a <HAL_UART_IRQHandler+0x66>
 8004b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b6a:	f003 0320 	and.w	r3, r3, #32
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 fd8d 	bl	8005692 <UART_Receive_IT>
      return;
 8004b78:	e25b      	b.n	8005032 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 80de 	beq.w	8004d40 <HAL_UART_IRQHandler+0x22c>
 8004b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d106      	bne.n	8004b9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b94:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 80d1 	beq.w	8004d40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00b      	beq.n	8004bc2 <HAL_UART_IRQHandler+0xae>
 8004baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d005      	beq.n	8004bc2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bba:	f043 0201 	orr.w	r2, r3, #1
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00b      	beq.n	8004be6 <HAL_UART_IRQHandler+0xd2>
 8004bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d005      	beq.n	8004be6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bde:	f043 0202 	orr.w	r2, r3, #2
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00b      	beq.n	8004c0a <HAL_UART_IRQHandler+0xf6>
 8004bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d005      	beq.n	8004c0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c02:	f043 0204 	orr.w	r2, r3, #4
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c0e:	f003 0308 	and.w	r3, r3, #8
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d011      	beq.n	8004c3a <HAL_UART_IRQHandler+0x126>
 8004c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c1a:	f003 0320 	and.w	r3, r3, #32
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d105      	bne.n	8004c2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d005      	beq.n	8004c3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c32:	f043 0208 	orr.w	r2, r3, #8
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 81f2 	beq.w	8005028 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c48:	f003 0320 	and.w	r3, r3, #32
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d008      	beq.n	8004c62 <HAL_UART_IRQHandler+0x14e>
 8004c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c54:	f003 0320 	and.w	r3, r3, #32
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 fd18 	bl	8005692 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c6c:	2b40      	cmp	r3, #64	@ 0x40
 8004c6e:	bf0c      	ite	eq
 8004c70:	2301      	moveq	r3, #1
 8004c72:	2300      	movne	r3, #0
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c7e:	f003 0308 	and.w	r3, r3, #8
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d103      	bne.n	8004c8e <HAL_UART_IRQHandler+0x17a>
 8004c86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d04f      	beq.n	8004d2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 fc20 	bl	80054d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c9e:	2b40      	cmp	r3, #64	@ 0x40
 8004ca0:	d141      	bne.n	8004d26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	3314      	adds	r3, #20
 8004ca8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004cb0:	e853 3f00 	ldrex	r3, [r3]
 8004cb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004cb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004cbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3314      	adds	r3, #20
 8004cca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004cce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004cda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004cde:	e841 2300 	strex	r3, r2, [r1]
 8004ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004ce6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1d9      	bne.n	8004ca2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d013      	beq.n	8004d1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cfa:	4a7e      	ldr	r2, [pc, #504]	@ (8004ef4 <HAL_UART_IRQHandler+0x3e0>)
 8004cfc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fe fd34 	bl	8003770 <HAL_DMA_Abort_IT>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d016      	beq.n	8004d3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004d18:	4610      	mov	r0, r2
 8004d1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d1c:	e00e      	b.n	8004d3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f9a8 	bl	8005074 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d24:	e00a      	b.n	8004d3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f9a4 	bl	8005074 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d2c:	e006      	b.n	8004d3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f9a0 	bl	8005074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004d3a:	e175      	b.n	8005028 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d3c:	bf00      	nop
    return;
 8004d3e:	e173      	b.n	8005028 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	f040 814f 	bne.w	8004fe8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d4e:	f003 0310 	and.w	r3, r3, #16
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f000 8148 	beq.w	8004fe8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d5c:	f003 0310 	and.w	r3, r3, #16
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 8141 	beq.w	8004fe8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d66:	2300      	movs	r3, #0
 8004d68:	60bb      	str	r3, [r7, #8]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	60bb      	str	r3, [r7, #8]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	60bb      	str	r3, [r7, #8]
 8004d7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d86:	2b40      	cmp	r3, #64	@ 0x40
 8004d88:	f040 80b6 	bne.w	8004ef8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 8145 	beq.w	800502c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004da6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004daa:	429a      	cmp	r2, r3
 8004dac:	f080 813e 	bcs.w	800502c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004db6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dc2:	f000 8088 	beq.w	8004ed6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	330c      	adds	r3, #12
 8004dcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004dd4:	e853 3f00 	ldrex	r3, [r3]
 8004dd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004ddc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004de0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004de4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	330c      	adds	r3, #12
 8004dee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004df2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004df6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004dfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004e02:	e841 2300 	strex	r3, r2, [r1]
 8004e06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004e0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1d9      	bne.n	8004dc6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3314      	adds	r3, #20
 8004e18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e1c:	e853 3f00 	ldrex	r3, [r3]
 8004e20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004e22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e24:	f023 0301 	bic.w	r3, r3, #1
 8004e28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3314      	adds	r3, #20
 8004e32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004e36:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004e3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004e3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004e42:	e841 2300 	strex	r3, r2, [r1]
 8004e46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004e48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1e1      	bne.n	8004e12 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3314      	adds	r3, #20
 8004e54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e58:	e853 3f00 	ldrex	r3, [r3]
 8004e5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004e5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3314      	adds	r3, #20
 8004e6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004e72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004e74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e76:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004e78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e7a:	e841 2300 	strex	r3, r2, [r1]
 8004e7e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004e80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1e3      	bne.n	8004e4e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	330c      	adds	r3, #12
 8004e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e9e:	e853 3f00 	ldrex	r3, [r3]
 8004ea2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004ea4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ea6:	f023 0310 	bic.w	r3, r3, #16
 8004eaa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	330c      	adds	r3, #12
 8004eb4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004eb8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004eba:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ebe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ec0:	e841 2300 	strex	r3, r2, [r1]
 8004ec4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004ec6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1e3      	bne.n	8004e94 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7fe fbdd 	bl	8003690 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2202      	movs	r2, #2
 8004eda:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	4619      	mov	r1, r3
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f7fd fdd1 	bl	8002a94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ef2:	e09b      	b.n	800502c <HAL_UART_IRQHandler+0x518>
 8004ef4:	0800559b 	.word	0x0800559b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f000 808e 	beq.w	8005030 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004f14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 8089 	beq.w	8005030 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	330c      	adds	r3, #12
 8004f24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f28:	e853 3f00 	ldrex	r3, [r3]
 8004f2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	330c      	adds	r3, #12
 8004f3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004f42:	647a      	str	r2, [r7, #68]	@ 0x44
 8004f44:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f4a:	e841 2300 	strex	r3, r2, [r1]
 8004f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1e3      	bne.n	8004f1e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3314      	adds	r3, #20
 8004f5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f60:	e853 3f00 	ldrex	r3, [r3]
 8004f64:	623b      	str	r3, [r7, #32]
   return(result);
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	f023 0301 	bic.w	r3, r3, #1
 8004f6c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3314      	adds	r3, #20
 8004f76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004f7a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f82:	e841 2300 	strex	r3, r2, [r1]
 8004f86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1e3      	bne.n	8004f56 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2220      	movs	r2, #32
 8004f92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	330c      	adds	r3, #12
 8004fa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	e853 3f00 	ldrex	r3, [r3]
 8004faa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 0310 	bic.w	r3, r3, #16
 8004fb2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	330c      	adds	r3, #12
 8004fbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004fc0:	61fa      	str	r2, [r7, #28]
 8004fc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc4:	69b9      	ldr	r1, [r7, #24]
 8004fc6:	69fa      	ldr	r2, [r7, #28]
 8004fc8:	e841 2300 	strex	r3, r2, [r1]
 8004fcc:	617b      	str	r3, [r7, #20]
   return(result);
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1e3      	bne.n	8004f9c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004fda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004fde:	4619      	mov	r1, r3
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7fd fd57 	bl	8002a94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fe6:	e023      	b.n	8005030 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d009      	beq.n	8005008 <HAL_UART_IRQHandler+0x4f4>
 8004ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ff8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d003      	beq.n	8005008 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 fade 	bl	80055c2 <UART_Transmit_IT>
    return;
 8005006:	e014      	b.n	8005032 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800500c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00e      	beq.n	8005032 <HAL_UART_IRQHandler+0x51e>
 8005014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800501c:	2b00      	cmp	r3, #0
 800501e:	d008      	beq.n	8005032 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 fb1e 	bl	8005662 <UART_EndTransmit_IT>
    return;
 8005026:	e004      	b.n	8005032 <HAL_UART_IRQHandler+0x51e>
    return;
 8005028:	bf00      	nop
 800502a:	e002      	b.n	8005032 <HAL_UART_IRQHandler+0x51e>
      return;
 800502c:	bf00      	nop
 800502e:	e000      	b.n	8005032 <HAL_UART_IRQHandler+0x51e>
      return;
 8005030:	bf00      	nop
  }
}
 8005032:	37e8      	adds	r7, #232	@ 0xe8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8005094:	4618      	mov	r0, r3
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b09c      	sub	sp, #112	@ 0x70
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ac:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d172      	bne.n	80051a2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80050bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050be:	2200      	movs	r2, #0
 80050c0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	330c      	adds	r3, #12
 80050c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050cc:	e853 3f00 	ldrex	r3, [r3]
 80050d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80050d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	330c      	adds	r3, #12
 80050e0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80050e2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80050e4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80050e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80050ea:	e841 2300 	strex	r3, r2, [r1]
 80050ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80050f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1e5      	bne.n	80050c2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	3314      	adds	r3, #20
 80050fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005100:	e853 3f00 	ldrex	r3, [r3]
 8005104:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005108:	f023 0301 	bic.w	r3, r3, #1
 800510c:	667b      	str	r3, [r7, #100]	@ 0x64
 800510e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	3314      	adds	r3, #20
 8005114:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005116:	647a      	str	r2, [r7, #68]	@ 0x44
 8005118:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800511c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800511e:	e841 2300 	strex	r3, r2, [r1]
 8005122:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1e5      	bne.n	80050f6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800512a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	3314      	adds	r3, #20
 8005130:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005134:	e853 3f00 	ldrex	r3, [r3]
 8005138:	623b      	str	r3, [r7, #32]
   return(result);
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005140:	663b      	str	r3, [r7, #96]	@ 0x60
 8005142:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3314      	adds	r3, #20
 8005148:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800514a:	633a      	str	r2, [r7, #48]	@ 0x30
 800514c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005150:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005152:	e841 2300 	strex	r3, r2, [r1]
 8005156:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1e5      	bne.n	800512a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800515e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005160:	2220      	movs	r2, #32
 8005162:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005166:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800516a:	2b01      	cmp	r3, #1
 800516c:	d119      	bne.n	80051a2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800516e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	330c      	adds	r3, #12
 8005174:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	e853 3f00 	ldrex	r3, [r3]
 800517c:	60fb      	str	r3, [r7, #12]
   return(result);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f023 0310 	bic.w	r3, r3, #16
 8005184:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005186:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	330c      	adds	r3, #12
 800518c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800518e:	61fa      	str	r2, [r7, #28]
 8005190:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005192:	69b9      	ldr	r1, [r7, #24]
 8005194:	69fa      	ldr	r2, [r7, #28]
 8005196:	e841 2300 	strex	r3, r2, [r1]
 800519a:	617b      	str	r3, [r7, #20]
   return(result);
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1e5      	bne.n	800516e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051a4:	2200      	movs	r2, #0
 80051a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d106      	bne.n	80051be <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051b2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80051b4:	4619      	mov	r1, r3
 80051b6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80051b8:	f7fd fc6c 	bl	8002a94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80051bc:	e002      	b.n	80051c4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80051be:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80051c0:	f7ff ff44 	bl	800504c <HAL_UART_RxCpltCallback>
}
 80051c4:	bf00      	nop
 80051c6:	3770      	adds	r7, #112	@ 0x70
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2201      	movs	r2, #1
 80051de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d108      	bne.n	80051fa <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80051ec:	085b      	lsrs	r3, r3, #1
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	4619      	mov	r1, r3
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f7fd fc4e 	bl	8002a94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80051f8:	e002      	b.n	8005200 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f7ff ff30 	bl	8005060 <HAL_UART_RxHalfCpltCallback>
}
 8005200:	bf00      	nop
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005210:	2300      	movs	r3, #0
 8005212:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005218:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005224:	2b80      	cmp	r3, #128	@ 0x80
 8005226:	bf0c      	ite	eq
 8005228:	2301      	moveq	r3, #1
 800522a:	2300      	movne	r3, #0
 800522c:	b2db      	uxtb	r3, r3
 800522e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b21      	cmp	r3, #33	@ 0x21
 800523a:	d108      	bne.n	800524e <UART_DMAError+0x46>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	2200      	movs	r2, #0
 8005246:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005248:	68b8      	ldr	r0, [r7, #8]
 800524a:	f000 f91b 	bl	8005484 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005258:	2b40      	cmp	r3, #64	@ 0x40
 800525a:	bf0c      	ite	eq
 800525c:	2301      	moveq	r3, #1
 800525e:	2300      	movne	r3, #0
 8005260:	b2db      	uxtb	r3, r3
 8005262:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b22      	cmp	r3, #34	@ 0x22
 800526e:	d108      	bne.n	8005282 <UART_DMAError+0x7a>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d005      	beq.n	8005282 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	2200      	movs	r2, #0
 800527a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800527c:	68b8      	ldr	r0, [r7, #8]
 800527e:	f000 f929 	bl	80054d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005286:	f043 0210 	orr.w	r2, r3, #16
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800528e:	68b8      	ldr	r0, [r7, #8]
 8005290:	f7ff fef0 	bl	8005074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005294:	bf00      	nop
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	603b      	str	r3, [r7, #0]
 80052a8:	4613      	mov	r3, r2
 80052aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ac:	e03b      	b.n	8005326 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ae:	6a3b      	ldr	r3, [r7, #32]
 80052b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b4:	d037      	beq.n	8005326 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052b6:	f7fd ffa3 	bl	8003200 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	6a3a      	ldr	r2, [r7, #32]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d302      	bcc.n	80052cc <UART_WaitOnFlagUntilTimeout+0x30>
 80052c6:	6a3b      	ldr	r3, [r7, #32]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e03a      	b.n	8005346 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f003 0304 	and.w	r3, r3, #4
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d023      	beq.n	8005326 <UART_WaitOnFlagUntilTimeout+0x8a>
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	2b80      	cmp	r3, #128	@ 0x80
 80052e2:	d020      	beq.n	8005326 <UART_WaitOnFlagUntilTimeout+0x8a>
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2b40      	cmp	r3, #64	@ 0x40
 80052e8:	d01d      	beq.n	8005326 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0308 	and.w	r3, r3, #8
 80052f4:	2b08      	cmp	r3, #8
 80052f6:	d116      	bne.n	8005326 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80052f8:	2300      	movs	r3, #0
 80052fa:	617b      	str	r3, [r7, #20]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	617b      	str	r3, [r7, #20]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	617b      	str	r3, [r7, #20]
 800530c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f000 f8e0 	bl	80054d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2208      	movs	r2, #8
 8005318:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e00f      	b.n	8005346 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	4013      	ands	r3, r2
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	429a      	cmp	r2, r3
 8005334:	bf0c      	ite	eq
 8005336:	2301      	moveq	r3, #1
 8005338:	2300      	movne	r3, #0
 800533a:	b2db      	uxtb	r3, r3
 800533c:	461a      	mov	r2, r3
 800533e:	79fb      	ldrb	r3, [r7, #7]
 8005340:	429a      	cmp	r2, r3
 8005342:	d0b4      	beq.n	80052ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3718      	adds	r7, #24
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
	...

08005350 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b098      	sub	sp, #96	@ 0x60
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	4613      	mov	r3, r2
 800535c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	88fa      	ldrh	r2, [r7, #6]
 8005368:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2222      	movs	r2, #34	@ 0x22
 8005374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800537c:	4a3e      	ldr	r2, [pc, #248]	@ (8005478 <UART_Start_Receive_DMA+0x128>)
 800537e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005384:	4a3d      	ldr	r2, [pc, #244]	@ (800547c <UART_Start_Receive_DMA+0x12c>)
 8005386:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800538c:	4a3c      	ldr	r2, [pc, #240]	@ (8005480 <UART_Start_Receive_DMA+0x130>)
 800538e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005394:	2200      	movs	r2, #0
 8005396:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005398:	f107 0308 	add.w	r3, r7, #8
 800539c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	3304      	adds	r3, #4
 80053a8:	4619      	mov	r1, r3
 80053aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	88fb      	ldrh	r3, [r7, #6]
 80053b0:	f7fe f916 	bl	80035e0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80053b4:	2300      	movs	r3, #0
 80053b6:	613b      	str	r3, [r7, #16]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	613b      	str	r3, [r7, #16]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	613b      	str	r3, [r7, #16]
 80053c8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d019      	beq.n	8005406 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	330c      	adds	r3, #12
 80053d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053dc:	e853 3f00 	ldrex	r3, [r3]
 80053e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	330c      	adds	r3, #12
 80053f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80053f2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80053f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80053f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053fa:	e841 2300 	strex	r3, r2, [r1]
 80053fe:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005400:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1e5      	bne.n	80053d2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	3314      	adds	r3, #20
 800540c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005410:	e853 3f00 	ldrex	r3, [r3]
 8005414:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005418:	f043 0301 	orr.w	r3, r3, #1
 800541c:	657b      	str	r3, [r7, #84]	@ 0x54
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3314      	adds	r3, #20
 8005424:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005426:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005428:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800542c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800542e:	e841 2300 	strex	r3, r2, [r1]
 8005432:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1e5      	bne.n	8005406 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	3314      	adds	r3, #20
 8005440:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	e853 3f00 	ldrex	r3, [r3]
 8005448:	617b      	str	r3, [r7, #20]
   return(result);
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005450:	653b      	str	r3, [r7, #80]	@ 0x50
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	3314      	adds	r3, #20
 8005458:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800545a:	627a      	str	r2, [r7, #36]	@ 0x24
 800545c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545e:	6a39      	ldr	r1, [r7, #32]
 8005460:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005462:	e841 2300 	strex	r3, r2, [r1]
 8005466:	61fb      	str	r3, [r7, #28]
   return(result);
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1e5      	bne.n	800543a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3760      	adds	r7, #96	@ 0x60
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	080050a1 	.word	0x080050a1
 800547c:	080051cd 	.word	0x080051cd
 8005480:	08005209 	.word	0x08005209

08005484 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005484:	b480      	push	{r7}
 8005486:	b089      	sub	sp, #36	@ 0x24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	330c      	adds	r3, #12
 8005492:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	e853 3f00 	ldrex	r3, [r3]
 800549a:	60bb      	str	r3, [r7, #8]
   return(result);
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80054a2:	61fb      	str	r3, [r7, #28]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	330c      	adds	r3, #12
 80054aa:	69fa      	ldr	r2, [r7, #28]
 80054ac:	61ba      	str	r2, [r7, #24]
 80054ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b0:	6979      	ldr	r1, [r7, #20]
 80054b2:	69ba      	ldr	r2, [r7, #24]
 80054b4:	e841 2300 	strex	r3, r2, [r1]
 80054b8:	613b      	str	r3, [r7, #16]
   return(result);
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1e5      	bne.n	800548c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2220      	movs	r2, #32
 80054c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80054c8:	bf00      	nop
 80054ca:	3724      	adds	r7, #36	@ 0x24
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b095      	sub	sp, #84	@ 0x54
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	330c      	adds	r3, #12
 80054e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054e6:	e853 3f00 	ldrex	r3, [r3]
 80054ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	330c      	adds	r3, #12
 80054fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054fc:	643a      	str	r2, [r7, #64]	@ 0x40
 80054fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005500:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005502:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005504:	e841 2300 	strex	r3, r2, [r1]
 8005508:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800550a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1e5      	bne.n	80054dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	3314      	adds	r3, #20
 8005516:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	e853 3f00 	ldrex	r3, [r3]
 800551e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	f023 0301 	bic.w	r3, r3, #1
 8005526:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	3314      	adds	r3, #20
 800552e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005530:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005532:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005534:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005536:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005538:	e841 2300 	strex	r3, r2, [r1]
 800553c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800553e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1e5      	bne.n	8005510 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005548:	2b01      	cmp	r3, #1
 800554a:	d119      	bne.n	8005580 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	330c      	adds	r3, #12
 8005552:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	e853 3f00 	ldrex	r3, [r3]
 800555a:	60bb      	str	r3, [r7, #8]
   return(result);
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	f023 0310 	bic.w	r3, r3, #16
 8005562:	647b      	str	r3, [r7, #68]	@ 0x44
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	330c      	adds	r3, #12
 800556a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800556c:	61ba      	str	r2, [r7, #24]
 800556e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005570:	6979      	ldr	r1, [r7, #20]
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	e841 2300 	strex	r3, r2, [r1]
 8005578:	613b      	str	r3, [r7, #16]
   return(result);
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1e5      	bne.n	800554c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2220      	movs	r2, #32
 8005584:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800558e:	bf00      	nop
 8005590:	3754      	adds	r7, #84	@ 0x54
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b084      	sub	sp, #16
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f7ff fd5d 	bl	8005074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055ba:	bf00      	nop
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b085      	sub	sp, #20
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b21      	cmp	r3, #33	@ 0x21
 80055d4:	d13e      	bne.n	8005654 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055de:	d114      	bne.n	800560a <UART_Transmit_IT+0x48>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d110      	bne.n	800560a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a1b      	ldr	r3, [r3, #32]
 80055ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	881b      	ldrh	r3, [r3, #0]
 80055f2:	461a      	mov	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	1c9a      	adds	r2, r3, #2
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	621a      	str	r2, [r3, #32]
 8005608:	e008      	b.n	800561c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	1c59      	adds	r1, r3, #1
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	6211      	str	r1, [r2, #32]
 8005614:	781a      	ldrb	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005620:	b29b      	uxth	r3, r3
 8005622:	3b01      	subs	r3, #1
 8005624:	b29b      	uxth	r3, r3
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	4619      	mov	r1, r3
 800562a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10f      	bne.n	8005650 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68da      	ldr	r2, [r3, #12]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800563e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800564e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005650:	2300      	movs	r3, #0
 8005652:	e000      	b.n	8005656 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005654:	2302      	movs	r3, #2
  }
}
 8005656:	4618      	mov	r0, r3
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b082      	sub	sp, #8
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68da      	ldr	r2, [r3, #12]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005678:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2220      	movs	r2, #32
 800567e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7ff fcd8 	bl	8005038 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b08c      	sub	sp, #48	@ 0x30
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b22      	cmp	r3, #34	@ 0x22
 80056a4:	f040 80ae 	bne.w	8005804 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056b0:	d117      	bne.n	80056e2 <UART_Receive_IT+0x50>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d113      	bne.n	80056e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80056ba:	2300      	movs	r3, #0
 80056bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056da:	1c9a      	adds	r2, r3, #2
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	629a      	str	r2, [r3, #40]	@ 0x28
 80056e0:	e026      	b.n	8005730 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80056e8:	2300      	movs	r3, #0
 80056ea:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056f4:	d007      	beq.n	8005706 <UART_Receive_IT+0x74>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10a      	bne.n	8005714 <UART_Receive_IT+0x82>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d106      	bne.n	8005714 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	b2da      	uxtb	r2, r3
 800570e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005710:	701a      	strb	r2, [r3, #0]
 8005712:	e008      	b.n	8005726 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	b2db      	uxtb	r3, r3
 800571c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005720:	b2da      	uxtb	r2, r3
 8005722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005724:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572a:	1c5a      	adds	r2, r3, #1
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005734:	b29b      	uxth	r3, r3
 8005736:	3b01      	subs	r3, #1
 8005738:	b29b      	uxth	r3, r3
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	4619      	mov	r1, r3
 800573e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005740:	2b00      	cmp	r3, #0
 8005742:	d15d      	bne.n	8005800 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 0220 	bic.w	r2, r2, #32
 8005752:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68da      	ldr	r2, [r3, #12]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005762:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	695a      	ldr	r2, [r3, #20]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 0201 	bic.w	r2, r2, #1
 8005772:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2220      	movs	r2, #32
 8005778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005786:	2b01      	cmp	r3, #1
 8005788:	d135      	bne.n	80057f6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	330c      	adds	r3, #12
 8005796:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	e853 3f00 	ldrex	r3, [r3]
 800579e:	613b      	str	r3, [r7, #16]
   return(result);
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f023 0310 	bic.w	r3, r3, #16
 80057a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	330c      	adds	r3, #12
 80057ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057b0:	623a      	str	r2, [r7, #32]
 80057b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b4:	69f9      	ldr	r1, [r7, #28]
 80057b6:	6a3a      	ldr	r2, [r7, #32]
 80057b8:	e841 2300 	strex	r3, r2, [r1]
 80057bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1e5      	bne.n	8005790 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0310 	and.w	r3, r3, #16
 80057ce:	2b10      	cmp	r3, #16
 80057d0:	d10a      	bne.n	80057e8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057d2:	2300      	movs	r3, #0
 80057d4:	60fb      	str	r3, [r7, #12]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	60fb      	str	r3, [r7, #12]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	60fb      	str	r3, [r7, #12]
 80057e6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80057ec:	4619      	mov	r1, r3
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7fd f950 	bl	8002a94 <HAL_UARTEx_RxEventCallback>
 80057f4:	e002      	b.n	80057fc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7ff fc28 	bl	800504c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80057fc:	2300      	movs	r3, #0
 80057fe:	e002      	b.n	8005806 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005800:	2300      	movs	r3, #0
 8005802:	e000      	b.n	8005806 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005804:	2302      	movs	r3, #2
  }
}
 8005806:	4618      	mov	r0, r3
 8005808:	3730      	adds	r7, #48	@ 0x30
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
	...

08005810 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005814:	b0c0      	sub	sp, #256	@ 0x100
 8005816:	af00      	add	r7, sp, #0
 8005818:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800581c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800582c:	68d9      	ldr	r1, [r3, #12]
 800582e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	ea40 0301 	orr.w	r3, r0, r1
 8005838:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800583a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	431a      	orrs	r2, r3
 8005848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	431a      	orrs	r2, r3
 8005850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	4313      	orrs	r3, r2
 8005858:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800585c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005868:	f021 010c 	bic.w	r1, r1, #12
 800586c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005876:	430b      	orrs	r3, r1
 8005878:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800587a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800588a:	6999      	ldr	r1, [r3, #24]
 800588c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	ea40 0301 	orr.w	r3, r0, r1
 8005896:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	4b8f      	ldr	r3, [pc, #572]	@ (8005adc <UART_SetConfig+0x2cc>)
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d005      	beq.n	80058b0 <UART_SetConfig+0xa0>
 80058a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	4b8d      	ldr	r3, [pc, #564]	@ (8005ae0 <UART_SetConfig+0x2d0>)
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d104      	bne.n	80058ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058b0:	f7fe ffe4 	bl	800487c <HAL_RCC_GetPCLK2Freq>
 80058b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80058b8:	e003      	b.n	80058c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058ba:	f7fe ffcb 	bl	8004854 <HAL_RCC_GetPCLK1Freq>
 80058be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058cc:	f040 810c 	bne.w	8005ae8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058d4:	2200      	movs	r2, #0
 80058d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80058da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80058de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80058e2:	4622      	mov	r2, r4
 80058e4:	462b      	mov	r3, r5
 80058e6:	1891      	adds	r1, r2, r2
 80058e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80058ea:	415b      	adcs	r3, r3
 80058ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80058f2:	4621      	mov	r1, r4
 80058f4:	eb12 0801 	adds.w	r8, r2, r1
 80058f8:	4629      	mov	r1, r5
 80058fa:	eb43 0901 	adc.w	r9, r3, r1
 80058fe:	f04f 0200 	mov.w	r2, #0
 8005902:	f04f 0300 	mov.w	r3, #0
 8005906:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800590a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800590e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005912:	4690      	mov	r8, r2
 8005914:	4699      	mov	r9, r3
 8005916:	4623      	mov	r3, r4
 8005918:	eb18 0303 	adds.w	r3, r8, r3
 800591c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005920:	462b      	mov	r3, r5
 8005922:	eb49 0303 	adc.w	r3, r9, r3
 8005926:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800592a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005936:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800593a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800593e:	460b      	mov	r3, r1
 8005940:	18db      	adds	r3, r3, r3
 8005942:	653b      	str	r3, [r7, #80]	@ 0x50
 8005944:	4613      	mov	r3, r2
 8005946:	eb42 0303 	adc.w	r3, r2, r3
 800594a:	657b      	str	r3, [r7, #84]	@ 0x54
 800594c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005950:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005954:	f7fb f978 	bl	8000c48 <__aeabi_uldivmod>
 8005958:	4602      	mov	r2, r0
 800595a:	460b      	mov	r3, r1
 800595c:	4b61      	ldr	r3, [pc, #388]	@ (8005ae4 <UART_SetConfig+0x2d4>)
 800595e:	fba3 2302 	umull	r2, r3, r3, r2
 8005962:	095b      	lsrs	r3, r3, #5
 8005964:	011c      	lsls	r4, r3, #4
 8005966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800596a:	2200      	movs	r2, #0
 800596c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005970:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005974:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005978:	4642      	mov	r2, r8
 800597a:	464b      	mov	r3, r9
 800597c:	1891      	adds	r1, r2, r2
 800597e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005980:	415b      	adcs	r3, r3
 8005982:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005984:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005988:	4641      	mov	r1, r8
 800598a:	eb12 0a01 	adds.w	sl, r2, r1
 800598e:	4649      	mov	r1, r9
 8005990:	eb43 0b01 	adc.w	fp, r3, r1
 8005994:	f04f 0200 	mov.w	r2, #0
 8005998:	f04f 0300 	mov.w	r3, #0
 800599c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059a8:	4692      	mov	sl, r2
 80059aa:	469b      	mov	fp, r3
 80059ac:	4643      	mov	r3, r8
 80059ae:	eb1a 0303 	adds.w	r3, sl, r3
 80059b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80059b6:	464b      	mov	r3, r9
 80059b8:	eb4b 0303 	adc.w	r3, fp, r3
 80059bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80059c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80059d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80059d4:	460b      	mov	r3, r1
 80059d6:	18db      	adds	r3, r3, r3
 80059d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80059da:	4613      	mov	r3, r2
 80059dc:	eb42 0303 	adc.w	r3, r2, r3
 80059e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80059e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80059e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80059ea:	f7fb f92d 	bl	8000c48 <__aeabi_uldivmod>
 80059ee:	4602      	mov	r2, r0
 80059f0:	460b      	mov	r3, r1
 80059f2:	4611      	mov	r1, r2
 80059f4:	4b3b      	ldr	r3, [pc, #236]	@ (8005ae4 <UART_SetConfig+0x2d4>)
 80059f6:	fba3 2301 	umull	r2, r3, r3, r1
 80059fa:	095b      	lsrs	r3, r3, #5
 80059fc:	2264      	movs	r2, #100	@ 0x64
 80059fe:	fb02 f303 	mul.w	r3, r2, r3
 8005a02:	1acb      	subs	r3, r1, r3
 8005a04:	00db      	lsls	r3, r3, #3
 8005a06:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005a0a:	4b36      	ldr	r3, [pc, #216]	@ (8005ae4 <UART_SetConfig+0x2d4>)
 8005a0c:	fba3 2302 	umull	r2, r3, r3, r2
 8005a10:	095b      	lsrs	r3, r3, #5
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005a18:	441c      	add	r4, r3
 8005a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005a28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005a2c:	4642      	mov	r2, r8
 8005a2e:	464b      	mov	r3, r9
 8005a30:	1891      	adds	r1, r2, r2
 8005a32:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a34:	415b      	adcs	r3, r3
 8005a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005a3c:	4641      	mov	r1, r8
 8005a3e:	1851      	adds	r1, r2, r1
 8005a40:	6339      	str	r1, [r7, #48]	@ 0x30
 8005a42:	4649      	mov	r1, r9
 8005a44:	414b      	adcs	r3, r1
 8005a46:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a48:	f04f 0200 	mov.w	r2, #0
 8005a4c:	f04f 0300 	mov.w	r3, #0
 8005a50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005a54:	4659      	mov	r1, fp
 8005a56:	00cb      	lsls	r3, r1, #3
 8005a58:	4651      	mov	r1, sl
 8005a5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a5e:	4651      	mov	r1, sl
 8005a60:	00ca      	lsls	r2, r1, #3
 8005a62:	4610      	mov	r0, r2
 8005a64:	4619      	mov	r1, r3
 8005a66:	4603      	mov	r3, r0
 8005a68:	4642      	mov	r2, r8
 8005a6a:	189b      	adds	r3, r3, r2
 8005a6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a70:	464b      	mov	r3, r9
 8005a72:	460a      	mov	r2, r1
 8005a74:	eb42 0303 	adc.w	r3, r2, r3
 8005a78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005a88:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005a8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005a90:	460b      	mov	r3, r1
 8005a92:	18db      	adds	r3, r3, r3
 8005a94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a96:	4613      	mov	r3, r2
 8005a98:	eb42 0303 	adc.w	r3, r2, r3
 8005a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005aa2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005aa6:	f7fb f8cf 	bl	8000c48 <__aeabi_uldivmod>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	460b      	mov	r3, r1
 8005aae:	4b0d      	ldr	r3, [pc, #52]	@ (8005ae4 <UART_SetConfig+0x2d4>)
 8005ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ab4:	095b      	lsrs	r3, r3, #5
 8005ab6:	2164      	movs	r1, #100	@ 0x64
 8005ab8:	fb01 f303 	mul.w	r3, r1, r3
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	00db      	lsls	r3, r3, #3
 8005ac0:	3332      	adds	r3, #50	@ 0x32
 8005ac2:	4a08      	ldr	r2, [pc, #32]	@ (8005ae4 <UART_SetConfig+0x2d4>)
 8005ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac8:	095b      	lsrs	r3, r3, #5
 8005aca:	f003 0207 	and.w	r2, r3, #7
 8005ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4422      	add	r2, r4
 8005ad6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ad8:	e106      	b.n	8005ce8 <UART_SetConfig+0x4d8>
 8005ada:	bf00      	nop
 8005adc:	40011000 	.word	0x40011000
 8005ae0:	40011400 	.word	0x40011400
 8005ae4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005aec:	2200      	movs	r2, #0
 8005aee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005af2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005af6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005afa:	4642      	mov	r2, r8
 8005afc:	464b      	mov	r3, r9
 8005afe:	1891      	adds	r1, r2, r2
 8005b00:	6239      	str	r1, [r7, #32]
 8005b02:	415b      	adcs	r3, r3
 8005b04:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b0a:	4641      	mov	r1, r8
 8005b0c:	1854      	adds	r4, r2, r1
 8005b0e:	4649      	mov	r1, r9
 8005b10:	eb43 0501 	adc.w	r5, r3, r1
 8005b14:	f04f 0200 	mov.w	r2, #0
 8005b18:	f04f 0300 	mov.w	r3, #0
 8005b1c:	00eb      	lsls	r3, r5, #3
 8005b1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b22:	00e2      	lsls	r2, r4, #3
 8005b24:	4614      	mov	r4, r2
 8005b26:	461d      	mov	r5, r3
 8005b28:	4643      	mov	r3, r8
 8005b2a:	18e3      	adds	r3, r4, r3
 8005b2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b30:	464b      	mov	r3, r9
 8005b32:	eb45 0303 	adc.w	r3, r5, r3
 8005b36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b4a:	f04f 0200 	mov.w	r2, #0
 8005b4e:	f04f 0300 	mov.w	r3, #0
 8005b52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005b56:	4629      	mov	r1, r5
 8005b58:	008b      	lsls	r3, r1, #2
 8005b5a:	4621      	mov	r1, r4
 8005b5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b60:	4621      	mov	r1, r4
 8005b62:	008a      	lsls	r2, r1, #2
 8005b64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005b68:	f7fb f86e 	bl	8000c48 <__aeabi_uldivmod>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	460b      	mov	r3, r1
 8005b70:	4b60      	ldr	r3, [pc, #384]	@ (8005cf4 <UART_SetConfig+0x4e4>)
 8005b72:	fba3 2302 	umull	r2, r3, r3, r2
 8005b76:	095b      	lsrs	r3, r3, #5
 8005b78:	011c      	lsls	r4, r3, #4
 8005b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005b84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005b88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005b8c:	4642      	mov	r2, r8
 8005b8e:	464b      	mov	r3, r9
 8005b90:	1891      	adds	r1, r2, r2
 8005b92:	61b9      	str	r1, [r7, #24]
 8005b94:	415b      	adcs	r3, r3
 8005b96:	61fb      	str	r3, [r7, #28]
 8005b98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b9c:	4641      	mov	r1, r8
 8005b9e:	1851      	adds	r1, r2, r1
 8005ba0:	6139      	str	r1, [r7, #16]
 8005ba2:	4649      	mov	r1, r9
 8005ba4:	414b      	adcs	r3, r1
 8005ba6:	617b      	str	r3, [r7, #20]
 8005ba8:	f04f 0200 	mov.w	r2, #0
 8005bac:	f04f 0300 	mov.w	r3, #0
 8005bb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bb4:	4659      	mov	r1, fp
 8005bb6:	00cb      	lsls	r3, r1, #3
 8005bb8:	4651      	mov	r1, sl
 8005bba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bbe:	4651      	mov	r1, sl
 8005bc0:	00ca      	lsls	r2, r1, #3
 8005bc2:	4610      	mov	r0, r2
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	4642      	mov	r2, r8
 8005bca:	189b      	adds	r3, r3, r2
 8005bcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005bd0:	464b      	mov	r3, r9
 8005bd2:	460a      	mov	r2, r1
 8005bd4:	eb42 0303 	adc.w	r3, r2, r3
 8005bd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005be6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005be8:	f04f 0200 	mov.w	r2, #0
 8005bec:	f04f 0300 	mov.w	r3, #0
 8005bf0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005bf4:	4649      	mov	r1, r9
 8005bf6:	008b      	lsls	r3, r1, #2
 8005bf8:	4641      	mov	r1, r8
 8005bfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bfe:	4641      	mov	r1, r8
 8005c00:	008a      	lsls	r2, r1, #2
 8005c02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005c06:	f7fb f81f 	bl	8000c48 <__aeabi_uldivmod>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	4611      	mov	r1, r2
 8005c10:	4b38      	ldr	r3, [pc, #224]	@ (8005cf4 <UART_SetConfig+0x4e4>)
 8005c12:	fba3 2301 	umull	r2, r3, r3, r1
 8005c16:	095b      	lsrs	r3, r3, #5
 8005c18:	2264      	movs	r2, #100	@ 0x64
 8005c1a:	fb02 f303 	mul.w	r3, r2, r3
 8005c1e:	1acb      	subs	r3, r1, r3
 8005c20:	011b      	lsls	r3, r3, #4
 8005c22:	3332      	adds	r3, #50	@ 0x32
 8005c24:	4a33      	ldr	r2, [pc, #204]	@ (8005cf4 <UART_SetConfig+0x4e4>)
 8005c26:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2a:	095b      	lsrs	r3, r3, #5
 8005c2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c30:	441c      	add	r4, r3
 8005c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c36:	2200      	movs	r2, #0
 8005c38:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c3a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005c3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005c40:	4642      	mov	r2, r8
 8005c42:	464b      	mov	r3, r9
 8005c44:	1891      	adds	r1, r2, r2
 8005c46:	60b9      	str	r1, [r7, #8]
 8005c48:	415b      	adcs	r3, r3
 8005c4a:	60fb      	str	r3, [r7, #12]
 8005c4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c50:	4641      	mov	r1, r8
 8005c52:	1851      	adds	r1, r2, r1
 8005c54:	6039      	str	r1, [r7, #0]
 8005c56:	4649      	mov	r1, r9
 8005c58:	414b      	adcs	r3, r1
 8005c5a:	607b      	str	r3, [r7, #4]
 8005c5c:	f04f 0200 	mov.w	r2, #0
 8005c60:	f04f 0300 	mov.w	r3, #0
 8005c64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c68:	4659      	mov	r1, fp
 8005c6a:	00cb      	lsls	r3, r1, #3
 8005c6c:	4651      	mov	r1, sl
 8005c6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c72:	4651      	mov	r1, sl
 8005c74:	00ca      	lsls	r2, r1, #3
 8005c76:	4610      	mov	r0, r2
 8005c78:	4619      	mov	r1, r3
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	4642      	mov	r2, r8
 8005c7e:	189b      	adds	r3, r3, r2
 8005c80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c82:	464b      	mov	r3, r9
 8005c84:	460a      	mov	r2, r1
 8005c86:	eb42 0303 	adc.w	r3, r2, r3
 8005c8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c96:	667a      	str	r2, [r7, #100]	@ 0x64
 8005c98:	f04f 0200 	mov.w	r2, #0
 8005c9c:	f04f 0300 	mov.w	r3, #0
 8005ca0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005ca4:	4649      	mov	r1, r9
 8005ca6:	008b      	lsls	r3, r1, #2
 8005ca8:	4641      	mov	r1, r8
 8005caa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cae:	4641      	mov	r1, r8
 8005cb0:	008a      	lsls	r2, r1, #2
 8005cb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005cb6:	f7fa ffc7 	bl	8000c48 <__aeabi_uldivmod>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf4 <UART_SetConfig+0x4e4>)
 8005cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8005cc4:	095b      	lsrs	r3, r3, #5
 8005cc6:	2164      	movs	r1, #100	@ 0x64
 8005cc8:	fb01 f303 	mul.w	r3, r1, r3
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	011b      	lsls	r3, r3, #4
 8005cd0:	3332      	adds	r3, #50	@ 0x32
 8005cd2:	4a08      	ldr	r2, [pc, #32]	@ (8005cf4 <UART_SetConfig+0x4e4>)
 8005cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd8:	095b      	lsrs	r3, r3, #5
 8005cda:	f003 020f 	and.w	r2, r3, #15
 8005cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4422      	add	r2, r4
 8005ce6:	609a      	str	r2, [r3, #8]
}
 8005ce8:	bf00      	nop
 8005cea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cf4:	51eb851f 	.word	0x51eb851f

08005cf8 <__cvt>:
 8005cf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cfc:	ec57 6b10 	vmov	r6, r7, d0
 8005d00:	2f00      	cmp	r7, #0
 8005d02:	460c      	mov	r4, r1
 8005d04:	4619      	mov	r1, r3
 8005d06:	463b      	mov	r3, r7
 8005d08:	bfbb      	ittet	lt
 8005d0a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005d0e:	461f      	movlt	r7, r3
 8005d10:	2300      	movge	r3, #0
 8005d12:	232d      	movlt	r3, #45	@ 0x2d
 8005d14:	700b      	strb	r3, [r1, #0]
 8005d16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d18:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005d1c:	4691      	mov	r9, r2
 8005d1e:	f023 0820 	bic.w	r8, r3, #32
 8005d22:	bfbc      	itt	lt
 8005d24:	4632      	movlt	r2, r6
 8005d26:	4616      	movlt	r6, r2
 8005d28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005d2c:	d005      	beq.n	8005d3a <__cvt+0x42>
 8005d2e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005d32:	d100      	bne.n	8005d36 <__cvt+0x3e>
 8005d34:	3401      	adds	r4, #1
 8005d36:	2102      	movs	r1, #2
 8005d38:	e000      	b.n	8005d3c <__cvt+0x44>
 8005d3a:	2103      	movs	r1, #3
 8005d3c:	ab03      	add	r3, sp, #12
 8005d3e:	9301      	str	r3, [sp, #4]
 8005d40:	ab02      	add	r3, sp, #8
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	ec47 6b10 	vmov	d0, r6, r7
 8005d48:	4653      	mov	r3, sl
 8005d4a:	4622      	mov	r2, r4
 8005d4c:	f000 fe58 	bl	8006a00 <_dtoa_r>
 8005d50:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005d54:	4605      	mov	r5, r0
 8005d56:	d119      	bne.n	8005d8c <__cvt+0x94>
 8005d58:	f019 0f01 	tst.w	r9, #1
 8005d5c:	d00e      	beq.n	8005d7c <__cvt+0x84>
 8005d5e:	eb00 0904 	add.w	r9, r0, r4
 8005d62:	2200      	movs	r2, #0
 8005d64:	2300      	movs	r3, #0
 8005d66:	4630      	mov	r0, r6
 8005d68:	4639      	mov	r1, r7
 8005d6a:	f7fa fead 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d6e:	b108      	cbz	r0, 8005d74 <__cvt+0x7c>
 8005d70:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d74:	2230      	movs	r2, #48	@ 0x30
 8005d76:	9b03      	ldr	r3, [sp, #12]
 8005d78:	454b      	cmp	r3, r9
 8005d7a:	d31e      	bcc.n	8005dba <__cvt+0xc2>
 8005d7c:	9b03      	ldr	r3, [sp, #12]
 8005d7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005d80:	1b5b      	subs	r3, r3, r5
 8005d82:	4628      	mov	r0, r5
 8005d84:	6013      	str	r3, [r2, #0]
 8005d86:	b004      	add	sp, #16
 8005d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005d90:	eb00 0904 	add.w	r9, r0, r4
 8005d94:	d1e5      	bne.n	8005d62 <__cvt+0x6a>
 8005d96:	7803      	ldrb	r3, [r0, #0]
 8005d98:	2b30      	cmp	r3, #48	@ 0x30
 8005d9a:	d10a      	bne.n	8005db2 <__cvt+0xba>
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	2300      	movs	r3, #0
 8005da0:	4630      	mov	r0, r6
 8005da2:	4639      	mov	r1, r7
 8005da4:	f7fa fe90 	bl	8000ac8 <__aeabi_dcmpeq>
 8005da8:	b918      	cbnz	r0, 8005db2 <__cvt+0xba>
 8005daa:	f1c4 0401 	rsb	r4, r4, #1
 8005dae:	f8ca 4000 	str.w	r4, [sl]
 8005db2:	f8da 3000 	ldr.w	r3, [sl]
 8005db6:	4499      	add	r9, r3
 8005db8:	e7d3      	b.n	8005d62 <__cvt+0x6a>
 8005dba:	1c59      	adds	r1, r3, #1
 8005dbc:	9103      	str	r1, [sp, #12]
 8005dbe:	701a      	strb	r2, [r3, #0]
 8005dc0:	e7d9      	b.n	8005d76 <__cvt+0x7e>

08005dc2 <__exponent>:
 8005dc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dc4:	2900      	cmp	r1, #0
 8005dc6:	bfba      	itte	lt
 8005dc8:	4249      	neglt	r1, r1
 8005dca:	232d      	movlt	r3, #45	@ 0x2d
 8005dcc:	232b      	movge	r3, #43	@ 0x2b
 8005dce:	2909      	cmp	r1, #9
 8005dd0:	7002      	strb	r2, [r0, #0]
 8005dd2:	7043      	strb	r3, [r0, #1]
 8005dd4:	dd29      	ble.n	8005e2a <__exponent+0x68>
 8005dd6:	f10d 0307 	add.w	r3, sp, #7
 8005dda:	461d      	mov	r5, r3
 8005ddc:	270a      	movs	r7, #10
 8005dde:	461a      	mov	r2, r3
 8005de0:	fbb1 f6f7 	udiv	r6, r1, r7
 8005de4:	fb07 1416 	mls	r4, r7, r6, r1
 8005de8:	3430      	adds	r4, #48	@ 0x30
 8005dea:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005dee:	460c      	mov	r4, r1
 8005df0:	2c63      	cmp	r4, #99	@ 0x63
 8005df2:	f103 33ff 	add.w	r3, r3, #4294967295
 8005df6:	4631      	mov	r1, r6
 8005df8:	dcf1      	bgt.n	8005dde <__exponent+0x1c>
 8005dfa:	3130      	adds	r1, #48	@ 0x30
 8005dfc:	1e94      	subs	r4, r2, #2
 8005dfe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005e02:	1c41      	adds	r1, r0, #1
 8005e04:	4623      	mov	r3, r4
 8005e06:	42ab      	cmp	r3, r5
 8005e08:	d30a      	bcc.n	8005e20 <__exponent+0x5e>
 8005e0a:	f10d 0309 	add.w	r3, sp, #9
 8005e0e:	1a9b      	subs	r3, r3, r2
 8005e10:	42ac      	cmp	r4, r5
 8005e12:	bf88      	it	hi
 8005e14:	2300      	movhi	r3, #0
 8005e16:	3302      	adds	r3, #2
 8005e18:	4403      	add	r3, r0
 8005e1a:	1a18      	subs	r0, r3, r0
 8005e1c:	b003      	add	sp, #12
 8005e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e20:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005e24:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005e28:	e7ed      	b.n	8005e06 <__exponent+0x44>
 8005e2a:	2330      	movs	r3, #48	@ 0x30
 8005e2c:	3130      	adds	r1, #48	@ 0x30
 8005e2e:	7083      	strb	r3, [r0, #2]
 8005e30:	70c1      	strb	r1, [r0, #3]
 8005e32:	1d03      	adds	r3, r0, #4
 8005e34:	e7f1      	b.n	8005e1a <__exponent+0x58>
	...

08005e38 <_printf_float>:
 8005e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e3c:	b08d      	sub	sp, #52	@ 0x34
 8005e3e:	460c      	mov	r4, r1
 8005e40:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005e44:	4616      	mov	r6, r2
 8005e46:	461f      	mov	r7, r3
 8005e48:	4605      	mov	r5, r0
 8005e4a:	f000 fccb 	bl	80067e4 <_localeconv_r>
 8005e4e:	6803      	ldr	r3, [r0, #0]
 8005e50:	9304      	str	r3, [sp, #16]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fa fa0c 	bl	8000270 <strlen>
 8005e58:	2300      	movs	r3, #0
 8005e5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e5c:	f8d8 3000 	ldr.w	r3, [r8]
 8005e60:	9005      	str	r0, [sp, #20]
 8005e62:	3307      	adds	r3, #7
 8005e64:	f023 0307 	bic.w	r3, r3, #7
 8005e68:	f103 0208 	add.w	r2, r3, #8
 8005e6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005e70:	f8d4 b000 	ldr.w	fp, [r4]
 8005e74:	f8c8 2000 	str.w	r2, [r8]
 8005e78:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e7c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005e80:	9307      	str	r3, [sp, #28]
 8005e82:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e86:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005e8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e8e:	4b9c      	ldr	r3, [pc, #624]	@ (8006100 <_printf_float+0x2c8>)
 8005e90:	f04f 32ff 	mov.w	r2, #4294967295
 8005e94:	f7fa fe4a 	bl	8000b2c <__aeabi_dcmpun>
 8005e98:	bb70      	cbnz	r0, 8005ef8 <_printf_float+0xc0>
 8005e9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e9e:	4b98      	ldr	r3, [pc, #608]	@ (8006100 <_printf_float+0x2c8>)
 8005ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ea4:	f7fa fe24 	bl	8000af0 <__aeabi_dcmple>
 8005ea8:	bb30      	cbnz	r0, 8005ef8 <_printf_float+0xc0>
 8005eaa:	2200      	movs	r2, #0
 8005eac:	2300      	movs	r3, #0
 8005eae:	4640      	mov	r0, r8
 8005eb0:	4649      	mov	r1, r9
 8005eb2:	f7fa fe13 	bl	8000adc <__aeabi_dcmplt>
 8005eb6:	b110      	cbz	r0, 8005ebe <_printf_float+0x86>
 8005eb8:	232d      	movs	r3, #45	@ 0x2d
 8005eba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ebe:	4a91      	ldr	r2, [pc, #580]	@ (8006104 <_printf_float+0x2cc>)
 8005ec0:	4b91      	ldr	r3, [pc, #580]	@ (8006108 <_printf_float+0x2d0>)
 8005ec2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005ec6:	bf94      	ite	ls
 8005ec8:	4690      	movls	r8, r2
 8005eca:	4698      	movhi	r8, r3
 8005ecc:	2303      	movs	r3, #3
 8005ece:	6123      	str	r3, [r4, #16]
 8005ed0:	f02b 0304 	bic.w	r3, fp, #4
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	f04f 0900 	mov.w	r9, #0
 8005eda:	9700      	str	r7, [sp, #0]
 8005edc:	4633      	mov	r3, r6
 8005ede:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005ee0:	4621      	mov	r1, r4
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	f000 f9d2 	bl	800628c <_printf_common>
 8005ee8:	3001      	adds	r0, #1
 8005eea:	f040 808d 	bne.w	8006008 <_printf_float+0x1d0>
 8005eee:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef2:	b00d      	add	sp, #52	@ 0x34
 8005ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ef8:	4642      	mov	r2, r8
 8005efa:	464b      	mov	r3, r9
 8005efc:	4640      	mov	r0, r8
 8005efe:	4649      	mov	r1, r9
 8005f00:	f7fa fe14 	bl	8000b2c <__aeabi_dcmpun>
 8005f04:	b140      	cbz	r0, 8005f18 <_printf_float+0xe0>
 8005f06:	464b      	mov	r3, r9
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	bfbc      	itt	lt
 8005f0c:	232d      	movlt	r3, #45	@ 0x2d
 8005f0e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005f12:	4a7e      	ldr	r2, [pc, #504]	@ (800610c <_printf_float+0x2d4>)
 8005f14:	4b7e      	ldr	r3, [pc, #504]	@ (8006110 <_printf_float+0x2d8>)
 8005f16:	e7d4      	b.n	8005ec2 <_printf_float+0x8a>
 8005f18:	6863      	ldr	r3, [r4, #4]
 8005f1a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005f1e:	9206      	str	r2, [sp, #24]
 8005f20:	1c5a      	adds	r2, r3, #1
 8005f22:	d13b      	bne.n	8005f9c <_printf_float+0x164>
 8005f24:	2306      	movs	r3, #6
 8005f26:	6063      	str	r3, [r4, #4]
 8005f28:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	6022      	str	r2, [r4, #0]
 8005f30:	9303      	str	r3, [sp, #12]
 8005f32:	ab0a      	add	r3, sp, #40	@ 0x28
 8005f34:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005f38:	ab09      	add	r3, sp, #36	@ 0x24
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	6861      	ldr	r1, [r4, #4]
 8005f3e:	ec49 8b10 	vmov	d0, r8, r9
 8005f42:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005f46:	4628      	mov	r0, r5
 8005f48:	f7ff fed6 	bl	8005cf8 <__cvt>
 8005f4c:	9b06      	ldr	r3, [sp, #24]
 8005f4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005f50:	2b47      	cmp	r3, #71	@ 0x47
 8005f52:	4680      	mov	r8, r0
 8005f54:	d129      	bne.n	8005faa <_printf_float+0x172>
 8005f56:	1cc8      	adds	r0, r1, #3
 8005f58:	db02      	blt.n	8005f60 <_printf_float+0x128>
 8005f5a:	6863      	ldr	r3, [r4, #4]
 8005f5c:	4299      	cmp	r1, r3
 8005f5e:	dd41      	ble.n	8005fe4 <_printf_float+0x1ac>
 8005f60:	f1aa 0a02 	sub.w	sl, sl, #2
 8005f64:	fa5f fa8a 	uxtb.w	sl, sl
 8005f68:	3901      	subs	r1, #1
 8005f6a:	4652      	mov	r2, sl
 8005f6c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005f70:	9109      	str	r1, [sp, #36]	@ 0x24
 8005f72:	f7ff ff26 	bl	8005dc2 <__exponent>
 8005f76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f78:	1813      	adds	r3, r2, r0
 8005f7a:	2a01      	cmp	r2, #1
 8005f7c:	4681      	mov	r9, r0
 8005f7e:	6123      	str	r3, [r4, #16]
 8005f80:	dc02      	bgt.n	8005f88 <_printf_float+0x150>
 8005f82:	6822      	ldr	r2, [r4, #0]
 8005f84:	07d2      	lsls	r2, r2, #31
 8005f86:	d501      	bpl.n	8005f8c <_printf_float+0x154>
 8005f88:	3301      	adds	r3, #1
 8005f8a:	6123      	str	r3, [r4, #16]
 8005f8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d0a2      	beq.n	8005eda <_printf_float+0xa2>
 8005f94:	232d      	movs	r3, #45	@ 0x2d
 8005f96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f9a:	e79e      	b.n	8005eda <_printf_float+0xa2>
 8005f9c:	9a06      	ldr	r2, [sp, #24]
 8005f9e:	2a47      	cmp	r2, #71	@ 0x47
 8005fa0:	d1c2      	bne.n	8005f28 <_printf_float+0xf0>
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1c0      	bne.n	8005f28 <_printf_float+0xf0>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e7bd      	b.n	8005f26 <_printf_float+0xee>
 8005faa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005fae:	d9db      	bls.n	8005f68 <_printf_float+0x130>
 8005fb0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005fb4:	d118      	bne.n	8005fe8 <_printf_float+0x1b0>
 8005fb6:	2900      	cmp	r1, #0
 8005fb8:	6863      	ldr	r3, [r4, #4]
 8005fba:	dd0b      	ble.n	8005fd4 <_printf_float+0x19c>
 8005fbc:	6121      	str	r1, [r4, #16]
 8005fbe:	b913      	cbnz	r3, 8005fc6 <_printf_float+0x18e>
 8005fc0:	6822      	ldr	r2, [r4, #0]
 8005fc2:	07d0      	lsls	r0, r2, #31
 8005fc4:	d502      	bpl.n	8005fcc <_printf_float+0x194>
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	440b      	add	r3, r1
 8005fca:	6123      	str	r3, [r4, #16]
 8005fcc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005fce:	f04f 0900 	mov.w	r9, #0
 8005fd2:	e7db      	b.n	8005f8c <_printf_float+0x154>
 8005fd4:	b913      	cbnz	r3, 8005fdc <_printf_float+0x1a4>
 8005fd6:	6822      	ldr	r2, [r4, #0]
 8005fd8:	07d2      	lsls	r2, r2, #31
 8005fda:	d501      	bpl.n	8005fe0 <_printf_float+0x1a8>
 8005fdc:	3302      	adds	r3, #2
 8005fde:	e7f4      	b.n	8005fca <_printf_float+0x192>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e7f2      	b.n	8005fca <_printf_float+0x192>
 8005fe4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005fe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fea:	4299      	cmp	r1, r3
 8005fec:	db05      	blt.n	8005ffa <_printf_float+0x1c2>
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	6121      	str	r1, [r4, #16]
 8005ff2:	07d8      	lsls	r0, r3, #31
 8005ff4:	d5ea      	bpl.n	8005fcc <_printf_float+0x194>
 8005ff6:	1c4b      	adds	r3, r1, #1
 8005ff8:	e7e7      	b.n	8005fca <_printf_float+0x192>
 8005ffa:	2900      	cmp	r1, #0
 8005ffc:	bfd4      	ite	le
 8005ffe:	f1c1 0202 	rsble	r2, r1, #2
 8006002:	2201      	movgt	r2, #1
 8006004:	4413      	add	r3, r2
 8006006:	e7e0      	b.n	8005fca <_printf_float+0x192>
 8006008:	6823      	ldr	r3, [r4, #0]
 800600a:	055a      	lsls	r2, r3, #21
 800600c:	d407      	bmi.n	800601e <_printf_float+0x1e6>
 800600e:	6923      	ldr	r3, [r4, #16]
 8006010:	4642      	mov	r2, r8
 8006012:	4631      	mov	r1, r6
 8006014:	4628      	mov	r0, r5
 8006016:	47b8      	blx	r7
 8006018:	3001      	adds	r0, #1
 800601a:	d12b      	bne.n	8006074 <_printf_float+0x23c>
 800601c:	e767      	b.n	8005eee <_printf_float+0xb6>
 800601e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006022:	f240 80dd 	bls.w	80061e0 <_printf_float+0x3a8>
 8006026:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800602a:	2200      	movs	r2, #0
 800602c:	2300      	movs	r3, #0
 800602e:	f7fa fd4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006032:	2800      	cmp	r0, #0
 8006034:	d033      	beq.n	800609e <_printf_float+0x266>
 8006036:	4a37      	ldr	r2, [pc, #220]	@ (8006114 <_printf_float+0x2dc>)
 8006038:	2301      	movs	r3, #1
 800603a:	4631      	mov	r1, r6
 800603c:	4628      	mov	r0, r5
 800603e:	47b8      	blx	r7
 8006040:	3001      	adds	r0, #1
 8006042:	f43f af54 	beq.w	8005eee <_printf_float+0xb6>
 8006046:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800604a:	4543      	cmp	r3, r8
 800604c:	db02      	blt.n	8006054 <_printf_float+0x21c>
 800604e:	6823      	ldr	r3, [r4, #0]
 8006050:	07d8      	lsls	r0, r3, #31
 8006052:	d50f      	bpl.n	8006074 <_printf_float+0x23c>
 8006054:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006058:	4631      	mov	r1, r6
 800605a:	4628      	mov	r0, r5
 800605c:	47b8      	blx	r7
 800605e:	3001      	adds	r0, #1
 8006060:	f43f af45 	beq.w	8005eee <_printf_float+0xb6>
 8006064:	f04f 0900 	mov.w	r9, #0
 8006068:	f108 38ff 	add.w	r8, r8, #4294967295
 800606c:	f104 0a1a 	add.w	sl, r4, #26
 8006070:	45c8      	cmp	r8, r9
 8006072:	dc09      	bgt.n	8006088 <_printf_float+0x250>
 8006074:	6823      	ldr	r3, [r4, #0]
 8006076:	079b      	lsls	r3, r3, #30
 8006078:	f100 8103 	bmi.w	8006282 <_printf_float+0x44a>
 800607c:	68e0      	ldr	r0, [r4, #12]
 800607e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006080:	4298      	cmp	r0, r3
 8006082:	bfb8      	it	lt
 8006084:	4618      	movlt	r0, r3
 8006086:	e734      	b.n	8005ef2 <_printf_float+0xba>
 8006088:	2301      	movs	r3, #1
 800608a:	4652      	mov	r2, sl
 800608c:	4631      	mov	r1, r6
 800608e:	4628      	mov	r0, r5
 8006090:	47b8      	blx	r7
 8006092:	3001      	adds	r0, #1
 8006094:	f43f af2b 	beq.w	8005eee <_printf_float+0xb6>
 8006098:	f109 0901 	add.w	r9, r9, #1
 800609c:	e7e8      	b.n	8006070 <_printf_float+0x238>
 800609e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	dc39      	bgt.n	8006118 <_printf_float+0x2e0>
 80060a4:	4a1b      	ldr	r2, [pc, #108]	@ (8006114 <_printf_float+0x2dc>)
 80060a6:	2301      	movs	r3, #1
 80060a8:	4631      	mov	r1, r6
 80060aa:	4628      	mov	r0, r5
 80060ac:	47b8      	blx	r7
 80060ae:	3001      	adds	r0, #1
 80060b0:	f43f af1d 	beq.w	8005eee <_printf_float+0xb6>
 80060b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80060b8:	ea59 0303 	orrs.w	r3, r9, r3
 80060bc:	d102      	bne.n	80060c4 <_printf_float+0x28c>
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	07d9      	lsls	r1, r3, #31
 80060c2:	d5d7      	bpl.n	8006074 <_printf_float+0x23c>
 80060c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060c8:	4631      	mov	r1, r6
 80060ca:	4628      	mov	r0, r5
 80060cc:	47b8      	blx	r7
 80060ce:	3001      	adds	r0, #1
 80060d0:	f43f af0d 	beq.w	8005eee <_printf_float+0xb6>
 80060d4:	f04f 0a00 	mov.w	sl, #0
 80060d8:	f104 0b1a 	add.w	fp, r4, #26
 80060dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060de:	425b      	negs	r3, r3
 80060e0:	4553      	cmp	r3, sl
 80060e2:	dc01      	bgt.n	80060e8 <_printf_float+0x2b0>
 80060e4:	464b      	mov	r3, r9
 80060e6:	e793      	b.n	8006010 <_printf_float+0x1d8>
 80060e8:	2301      	movs	r3, #1
 80060ea:	465a      	mov	r2, fp
 80060ec:	4631      	mov	r1, r6
 80060ee:	4628      	mov	r0, r5
 80060f0:	47b8      	blx	r7
 80060f2:	3001      	adds	r0, #1
 80060f4:	f43f aefb 	beq.w	8005eee <_printf_float+0xb6>
 80060f8:	f10a 0a01 	add.w	sl, sl, #1
 80060fc:	e7ee      	b.n	80060dc <_printf_float+0x2a4>
 80060fe:	bf00      	nop
 8006100:	7fefffff 	.word	0x7fefffff
 8006104:	080092e0 	.word	0x080092e0
 8006108:	080092e4 	.word	0x080092e4
 800610c:	080092e8 	.word	0x080092e8
 8006110:	080092ec 	.word	0x080092ec
 8006114:	080092f0 	.word	0x080092f0
 8006118:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800611a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800611e:	4553      	cmp	r3, sl
 8006120:	bfa8      	it	ge
 8006122:	4653      	movge	r3, sl
 8006124:	2b00      	cmp	r3, #0
 8006126:	4699      	mov	r9, r3
 8006128:	dc36      	bgt.n	8006198 <_printf_float+0x360>
 800612a:	f04f 0b00 	mov.w	fp, #0
 800612e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006132:	f104 021a 	add.w	r2, r4, #26
 8006136:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006138:	9306      	str	r3, [sp, #24]
 800613a:	eba3 0309 	sub.w	r3, r3, r9
 800613e:	455b      	cmp	r3, fp
 8006140:	dc31      	bgt.n	80061a6 <_printf_float+0x36e>
 8006142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006144:	459a      	cmp	sl, r3
 8006146:	dc3a      	bgt.n	80061be <_printf_float+0x386>
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	07da      	lsls	r2, r3, #31
 800614c:	d437      	bmi.n	80061be <_printf_float+0x386>
 800614e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006150:	ebaa 0903 	sub.w	r9, sl, r3
 8006154:	9b06      	ldr	r3, [sp, #24]
 8006156:	ebaa 0303 	sub.w	r3, sl, r3
 800615a:	4599      	cmp	r9, r3
 800615c:	bfa8      	it	ge
 800615e:	4699      	movge	r9, r3
 8006160:	f1b9 0f00 	cmp.w	r9, #0
 8006164:	dc33      	bgt.n	80061ce <_printf_float+0x396>
 8006166:	f04f 0800 	mov.w	r8, #0
 800616a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800616e:	f104 0b1a 	add.w	fp, r4, #26
 8006172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006174:	ebaa 0303 	sub.w	r3, sl, r3
 8006178:	eba3 0309 	sub.w	r3, r3, r9
 800617c:	4543      	cmp	r3, r8
 800617e:	f77f af79 	ble.w	8006074 <_printf_float+0x23c>
 8006182:	2301      	movs	r3, #1
 8006184:	465a      	mov	r2, fp
 8006186:	4631      	mov	r1, r6
 8006188:	4628      	mov	r0, r5
 800618a:	47b8      	blx	r7
 800618c:	3001      	adds	r0, #1
 800618e:	f43f aeae 	beq.w	8005eee <_printf_float+0xb6>
 8006192:	f108 0801 	add.w	r8, r8, #1
 8006196:	e7ec      	b.n	8006172 <_printf_float+0x33a>
 8006198:	4642      	mov	r2, r8
 800619a:	4631      	mov	r1, r6
 800619c:	4628      	mov	r0, r5
 800619e:	47b8      	blx	r7
 80061a0:	3001      	adds	r0, #1
 80061a2:	d1c2      	bne.n	800612a <_printf_float+0x2f2>
 80061a4:	e6a3      	b.n	8005eee <_printf_float+0xb6>
 80061a6:	2301      	movs	r3, #1
 80061a8:	4631      	mov	r1, r6
 80061aa:	4628      	mov	r0, r5
 80061ac:	9206      	str	r2, [sp, #24]
 80061ae:	47b8      	blx	r7
 80061b0:	3001      	adds	r0, #1
 80061b2:	f43f ae9c 	beq.w	8005eee <_printf_float+0xb6>
 80061b6:	9a06      	ldr	r2, [sp, #24]
 80061b8:	f10b 0b01 	add.w	fp, fp, #1
 80061bc:	e7bb      	b.n	8006136 <_printf_float+0x2fe>
 80061be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061c2:	4631      	mov	r1, r6
 80061c4:	4628      	mov	r0, r5
 80061c6:	47b8      	blx	r7
 80061c8:	3001      	adds	r0, #1
 80061ca:	d1c0      	bne.n	800614e <_printf_float+0x316>
 80061cc:	e68f      	b.n	8005eee <_printf_float+0xb6>
 80061ce:	9a06      	ldr	r2, [sp, #24]
 80061d0:	464b      	mov	r3, r9
 80061d2:	4442      	add	r2, r8
 80061d4:	4631      	mov	r1, r6
 80061d6:	4628      	mov	r0, r5
 80061d8:	47b8      	blx	r7
 80061da:	3001      	adds	r0, #1
 80061dc:	d1c3      	bne.n	8006166 <_printf_float+0x32e>
 80061de:	e686      	b.n	8005eee <_printf_float+0xb6>
 80061e0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80061e4:	f1ba 0f01 	cmp.w	sl, #1
 80061e8:	dc01      	bgt.n	80061ee <_printf_float+0x3b6>
 80061ea:	07db      	lsls	r3, r3, #31
 80061ec:	d536      	bpl.n	800625c <_printf_float+0x424>
 80061ee:	2301      	movs	r3, #1
 80061f0:	4642      	mov	r2, r8
 80061f2:	4631      	mov	r1, r6
 80061f4:	4628      	mov	r0, r5
 80061f6:	47b8      	blx	r7
 80061f8:	3001      	adds	r0, #1
 80061fa:	f43f ae78 	beq.w	8005eee <_printf_float+0xb6>
 80061fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006202:	4631      	mov	r1, r6
 8006204:	4628      	mov	r0, r5
 8006206:	47b8      	blx	r7
 8006208:	3001      	adds	r0, #1
 800620a:	f43f ae70 	beq.w	8005eee <_printf_float+0xb6>
 800620e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006212:	2200      	movs	r2, #0
 8006214:	2300      	movs	r3, #0
 8006216:	f10a 3aff 	add.w	sl, sl, #4294967295
 800621a:	f7fa fc55 	bl	8000ac8 <__aeabi_dcmpeq>
 800621e:	b9c0      	cbnz	r0, 8006252 <_printf_float+0x41a>
 8006220:	4653      	mov	r3, sl
 8006222:	f108 0201 	add.w	r2, r8, #1
 8006226:	4631      	mov	r1, r6
 8006228:	4628      	mov	r0, r5
 800622a:	47b8      	blx	r7
 800622c:	3001      	adds	r0, #1
 800622e:	d10c      	bne.n	800624a <_printf_float+0x412>
 8006230:	e65d      	b.n	8005eee <_printf_float+0xb6>
 8006232:	2301      	movs	r3, #1
 8006234:	465a      	mov	r2, fp
 8006236:	4631      	mov	r1, r6
 8006238:	4628      	mov	r0, r5
 800623a:	47b8      	blx	r7
 800623c:	3001      	adds	r0, #1
 800623e:	f43f ae56 	beq.w	8005eee <_printf_float+0xb6>
 8006242:	f108 0801 	add.w	r8, r8, #1
 8006246:	45d0      	cmp	r8, sl
 8006248:	dbf3      	blt.n	8006232 <_printf_float+0x3fa>
 800624a:	464b      	mov	r3, r9
 800624c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006250:	e6df      	b.n	8006012 <_printf_float+0x1da>
 8006252:	f04f 0800 	mov.w	r8, #0
 8006256:	f104 0b1a 	add.w	fp, r4, #26
 800625a:	e7f4      	b.n	8006246 <_printf_float+0x40e>
 800625c:	2301      	movs	r3, #1
 800625e:	4642      	mov	r2, r8
 8006260:	e7e1      	b.n	8006226 <_printf_float+0x3ee>
 8006262:	2301      	movs	r3, #1
 8006264:	464a      	mov	r2, r9
 8006266:	4631      	mov	r1, r6
 8006268:	4628      	mov	r0, r5
 800626a:	47b8      	blx	r7
 800626c:	3001      	adds	r0, #1
 800626e:	f43f ae3e 	beq.w	8005eee <_printf_float+0xb6>
 8006272:	f108 0801 	add.w	r8, r8, #1
 8006276:	68e3      	ldr	r3, [r4, #12]
 8006278:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800627a:	1a5b      	subs	r3, r3, r1
 800627c:	4543      	cmp	r3, r8
 800627e:	dcf0      	bgt.n	8006262 <_printf_float+0x42a>
 8006280:	e6fc      	b.n	800607c <_printf_float+0x244>
 8006282:	f04f 0800 	mov.w	r8, #0
 8006286:	f104 0919 	add.w	r9, r4, #25
 800628a:	e7f4      	b.n	8006276 <_printf_float+0x43e>

0800628c <_printf_common>:
 800628c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006290:	4616      	mov	r6, r2
 8006292:	4698      	mov	r8, r3
 8006294:	688a      	ldr	r2, [r1, #8]
 8006296:	690b      	ldr	r3, [r1, #16]
 8006298:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800629c:	4293      	cmp	r3, r2
 800629e:	bfb8      	it	lt
 80062a0:	4613      	movlt	r3, r2
 80062a2:	6033      	str	r3, [r6, #0]
 80062a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80062a8:	4607      	mov	r7, r0
 80062aa:	460c      	mov	r4, r1
 80062ac:	b10a      	cbz	r2, 80062b2 <_printf_common+0x26>
 80062ae:	3301      	adds	r3, #1
 80062b0:	6033      	str	r3, [r6, #0]
 80062b2:	6823      	ldr	r3, [r4, #0]
 80062b4:	0699      	lsls	r1, r3, #26
 80062b6:	bf42      	ittt	mi
 80062b8:	6833      	ldrmi	r3, [r6, #0]
 80062ba:	3302      	addmi	r3, #2
 80062bc:	6033      	strmi	r3, [r6, #0]
 80062be:	6825      	ldr	r5, [r4, #0]
 80062c0:	f015 0506 	ands.w	r5, r5, #6
 80062c4:	d106      	bne.n	80062d4 <_printf_common+0x48>
 80062c6:	f104 0a19 	add.w	sl, r4, #25
 80062ca:	68e3      	ldr	r3, [r4, #12]
 80062cc:	6832      	ldr	r2, [r6, #0]
 80062ce:	1a9b      	subs	r3, r3, r2
 80062d0:	42ab      	cmp	r3, r5
 80062d2:	dc26      	bgt.n	8006322 <_printf_common+0x96>
 80062d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80062d8:	6822      	ldr	r2, [r4, #0]
 80062da:	3b00      	subs	r3, #0
 80062dc:	bf18      	it	ne
 80062de:	2301      	movne	r3, #1
 80062e0:	0692      	lsls	r2, r2, #26
 80062e2:	d42b      	bmi.n	800633c <_printf_common+0xb0>
 80062e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80062e8:	4641      	mov	r1, r8
 80062ea:	4638      	mov	r0, r7
 80062ec:	47c8      	blx	r9
 80062ee:	3001      	adds	r0, #1
 80062f0:	d01e      	beq.n	8006330 <_printf_common+0xa4>
 80062f2:	6823      	ldr	r3, [r4, #0]
 80062f4:	6922      	ldr	r2, [r4, #16]
 80062f6:	f003 0306 	and.w	r3, r3, #6
 80062fa:	2b04      	cmp	r3, #4
 80062fc:	bf02      	ittt	eq
 80062fe:	68e5      	ldreq	r5, [r4, #12]
 8006300:	6833      	ldreq	r3, [r6, #0]
 8006302:	1aed      	subeq	r5, r5, r3
 8006304:	68a3      	ldr	r3, [r4, #8]
 8006306:	bf0c      	ite	eq
 8006308:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800630c:	2500      	movne	r5, #0
 800630e:	4293      	cmp	r3, r2
 8006310:	bfc4      	itt	gt
 8006312:	1a9b      	subgt	r3, r3, r2
 8006314:	18ed      	addgt	r5, r5, r3
 8006316:	2600      	movs	r6, #0
 8006318:	341a      	adds	r4, #26
 800631a:	42b5      	cmp	r5, r6
 800631c:	d11a      	bne.n	8006354 <_printf_common+0xc8>
 800631e:	2000      	movs	r0, #0
 8006320:	e008      	b.n	8006334 <_printf_common+0xa8>
 8006322:	2301      	movs	r3, #1
 8006324:	4652      	mov	r2, sl
 8006326:	4641      	mov	r1, r8
 8006328:	4638      	mov	r0, r7
 800632a:	47c8      	blx	r9
 800632c:	3001      	adds	r0, #1
 800632e:	d103      	bne.n	8006338 <_printf_common+0xac>
 8006330:	f04f 30ff 	mov.w	r0, #4294967295
 8006334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006338:	3501      	adds	r5, #1
 800633a:	e7c6      	b.n	80062ca <_printf_common+0x3e>
 800633c:	18e1      	adds	r1, r4, r3
 800633e:	1c5a      	adds	r2, r3, #1
 8006340:	2030      	movs	r0, #48	@ 0x30
 8006342:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006346:	4422      	add	r2, r4
 8006348:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800634c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006350:	3302      	adds	r3, #2
 8006352:	e7c7      	b.n	80062e4 <_printf_common+0x58>
 8006354:	2301      	movs	r3, #1
 8006356:	4622      	mov	r2, r4
 8006358:	4641      	mov	r1, r8
 800635a:	4638      	mov	r0, r7
 800635c:	47c8      	blx	r9
 800635e:	3001      	adds	r0, #1
 8006360:	d0e6      	beq.n	8006330 <_printf_common+0xa4>
 8006362:	3601      	adds	r6, #1
 8006364:	e7d9      	b.n	800631a <_printf_common+0x8e>
	...

08006368 <_printf_i>:
 8006368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800636c:	7e0f      	ldrb	r7, [r1, #24]
 800636e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006370:	2f78      	cmp	r7, #120	@ 0x78
 8006372:	4691      	mov	r9, r2
 8006374:	4680      	mov	r8, r0
 8006376:	460c      	mov	r4, r1
 8006378:	469a      	mov	sl, r3
 800637a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800637e:	d807      	bhi.n	8006390 <_printf_i+0x28>
 8006380:	2f62      	cmp	r7, #98	@ 0x62
 8006382:	d80a      	bhi.n	800639a <_printf_i+0x32>
 8006384:	2f00      	cmp	r7, #0
 8006386:	f000 80d2 	beq.w	800652e <_printf_i+0x1c6>
 800638a:	2f58      	cmp	r7, #88	@ 0x58
 800638c:	f000 80b9 	beq.w	8006502 <_printf_i+0x19a>
 8006390:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006394:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006398:	e03a      	b.n	8006410 <_printf_i+0xa8>
 800639a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800639e:	2b15      	cmp	r3, #21
 80063a0:	d8f6      	bhi.n	8006390 <_printf_i+0x28>
 80063a2:	a101      	add	r1, pc, #4	@ (adr r1, 80063a8 <_printf_i+0x40>)
 80063a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063a8:	08006401 	.word	0x08006401
 80063ac:	08006415 	.word	0x08006415
 80063b0:	08006391 	.word	0x08006391
 80063b4:	08006391 	.word	0x08006391
 80063b8:	08006391 	.word	0x08006391
 80063bc:	08006391 	.word	0x08006391
 80063c0:	08006415 	.word	0x08006415
 80063c4:	08006391 	.word	0x08006391
 80063c8:	08006391 	.word	0x08006391
 80063cc:	08006391 	.word	0x08006391
 80063d0:	08006391 	.word	0x08006391
 80063d4:	08006515 	.word	0x08006515
 80063d8:	0800643f 	.word	0x0800643f
 80063dc:	080064cf 	.word	0x080064cf
 80063e0:	08006391 	.word	0x08006391
 80063e4:	08006391 	.word	0x08006391
 80063e8:	08006537 	.word	0x08006537
 80063ec:	08006391 	.word	0x08006391
 80063f0:	0800643f 	.word	0x0800643f
 80063f4:	08006391 	.word	0x08006391
 80063f8:	08006391 	.word	0x08006391
 80063fc:	080064d7 	.word	0x080064d7
 8006400:	6833      	ldr	r3, [r6, #0]
 8006402:	1d1a      	adds	r2, r3, #4
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6032      	str	r2, [r6, #0]
 8006408:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800640c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006410:	2301      	movs	r3, #1
 8006412:	e09d      	b.n	8006550 <_printf_i+0x1e8>
 8006414:	6833      	ldr	r3, [r6, #0]
 8006416:	6820      	ldr	r0, [r4, #0]
 8006418:	1d19      	adds	r1, r3, #4
 800641a:	6031      	str	r1, [r6, #0]
 800641c:	0606      	lsls	r6, r0, #24
 800641e:	d501      	bpl.n	8006424 <_printf_i+0xbc>
 8006420:	681d      	ldr	r5, [r3, #0]
 8006422:	e003      	b.n	800642c <_printf_i+0xc4>
 8006424:	0645      	lsls	r5, r0, #25
 8006426:	d5fb      	bpl.n	8006420 <_printf_i+0xb8>
 8006428:	f9b3 5000 	ldrsh.w	r5, [r3]
 800642c:	2d00      	cmp	r5, #0
 800642e:	da03      	bge.n	8006438 <_printf_i+0xd0>
 8006430:	232d      	movs	r3, #45	@ 0x2d
 8006432:	426d      	negs	r5, r5
 8006434:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006438:	4859      	ldr	r0, [pc, #356]	@ (80065a0 <_printf_i+0x238>)
 800643a:	230a      	movs	r3, #10
 800643c:	e011      	b.n	8006462 <_printf_i+0xfa>
 800643e:	6821      	ldr	r1, [r4, #0]
 8006440:	6833      	ldr	r3, [r6, #0]
 8006442:	0608      	lsls	r0, r1, #24
 8006444:	f853 5b04 	ldr.w	r5, [r3], #4
 8006448:	d402      	bmi.n	8006450 <_printf_i+0xe8>
 800644a:	0649      	lsls	r1, r1, #25
 800644c:	bf48      	it	mi
 800644e:	b2ad      	uxthmi	r5, r5
 8006450:	2f6f      	cmp	r7, #111	@ 0x6f
 8006452:	4853      	ldr	r0, [pc, #332]	@ (80065a0 <_printf_i+0x238>)
 8006454:	6033      	str	r3, [r6, #0]
 8006456:	bf14      	ite	ne
 8006458:	230a      	movne	r3, #10
 800645a:	2308      	moveq	r3, #8
 800645c:	2100      	movs	r1, #0
 800645e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006462:	6866      	ldr	r6, [r4, #4]
 8006464:	60a6      	str	r6, [r4, #8]
 8006466:	2e00      	cmp	r6, #0
 8006468:	bfa2      	ittt	ge
 800646a:	6821      	ldrge	r1, [r4, #0]
 800646c:	f021 0104 	bicge.w	r1, r1, #4
 8006470:	6021      	strge	r1, [r4, #0]
 8006472:	b90d      	cbnz	r5, 8006478 <_printf_i+0x110>
 8006474:	2e00      	cmp	r6, #0
 8006476:	d04b      	beq.n	8006510 <_printf_i+0x1a8>
 8006478:	4616      	mov	r6, r2
 800647a:	fbb5 f1f3 	udiv	r1, r5, r3
 800647e:	fb03 5711 	mls	r7, r3, r1, r5
 8006482:	5dc7      	ldrb	r7, [r0, r7]
 8006484:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006488:	462f      	mov	r7, r5
 800648a:	42bb      	cmp	r3, r7
 800648c:	460d      	mov	r5, r1
 800648e:	d9f4      	bls.n	800647a <_printf_i+0x112>
 8006490:	2b08      	cmp	r3, #8
 8006492:	d10b      	bne.n	80064ac <_printf_i+0x144>
 8006494:	6823      	ldr	r3, [r4, #0]
 8006496:	07df      	lsls	r7, r3, #31
 8006498:	d508      	bpl.n	80064ac <_printf_i+0x144>
 800649a:	6923      	ldr	r3, [r4, #16]
 800649c:	6861      	ldr	r1, [r4, #4]
 800649e:	4299      	cmp	r1, r3
 80064a0:	bfde      	ittt	le
 80064a2:	2330      	movle	r3, #48	@ 0x30
 80064a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80064a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80064ac:	1b92      	subs	r2, r2, r6
 80064ae:	6122      	str	r2, [r4, #16]
 80064b0:	f8cd a000 	str.w	sl, [sp]
 80064b4:	464b      	mov	r3, r9
 80064b6:	aa03      	add	r2, sp, #12
 80064b8:	4621      	mov	r1, r4
 80064ba:	4640      	mov	r0, r8
 80064bc:	f7ff fee6 	bl	800628c <_printf_common>
 80064c0:	3001      	adds	r0, #1
 80064c2:	d14a      	bne.n	800655a <_printf_i+0x1f2>
 80064c4:	f04f 30ff 	mov.w	r0, #4294967295
 80064c8:	b004      	add	sp, #16
 80064ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ce:	6823      	ldr	r3, [r4, #0]
 80064d0:	f043 0320 	orr.w	r3, r3, #32
 80064d4:	6023      	str	r3, [r4, #0]
 80064d6:	4833      	ldr	r0, [pc, #204]	@ (80065a4 <_printf_i+0x23c>)
 80064d8:	2778      	movs	r7, #120	@ 0x78
 80064da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	6831      	ldr	r1, [r6, #0]
 80064e2:	061f      	lsls	r7, r3, #24
 80064e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80064e8:	d402      	bmi.n	80064f0 <_printf_i+0x188>
 80064ea:	065f      	lsls	r7, r3, #25
 80064ec:	bf48      	it	mi
 80064ee:	b2ad      	uxthmi	r5, r5
 80064f0:	6031      	str	r1, [r6, #0]
 80064f2:	07d9      	lsls	r1, r3, #31
 80064f4:	bf44      	itt	mi
 80064f6:	f043 0320 	orrmi.w	r3, r3, #32
 80064fa:	6023      	strmi	r3, [r4, #0]
 80064fc:	b11d      	cbz	r5, 8006506 <_printf_i+0x19e>
 80064fe:	2310      	movs	r3, #16
 8006500:	e7ac      	b.n	800645c <_printf_i+0xf4>
 8006502:	4827      	ldr	r0, [pc, #156]	@ (80065a0 <_printf_i+0x238>)
 8006504:	e7e9      	b.n	80064da <_printf_i+0x172>
 8006506:	6823      	ldr	r3, [r4, #0]
 8006508:	f023 0320 	bic.w	r3, r3, #32
 800650c:	6023      	str	r3, [r4, #0]
 800650e:	e7f6      	b.n	80064fe <_printf_i+0x196>
 8006510:	4616      	mov	r6, r2
 8006512:	e7bd      	b.n	8006490 <_printf_i+0x128>
 8006514:	6833      	ldr	r3, [r6, #0]
 8006516:	6825      	ldr	r5, [r4, #0]
 8006518:	6961      	ldr	r1, [r4, #20]
 800651a:	1d18      	adds	r0, r3, #4
 800651c:	6030      	str	r0, [r6, #0]
 800651e:	062e      	lsls	r6, r5, #24
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	d501      	bpl.n	8006528 <_printf_i+0x1c0>
 8006524:	6019      	str	r1, [r3, #0]
 8006526:	e002      	b.n	800652e <_printf_i+0x1c6>
 8006528:	0668      	lsls	r0, r5, #25
 800652a:	d5fb      	bpl.n	8006524 <_printf_i+0x1bc>
 800652c:	8019      	strh	r1, [r3, #0]
 800652e:	2300      	movs	r3, #0
 8006530:	6123      	str	r3, [r4, #16]
 8006532:	4616      	mov	r6, r2
 8006534:	e7bc      	b.n	80064b0 <_printf_i+0x148>
 8006536:	6833      	ldr	r3, [r6, #0]
 8006538:	1d1a      	adds	r2, r3, #4
 800653a:	6032      	str	r2, [r6, #0]
 800653c:	681e      	ldr	r6, [r3, #0]
 800653e:	6862      	ldr	r2, [r4, #4]
 8006540:	2100      	movs	r1, #0
 8006542:	4630      	mov	r0, r6
 8006544:	f7f9 fe44 	bl	80001d0 <memchr>
 8006548:	b108      	cbz	r0, 800654e <_printf_i+0x1e6>
 800654a:	1b80      	subs	r0, r0, r6
 800654c:	6060      	str	r0, [r4, #4]
 800654e:	6863      	ldr	r3, [r4, #4]
 8006550:	6123      	str	r3, [r4, #16]
 8006552:	2300      	movs	r3, #0
 8006554:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006558:	e7aa      	b.n	80064b0 <_printf_i+0x148>
 800655a:	6923      	ldr	r3, [r4, #16]
 800655c:	4632      	mov	r2, r6
 800655e:	4649      	mov	r1, r9
 8006560:	4640      	mov	r0, r8
 8006562:	47d0      	blx	sl
 8006564:	3001      	adds	r0, #1
 8006566:	d0ad      	beq.n	80064c4 <_printf_i+0x15c>
 8006568:	6823      	ldr	r3, [r4, #0]
 800656a:	079b      	lsls	r3, r3, #30
 800656c:	d413      	bmi.n	8006596 <_printf_i+0x22e>
 800656e:	68e0      	ldr	r0, [r4, #12]
 8006570:	9b03      	ldr	r3, [sp, #12]
 8006572:	4298      	cmp	r0, r3
 8006574:	bfb8      	it	lt
 8006576:	4618      	movlt	r0, r3
 8006578:	e7a6      	b.n	80064c8 <_printf_i+0x160>
 800657a:	2301      	movs	r3, #1
 800657c:	4632      	mov	r2, r6
 800657e:	4649      	mov	r1, r9
 8006580:	4640      	mov	r0, r8
 8006582:	47d0      	blx	sl
 8006584:	3001      	adds	r0, #1
 8006586:	d09d      	beq.n	80064c4 <_printf_i+0x15c>
 8006588:	3501      	adds	r5, #1
 800658a:	68e3      	ldr	r3, [r4, #12]
 800658c:	9903      	ldr	r1, [sp, #12]
 800658e:	1a5b      	subs	r3, r3, r1
 8006590:	42ab      	cmp	r3, r5
 8006592:	dcf2      	bgt.n	800657a <_printf_i+0x212>
 8006594:	e7eb      	b.n	800656e <_printf_i+0x206>
 8006596:	2500      	movs	r5, #0
 8006598:	f104 0619 	add.w	r6, r4, #25
 800659c:	e7f5      	b.n	800658a <_printf_i+0x222>
 800659e:	bf00      	nop
 80065a0:	080092f2 	.word	0x080092f2
 80065a4:	08009303 	.word	0x08009303

080065a8 <std>:
 80065a8:	2300      	movs	r3, #0
 80065aa:	b510      	push	{r4, lr}
 80065ac:	4604      	mov	r4, r0
 80065ae:	e9c0 3300 	strd	r3, r3, [r0]
 80065b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065b6:	6083      	str	r3, [r0, #8]
 80065b8:	8181      	strh	r1, [r0, #12]
 80065ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80065bc:	81c2      	strh	r2, [r0, #14]
 80065be:	6183      	str	r3, [r0, #24]
 80065c0:	4619      	mov	r1, r3
 80065c2:	2208      	movs	r2, #8
 80065c4:	305c      	adds	r0, #92	@ 0x5c
 80065c6:	f000 f904 	bl	80067d2 <memset>
 80065ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006600 <std+0x58>)
 80065cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80065ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006604 <std+0x5c>)
 80065d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80065d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006608 <std+0x60>)
 80065d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80065d6:	4b0d      	ldr	r3, [pc, #52]	@ (800660c <std+0x64>)
 80065d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80065da:	4b0d      	ldr	r3, [pc, #52]	@ (8006610 <std+0x68>)
 80065dc:	6224      	str	r4, [r4, #32]
 80065de:	429c      	cmp	r4, r3
 80065e0:	d006      	beq.n	80065f0 <std+0x48>
 80065e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80065e6:	4294      	cmp	r4, r2
 80065e8:	d002      	beq.n	80065f0 <std+0x48>
 80065ea:	33d0      	adds	r3, #208	@ 0xd0
 80065ec:	429c      	cmp	r4, r3
 80065ee:	d105      	bne.n	80065fc <std+0x54>
 80065f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80065f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065f8:	f000 b968 	b.w	80068cc <__retarget_lock_init_recursive>
 80065fc:	bd10      	pop	{r4, pc}
 80065fe:	bf00      	nop
 8006600:	0800672d 	.word	0x0800672d
 8006604:	0800674f 	.word	0x0800674f
 8006608:	08006787 	.word	0x08006787
 800660c:	080067ab 	.word	0x080067ab
 8006610:	20000a10 	.word	0x20000a10

08006614 <stdio_exit_handler>:
 8006614:	4a02      	ldr	r2, [pc, #8]	@ (8006620 <stdio_exit_handler+0xc>)
 8006616:	4903      	ldr	r1, [pc, #12]	@ (8006624 <stdio_exit_handler+0x10>)
 8006618:	4803      	ldr	r0, [pc, #12]	@ (8006628 <stdio_exit_handler+0x14>)
 800661a:	f000 b869 	b.w	80066f0 <_fwalk_sglue>
 800661e:	bf00      	nop
 8006620:	2000000c 	.word	0x2000000c
 8006624:	08007f95 	.word	0x08007f95
 8006628:	2000001c 	.word	0x2000001c

0800662c <cleanup_stdio>:
 800662c:	6841      	ldr	r1, [r0, #4]
 800662e:	4b0c      	ldr	r3, [pc, #48]	@ (8006660 <cleanup_stdio+0x34>)
 8006630:	4299      	cmp	r1, r3
 8006632:	b510      	push	{r4, lr}
 8006634:	4604      	mov	r4, r0
 8006636:	d001      	beq.n	800663c <cleanup_stdio+0x10>
 8006638:	f001 fcac 	bl	8007f94 <_fflush_r>
 800663c:	68a1      	ldr	r1, [r4, #8]
 800663e:	4b09      	ldr	r3, [pc, #36]	@ (8006664 <cleanup_stdio+0x38>)
 8006640:	4299      	cmp	r1, r3
 8006642:	d002      	beq.n	800664a <cleanup_stdio+0x1e>
 8006644:	4620      	mov	r0, r4
 8006646:	f001 fca5 	bl	8007f94 <_fflush_r>
 800664a:	68e1      	ldr	r1, [r4, #12]
 800664c:	4b06      	ldr	r3, [pc, #24]	@ (8006668 <cleanup_stdio+0x3c>)
 800664e:	4299      	cmp	r1, r3
 8006650:	d004      	beq.n	800665c <cleanup_stdio+0x30>
 8006652:	4620      	mov	r0, r4
 8006654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006658:	f001 bc9c 	b.w	8007f94 <_fflush_r>
 800665c:	bd10      	pop	{r4, pc}
 800665e:	bf00      	nop
 8006660:	20000a10 	.word	0x20000a10
 8006664:	20000a78 	.word	0x20000a78
 8006668:	20000ae0 	.word	0x20000ae0

0800666c <global_stdio_init.part.0>:
 800666c:	b510      	push	{r4, lr}
 800666e:	4b0b      	ldr	r3, [pc, #44]	@ (800669c <global_stdio_init.part.0+0x30>)
 8006670:	4c0b      	ldr	r4, [pc, #44]	@ (80066a0 <global_stdio_init.part.0+0x34>)
 8006672:	4a0c      	ldr	r2, [pc, #48]	@ (80066a4 <global_stdio_init.part.0+0x38>)
 8006674:	601a      	str	r2, [r3, #0]
 8006676:	4620      	mov	r0, r4
 8006678:	2200      	movs	r2, #0
 800667a:	2104      	movs	r1, #4
 800667c:	f7ff ff94 	bl	80065a8 <std>
 8006680:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006684:	2201      	movs	r2, #1
 8006686:	2109      	movs	r1, #9
 8006688:	f7ff ff8e 	bl	80065a8 <std>
 800668c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006690:	2202      	movs	r2, #2
 8006692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006696:	2112      	movs	r1, #18
 8006698:	f7ff bf86 	b.w	80065a8 <std>
 800669c:	20000b48 	.word	0x20000b48
 80066a0:	20000a10 	.word	0x20000a10
 80066a4:	08006615 	.word	0x08006615

080066a8 <__sfp_lock_acquire>:
 80066a8:	4801      	ldr	r0, [pc, #4]	@ (80066b0 <__sfp_lock_acquire+0x8>)
 80066aa:	f000 b910 	b.w	80068ce <__retarget_lock_acquire_recursive>
 80066ae:	bf00      	nop
 80066b0:	20000b51 	.word	0x20000b51

080066b4 <__sfp_lock_release>:
 80066b4:	4801      	ldr	r0, [pc, #4]	@ (80066bc <__sfp_lock_release+0x8>)
 80066b6:	f000 b90b 	b.w	80068d0 <__retarget_lock_release_recursive>
 80066ba:	bf00      	nop
 80066bc:	20000b51 	.word	0x20000b51

080066c0 <__sinit>:
 80066c0:	b510      	push	{r4, lr}
 80066c2:	4604      	mov	r4, r0
 80066c4:	f7ff fff0 	bl	80066a8 <__sfp_lock_acquire>
 80066c8:	6a23      	ldr	r3, [r4, #32]
 80066ca:	b11b      	cbz	r3, 80066d4 <__sinit+0x14>
 80066cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066d0:	f7ff bff0 	b.w	80066b4 <__sfp_lock_release>
 80066d4:	4b04      	ldr	r3, [pc, #16]	@ (80066e8 <__sinit+0x28>)
 80066d6:	6223      	str	r3, [r4, #32]
 80066d8:	4b04      	ldr	r3, [pc, #16]	@ (80066ec <__sinit+0x2c>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1f5      	bne.n	80066cc <__sinit+0xc>
 80066e0:	f7ff ffc4 	bl	800666c <global_stdio_init.part.0>
 80066e4:	e7f2      	b.n	80066cc <__sinit+0xc>
 80066e6:	bf00      	nop
 80066e8:	0800662d 	.word	0x0800662d
 80066ec:	20000b48 	.word	0x20000b48

080066f0 <_fwalk_sglue>:
 80066f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066f4:	4607      	mov	r7, r0
 80066f6:	4688      	mov	r8, r1
 80066f8:	4614      	mov	r4, r2
 80066fa:	2600      	movs	r6, #0
 80066fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006700:	f1b9 0901 	subs.w	r9, r9, #1
 8006704:	d505      	bpl.n	8006712 <_fwalk_sglue+0x22>
 8006706:	6824      	ldr	r4, [r4, #0]
 8006708:	2c00      	cmp	r4, #0
 800670a:	d1f7      	bne.n	80066fc <_fwalk_sglue+0xc>
 800670c:	4630      	mov	r0, r6
 800670e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006712:	89ab      	ldrh	r3, [r5, #12]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d907      	bls.n	8006728 <_fwalk_sglue+0x38>
 8006718:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800671c:	3301      	adds	r3, #1
 800671e:	d003      	beq.n	8006728 <_fwalk_sglue+0x38>
 8006720:	4629      	mov	r1, r5
 8006722:	4638      	mov	r0, r7
 8006724:	47c0      	blx	r8
 8006726:	4306      	orrs	r6, r0
 8006728:	3568      	adds	r5, #104	@ 0x68
 800672a:	e7e9      	b.n	8006700 <_fwalk_sglue+0x10>

0800672c <__sread>:
 800672c:	b510      	push	{r4, lr}
 800672e:	460c      	mov	r4, r1
 8006730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006734:	f000 f87c 	bl	8006830 <_read_r>
 8006738:	2800      	cmp	r0, #0
 800673a:	bfab      	itete	ge
 800673c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800673e:	89a3      	ldrhlt	r3, [r4, #12]
 8006740:	181b      	addge	r3, r3, r0
 8006742:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006746:	bfac      	ite	ge
 8006748:	6563      	strge	r3, [r4, #84]	@ 0x54
 800674a:	81a3      	strhlt	r3, [r4, #12]
 800674c:	bd10      	pop	{r4, pc}

0800674e <__swrite>:
 800674e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006752:	461f      	mov	r7, r3
 8006754:	898b      	ldrh	r3, [r1, #12]
 8006756:	05db      	lsls	r3, r3, #23
 8006758:	4605      	mov	r5, r0
 800675a:	460c      	mov	r4, r1
 800675c:	4616      	mov	r6, r2
 800675e:	d505      	bpl.n	800676c <__swrite+0x1e>
 8006760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006764:	2302      	movs	r3, #2
 8006766:	2200      	movs	r2, #0
 8006768:	f000 f850 	bl	800680c <_lseek_r>
 800676c:	89a3      	ldrh	r3, [r4, #12]
 800676e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006772:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006776:	81a3      	strh	r3, [r4, #12]
 8006778:	4632      	mov	r2, r6
 800677a:	463b      	mov	r3, r7
 800677c:	4628      	mov	r0, r5
 800677e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006782:	f000 b867 	b.w	8006854 <_write_r>

08006786 <__sseek>:
 8006786:	b510      	push	{r4, lr}
 8006788:	460c      	mov	r4, r1
 800678a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800678e:	f000 f83d 	bl	800680c <_lseek_r>
 8006792:	1c43      	adds	r3, r0, #1
 8006794:	89a3      	ldrh	r3, [r4, #12]
 8006796:	bf15      	itete	ne
 8006798:	6560      	strne	r0, [r4, #84]	@ 0x54
 800679a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800679e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80067a2:	81a3      	strheq	r3, [r4, #12]
 80067a4:	bf18      	it	ne
 80067a6:	81a3      	strhne	r3, [r4, #12]
 80067a8:	bd10      	pop	{r4, pc}

080067aa <__sclose>:
 80067aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067ae:	f000 b81d 	b.w	80067ec <_close_r>

080067b2 <memcmp>:
 80067b2:	b510      	push	{r4, lr}
 80067b4:	3901      	subs	r1, #1
 80067b6:	4402      	add	r2, r0
 80067b8:	4290      	cmp	r0, r2
 80067ba:	d101      	bne.n	80067c0 <memcmp+0xe>
 80067bc:	2000      	movs	r0, #0
 80067be:	e005      	b.n	80067cc <memcmp+0x1a>
 80067c0:	7803      	ldrb	r3, [r0, #0]
 80067c2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80067c6:	42a3      	cmp	r3, r4
 80067c8:	d001      	beq.n	80067ce <memcmp+0x1c>
 80067ca:	1b18      	subs	r0, r3, r4
 80067cc:	bd10      	pop	{r4, pc}
 80067ce:	3001      	adds	r0, #1
 80067d0:	e7f2      	b.n	80067b8 <memcmp+0x6>

080067d2 <memset>:
 80067d2:	4402      	add	r2, r0
 80067d4:	4603      	mov	r3, r0
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d100      	bne.n	80067dc <memset+0xa>
 80067da:	4770      	bx	lr
 80067dc:	f803 1b01 	strb.w	r1, [r3], #1
 80067e0:	e7f9      	b.n	80067d6 <memset+0x4>
	...

080067e4 <_localeconv_r>:
 80067e4:	4800      	ldr	r0, [pc, #0]	@ (80067e8 <_localeconv_r+0x4>)
 80067e6:	4770      	bx	lr
 80067e8:	20000158 	.word	0x20000158

080067ec <_close_r>:
 80067ec:	b538      	push	{r3, r4, r5, lr}
 80067ee:	4d06      	ldr	r5, [pc, #24]	@ (8006808 <_close_r+0x1c>)
 80067f0:	2300      	movs	r3, #0
 80067f2:	4604      	mov	r4, r0
 80067f4:	4608      	mov	r0, r1
 80067f6:	602b      	str	r3, [r5, #0]
 80067f8:	f7fc fbf6 	bl	8002fe8 <_close>
 80067fc:	1c43      	adds	r3, r0, #1
 80067fe:	d102      	bne.n	8006806 <_close_r+0x1a>
 8006800:	682b      	ldr	r3, [r5, #0]
 8006802:	b103      	cbz	r3, 8006806 <_close_r+0x1a>
 8006804:	6023      	str	r3, [r4, #0]
 8006806:	bd38      	pop	{r3, r4, r5, pc}
 8006808:	20000b4c 	.word	0x20000b4c

0800680c <_lseek_r>:
 800680c:	b538      	push	{r3, r4, r5, lr}
 800680e:	4d07      	ldr	r5, [pc, #28]	@ (800682c <_lseek_r+0x20>)
 8006810:	4604      	mov	r4, r0
 8006812:	4608      	mov	r0, r1
 8006814:	4611      	mov	r1, r2
 8006816:	2200      	movs	r2, #0
 8006818:	602a      	str	r2, [r5, #0]
 800681a:	461a      	mov	r2, r3
 800681c:	f7fc fc0b 	bl	8003036 <_lseek>
 8006820:	1c43      	adds	r3, r0, #1
 8006822:	d102      	bne.n	800682a <_lseek_r+0x1e>
 8006824:	682b      	ldr	r3, [r5, #0]
 8006826:	b103      	cbz	r3, 800682a <_lseek_r+0x1e>
 8006828:	6023      	str	r3, [r4, #0]
 800682a:	bd38      	pop	{r3, r4, r5, pc}
 800682c:	20000b4c 	.word	0x20000b4c

08006830 <_read_r>:
 8006830:	b538      	push	{r3, r4, r5, lr}
 8006832:	4d07      	ldr	r5, [pc, #28]	@ (8006850 <_read_r+0x20>)
 8006834:	4604      	mov	r4, r0
 8006836:	4608      	mov	r0, r1
 8006838:	4611      	mov	r1, r2
 800683a:	2200      	movs	r2, #0
 800683c:	602a      	str	r2, [r5, #0]
 800683e:	461a      	mov	r2, r3
 8006840:	f7fc fb99 	bl	8002f76 <_read>
 8006844:	1c43      	adds	r3, r0, #1
 8006846:	d102      	bne.n	800684e <_read_r+0x1e>
 8006848:	682b      	ldr	r3, [r5, #0]
 800684a:	b103      	cbz	r3, 800684e <_read_r+0x1e>
 800684c:	6023      	str	r3, [r4, #0]
 800684e:	bd38      	pop	{r3, r4, r5, pc}
 8006850:	20000b4c 	.word	0x20000b4c

08006854 <_write_r>:
 8006854:	b538      	push	{r3, r4, r5, lr}
 8006856:	4d07      	ldr	r5, [pc, #28]	@ (8006874 <_write_r+0x20>)
 8006858:	4604      	mov	r4, r0
 800685a:	4608      	mov	r0, r1
 800685c:	4611      	mov	r1, r2
 800685e:	2200      	movs	r2, #0
 8006860:	602a      	str	r2, [r5, #0]
 8006862:	461a      	mov	r2, r3
 8006864:	f7fc fba4 	bl	8002fb0 <_write>
 8006868:	1c43      	adds	r3, r0, #1
 800686a:	d102      	bne.n	8006872 <_write_r+0x1e>
 800686c:	682b      	ldr	r3, [r5, #0]
 800686e:	b103      	cbz	r3, 8006872 <_write_r+0x1e>
 8006870:	6023      	str	r3, [r4, #0]
 8006872:	bd38      	pop	{r3, r4, r5, pc}
 8006874:	20000b4c 	.word	0x20000b4c

08006878 <__errno>:
 8006878:	4b01      	ldr	r3, [pc, #4]	@ (8006880 <__errno+0x8>)
 800687a:	6818      	ldr	r0, [r3, #0]
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	20000018 	.word	0x20000018

08006884 <__libc_init_array>:
 8006884:	b570      	push	{r4, r5, r6, lr}
 8006886:	4d0d      	ldr	r5, [pc, #52]	@ (80068bc <__libc_init_array+0x38>)
 8006888:	4c0d      	ldr	r4, [pc, #52]	@ (80068c0 <__libc_init_array+0x3c>)
 800688a:	1b64      	subs	r4, r4, r5
 800688c:	10a4      	asrs	r4, r4, #2
 800688e:	2600      	movs	r6, #0
 8006890:	42a6      	cmp	r6, r4
 8006892:	d109      	bne.n	80068a8 <__libc_init_array+0x24>
 8006894:	4d0b      	ldr	r5, [pc, #44]	@ (80068c4 <__libc_init_array+0x40>)
 8006896:	4c0c      	ldr	r4, [pc, #48]	@ (80068c8 <__libc_init_array+0x44>)
 8006898:	f001 fef6 	bl	8008688 <_init>
 800689c:	1b64      	subs	r4, r4, r5
 800689e:	10a4      	asrs	r4, r4, #2
 80068a0:	2600      	movs	r6, #0
 80068a2:	42a6      	cmp	r6, r4
 80068a4:	d105      	bne.n	80068b2 <__libc_init_array+0x2e>
 80068a6:	bd70      	pop	{r4, r5, r6, pc}
 80068a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ac:	4798      	blx	r3
 80068ae:	3601      	adds	r6, #1
 80068b0:	e7ee      	b.n	8006890 <__libc_init_array+0xc>
 80068b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80068b6:	4798      	blx	r3
 80068b8:	3601      	adds	r6, #1
 80068ba:	e7f2      	b.n	80068a2 <__libc_init_array+0x1e>
 80068bc:	08009658 	.word	0x08009658
 80068c0:	08009658 	.word	0x08009658
 80068c4:	08009658 	.word	0x08009658
 80068c8:	0800965c 	.word	0x0800965c

080068cc <__retarget_lock_init_recursive>:
 80068cc:	4770      	bx	lr

080068ce <__retarget_lock_acquire_recursive>:
 80068ce:	4770      	bx	lr

080068d0 <__retarget_lock_release_recursive>:
 80068d0:	4770      	bx	lr

080068d2 <memcpy>:
 80068d2:	440a      	add	r2, r1
 80068d4:	4291      	cmp	r1, r2
 80068d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80068da:	d100      	bne.n	80068de <memcpy+0xc>
 80068dc:	4770      	bx	lr
 80068de:	b510      	push	{r4, lr}
 80068e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068e8:	4291      	cmp	r1, r2
 80068ea:	d1f9      	bne.n	80068e0 <memcpy+0xe>
 80068ec:	bd10      	pop	{r4, pc}

080068ee <quorem>:
 80068ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f2:	6903      	ldr	r3, [r0, #16]
 80068f4:	690c      	ldr	r4, [r1, #16]
 80068f6:	42a3      	cmp	r3, r4
 80068f8:	4607      	mov	r7, r0
 80068fa:	db7e      	blt.n	80069fa <quorem+0x10c>
 80068fc:	3c01      	subs	r4, #1
 80068fe:	f101 0814 	add.w	r8, r1, #20
 8006902:	00a3      	lsls	r3, r4, #2
 8006904:	f100 0514 	add.w	r5, r0, #20
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800690e:	9301      	str	r3, [sp, #4]
 8006910:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006914:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006918:	3301      	adds	r3, #1
 800691a:	429a      	cmp	r2, r3
 800691c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006920:	fbb2 f6f3 	udiv	r6, r2, r3
 8006924:	d32e      	bcc.n	8006984 <quorem+0x96>
 8006926:	f04f 0a00 	mov.w	sl, #0
 800692a:	46c4      	mov	ip, r8
 800692c:	46ae      	mov	lr, r5
 800692e:	46d3      	mov	fp, sl
 8006930:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006934:	b298      	uxth	r0, r3
 8006936:	fb06 a000 	mla	r0, r6, r0, sl
 800693a:	0c02      	lsrs	r2, r0, #16
 800693c:	0c1b      	lsrs	r3, r3, #16
 800693e:	fb06 2303 	mla	r3, r6, r3, r2
 8006942:	f8de 2000 	ldr.w	r2, [lr]
 8006946:	b280      	uxth	r0, r0
 8006948:	b292      	uxth	r2, r2
 800694a:	1a12      	subs	r2, r2, r0
 800694c:	445a      	add	r2, fp
 800694e:	f8de 0000 	ldr.w	r0, [lr]
 8006952:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006956:	b29b      	uxth	r3, r3
 8006958:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800695c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006960:	b292      	uxth	r2, r2
 8006962:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006966:	45e1      	cmp	r9, ip
 8006968:	f84e 2b04 	str.w	r2, [lr], #4
 800696c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006970:	d2de      	bcs.n	8006930 <quorem+0x42>
 8006972:	9b00      	ldr	r3, [sp, #0]
 8006974:	58eb      	ldr	r3, [r5, r3]
 8006976:	b92b      	cbnz	r3, 8006984 <quorem+0x96>
 8006978:	9b01      	ldr	r3, [sp, #4]
 800697a:	3b04      	subs	r3, #4
 800697c:	429d      	cmp	r5, r3
 800697e:	461a      	mov	r2, r3
 8006980:	d32f      	bcc.n	80069e2 <quorem+0xf4>
 8006982:	613c      	str	r4, [r7, #16]
 8006984:	4638      	mov	r0, r7
 8006986:	f001 f979 	bl	8007c7c <__mcmp>
 800698a:	2800      	cmp	r0, #0
 800698c:	db25      	blt.n	80069da <quorem+0xec>
 800698e:	4629      	mov	r1, r5
 8006990:	2000      	movs	r0, #0
 8006992:	f858 2b04 	ldr.w	r2, [r8], #4
 8006996:	f8d1 c000 	ldr.w	ip, [r1]
 800699a:	fa1f fe82 	uxth.w	lr, r2
 800699e:	fa1f f38c 	uxth.w	r3, ip
 80069a2:	eba3 030e 	sub.w	r3, r3, lr
 80069a6:	4403      	add	r3, r0
 80069a8:	0c12      	lsrs	r2, r2, #16
 80069aa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80069ae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069b8:	45c1      	cmp	r9, r8
 80069ba:	f841 3b04 	str.w	r3, [r1], #4
 80069be:	ea4f 4022 	mov.w	r0, r2, asr #16
 80069c2:	d2e6      	bcs.n	8006992 <quorem+0xa4>
 80069c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069cc:	b922      	cbnz	r2, 80069d8 <quorem+0xea>
 80069ce:	3b04      	subs	r3, #4
 80069d0:	429d      	cmp	r5, r3
 80069d2:	461a      	mov	r2, r3
 80069d4:	d30b      	bcc.n	80069ee <quorem+0x100>
 80069d6:	613c      	str	r4, [r7, #16]
 80069d8:	3601      	adds	r6, #1
 80069da:	4630      	mov	r0, r6
 80069dc:	b003      	add	sp, #12
 80069de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069e2:	6812      	ldr	r2, [r2, #0]
 80069e4:	3b04      	subs	r3, #4
 80069e6:	2a00      	cmp	r2, #0
 80069e8:	d1cb      	bne.n	8006982 <quorem+0x94>
 80069ea:	3c01      	subs	r4, #1
 80069ec:	e7c6      	b.n	800697c <quorem+0x8e>
 80069ee:	6812      	ldr	r2, [r2, #0]
 80069f0:	3b04      	subs	r3, #4
 80069f2:	2a00      	cmp	r2, #0
 80069f4:	d1ef      	bne.n	80069d6 <quorem+0xe8>
 80069f6:	3c01      	subs	r4, #1
 80069f8:	e7ea      	b.n	80069d0 <quorem+0xe2>
 80069fa:	2000      	movs	r0, #0
 80069fc:	e7ee      	b.n	80069dc <quorem+0xee>
	...

08006a00 <_dtoa_r>:
 8006a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a04:	69c7      	ldr	r7, [r0, #28]
 8006a06:	b099      	sub	sp, #100	@ 0x64
 8006a08:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006a0c:	ec55 4b10 	vmov	r4, r5, d0
 8006a10:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006a12:	9109      	str	r1, [sp, #36]	@ 0x24
 8006a14:	4683      	mov	fp, r0
 8006a16:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a18:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006a1a:	b97f      	cbnz	r7, 8006a3c <_dtoa_r+0x3c>
 8006a1c:	2010      	movs	r0, #16
 8006a1e:	f000 fdfd 	bl	800761c <malloc>
 8006a22:	4602      	mov	r2, r0
 8006a24:	f8cb 001c 	str.w	r0, [fp, #28]
 8006a28:	b920      	cbnz	r0, 8006a34 <_dtoa_r+0x34>
 8006a2a:	4ba7      	ldr	r3, [pc, #668]	@ (8006cc8 <_dtoa_r+0x2c8>)
 8006a2c:	21ef      	movs	r1, #239	@ 0xef
 8006a2e:	48a7      	ldr	r0, [pc, #668]	@ (8006ccc <_dtoa_r+0x2cc>)
 8006a30:	f001 fae8 	bl	8008004 <__assert_func>
 8006a34:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006a38:	6007      	str	r7, [r0, #0]
 8006a3a:	60c7      	str	r7, [r0, #12]
 8006a3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a40:	6819      	ldr	r1, [r3, #0]
 8006a42:	b159      	cbz	r1, 8006a5c <_dtoa_r+0x5c>
 8006a44:	685a      	ldr	r2, [r3, #4]
 8006a46:	604a      	str	r2, [r1, #4]
 8006a48:	2301      	movs	r3, #1
 8006a4a:	4093      	lsls	r3, r2
 8006a4c:	608b      	str	r3, [r1, #8]
 8006a4e:	4658      	mov	r0, fp
 8006a50:	f000 feda 	bl	8007808 <_Bfree>
 8006a54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	601a      	str	r2, [r3, #0]
 8006a5c:	1e2b      	subs	r3, r5, #0
 8006a5e:	bfb9      	ittee	lt
 8006a60:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006a64:	9303      	strlt	r3, [sp, #12]
 8006a66:	2300      	movge	r3, #0
 8006a68:	6033      	strge	r3, [r6, #0]
 8006a6a:	9f03      	ldr	r7, [sp, #12]
 8006a6c:	4b98      	ldr	r3, [pc, #608]	@ (8006cd0 <_dtoa_r+0x2d0>)
 8006a6e:	bfbc      	itt	lt
 8006a70:	2201      	movlt	r2, #1
 8006a72:	6032      	strlt	r2, [r6, #0]
 8006a74:	43bb      	bics	r3, r7
 8006a76:	d112      	bne.n	8006a9e <_dtoa_r+0x9e>
 8006a78:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006a7a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006a7e:	6013      	str	r3, [r2, #0]
 8006a80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006a84:	4323      	orrs	r3, r4
 8006a86:	f000 854d 	beq.w	8007524 <_dtoa_r+0xb24>
 8006a8a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006a8c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006ce4 <_dtoa_r+0x2e4>
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 854f 	beq.w	8007534 <_dtoa_r+0xb34>
 8006a96:	f10a 0303 	add.w	r3, sl, #3
 8006a9a:	f000 bd49 	b.w	8007530 <_dtoa_r+0xb30>
 8006a9e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	ec51 0b17 	vmov	r0, r1, d7
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006aae:	f7fa f80b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ab2:	4680      	mov	r8, r0
 8006ab4:	b158      	cbz	r0, 8006ace <_dtoa_r+0xce>
 8006ab6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006ab8:	2301      	movs	r3, #1
 8006aba:	6013      	str	r3, [r2, #0]
 8006abc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006abe:	b113      	cbz	r3, 8006ac6 <_dtoa_r+0xc6>
 8006ac0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006ac2:	4b84      	ldr	r3, [pc, #528]	@ (8006cd4 <_dtoa_r+0x2d4>)
 8006ac4:	6013      	str	r3, [r2, #0]
 8006ac6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006ce8 <_dtoa_r+0x2e8>
 8006aca:	f000 bd33 	b.w	8007534 <_dtoa_r+0xb34>
 8006ace:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006ad2:	aa16      	add	r2, sp, #88	@ 0x58
 8006ad4:	a917      	add	r1, sp, #92	@ 0x5c
 8006ad6:	4658      	mov	r0, fp
 8006ad8:	f001 f980 	bl	8007ddc <__d2b>
 8006adc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006ae0:	4681      	mov	r9, r0
 8006ae2:	2e00      	cmp	r6, #0
 8006ae4:	d077      	beq.n	8006bd6 <_dtoa_r+0x1d6>
 8006ae6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ae8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006aec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006af0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006af4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006af8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006afc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006b00:	4619      	mov	r1, r3
 8006b02:	2200      	movs	r2, #0
 8006b04:	4b74      	ldr	r3, [pc, #464]	@ (8006cd8 <_dtoa_r+0x2d8>)
 8006b06:	f7f9 fbbf 	bl	8000288 <__aeabi_dsub>
 8006b0a:	a369      	add	r3, pc, #420	@ (adr r3, 8006cb0 <_dtoa_r+0x2b0>)
 8006b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b10:	f7f9 fd72 	bl	80005f8 <__aeabi_dmul>
 8006b14:	a368      	add	r3, pc, #416	@ (adr r3, 8006cb8 <_dtoa_r+0x2b8>)
 8006b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1a:	f7f9 fbb7 	bl	800028c <__adddf3>
 8006b1e:	4604      	mov	r4, r0
 8006b20:	4630      	mov	r0, r6
 8006b22:	460d      	mov	r5, r1
 8006b24:	f7f9 fcfe 	bl	8000524 <__aeabi_i2d>
 8006b28:	a365      	add	r3, pc, #404	@ (adr r3, 8006cc0 <_dtoa_r+0x2c0>)
 8006b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2e:	f7f9 fd63 	bl	80005f8 <__aeabi_dmul>
 8006b32:	4602      	mov	r2, r0
 8006b34:	460b      	mov	r3, r1
 8006b36:	4620      	mov	r0, r4
 8006b38:	4629      	mov	r1, r5
 8006b3a:	f7f9 fba7 	bl	800028c <__adddf3>
 8006b3e:	4604      	mov	r4, r0
 8006b40:	460d      	mov	r5, r1
 8006b42:	f7fa f809 	bl	8000b58 <__aeabi_d2iz>
 8006b46:	2200      	movs	r2, #0
 8006b48:	4607      	mov	r7, r0
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	4629      	mov	r1, r5
 8006b50:	f7f9 ffc4 	bl	8000adc <__aeabi_dcmplt>
 8006b54:	b140      	cbz	r0, 8006b68 <_dtoa_r+0x168>
 8006b56:	4638      	mov	r0, r7
 8006b58:	f7f9 fce4 	bl	8000524 <__aeabi_i2d>
 8006b5c:	4622      	mov	r2, r4
 8006b5e:	462b      	mov	r3, r5
 8006b60:	f7f9 ffb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b64:	b900      	cbnz	r0, 8006b68 <_dtoa_r+0x168>
 8006b66:	3f01      	subs	r7, #1
 8006b68:	2f16      	cmp	r7, #22
 8006b6a:	d851      	bhi.n	8006c10 <_dtoa_r+0x210>
 8006b6c:	4b5b      	ldr	r3, [pc, #364]	@ (8006cdc <_dtoa_r+0x2dc>)
 8006b6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b7a:	f7f9 ffaf 	bl	8000adc <__aeabi_dcmplt>
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	d048      	beq.n	8006c14 <_dtoa_r+0x214>
 8006b82:	3f01      	subs	r7, #1
 8006b84:	2300      	movs	r3, #0
 8006b86:	9312      	str	r3, [sp, #72]	@ 0x48
 8006b88:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006b8a:	1b9b      	subs	r3, r3, r6
 8006b8c:	1e5a      	subs	r2, r3, #1
 8006b8e:	bf44      	itt	mi
 8006b90:	f1c3 0801 	rsbmi	r8, r3, #1
 8006b94:	2300      	movmi	r3, #0
 8006b96:	9208      	str	r2, [sp, #32]
 8006b98:	bf54      	ite	pl
 8006b9a:	f04f 0800 	movpl.w	r8, #0
 8006b9e:	9308      	strmi	r3, [sp, #32]
 8006ba0:	2f00      	cmp	r7, #0
 8006ba2:	db39      	blt.n	8006c18 <_dtoa_r+0x218>
 8006ba4:	9b08      	ldr	r3, [sp, #32]
 8006ba6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006ba8:	443b      	add	r3, r7
 8006baa:	9308      	str	r3, [sp, #32]
 8006bac:	2300      	movs	r3, #0
 8006bae:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bb2:	2b09      	cmp	r3, #9
 8006bb4:	d864      	bhi.n	8006c80 <_dtoa_r+0x280>
 8006bb6:	2b05      	cmp	r3, #5
 8006bb8:	bfc4      	itt	gt
 8006bba:	3b04      	subgt	r3, #4
 8006bbc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006bbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bc0:	f1a3 0302 	sub.w	r3, r3, #2
 8006bc4:	bfcc      	ite	gt
 8006bc6:	2400      	movgt	r4, #0
 8006bc8:	2401      	movle	r4, #1
 8006bca:	2b03      	cmp	r3, #3
 8006bcc:	d863      	bhi.n	8006c96 <_dtoa_r+0x296>
 8006bce:	e8df f003 	tbb	[pc, r3]
 8006bd2:	372a      	.short	0x372a
 8006bd4:	5535      	.short	0x5535
 8006bd6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006bda:	441e      	add	r6, r3
 8006bdc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006be0:	2b20      	cmp	r3, #32
 8006be2:	bfc1      	itttt	gt
 8006be4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006be8:	409f      	lslgt	r7, r3
 8006bea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006bee:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006bf2:	bfd6      	itet	le
 8006bf4:	f1c3 0320 	rsble	r3, r3, #32
 8006bf8:	ea47 0003 	orrgt.w	r0, r7, r3
 8006bfc:	fa04 f003 	lslle.w	r0, r4, r3
 8006c00:	f7f9 fc80 	bl	8000504 <__aeabi_ui2d>
 8006c04:	2201      	movs	r2, #1
 8006c06:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006c0a:	3e01      	subs	r6, #1
 8006c0c:	9214      	str	r2, [sp, #80]	@ 0x50
 8006c0e:	e777      	b.n	8006b00 <_dtoa_r+0x100>
 8006c10:	2301      	movs	r3, #1
 8006c12:	e7b8      	b.n	8006b86 <_dtoa_r+0x186>
 8006c14:	9012      	str	r0, [sp, #72]	@ 0x48
 8006c16:	e7b7      	b.n	8006b88 <_dtoa_r+0x188>
 8006c18:	427b      	negs	r3, r7
 8006c1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	eba8 0807 	sub.w	r8, r8, r7
 8006c22:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006c24:	e7c4      	b.n	8006bb0 <_dtoa_r+0x1b0>
 8006c26:	2300      	movs	r3, #0
 8006c28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	dc35      	bgt.n	8006c9c <_dtoa_r+0x29c>
 8006c30:	2301      	movs	r3, #1
 8006c32:	9300      	str	r3, [sp, #0]
 8006c34:	9307      	str	r3, [sp, #28]
 8006c36:	461a      	mov	r2, r3
 8006c38:	920e      	str	r2, [sp, #56]	@ 0x38
 8006c3a:	e00b      	b.n	8006c54 <_dtoa_r+0x254>
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e7f3      	b.n	8006c28 <_dtoa_r+0x228>
 8006c40:	2300      	movs	r3, #0
 8006c42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c46:	18fb      	adds	r3, r7, r3
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	9307      	str	r3, [sp, #28]
 8006c50:	bfb8      	it	lt
 8006c52:	2301      	movlt	r3, #1
 8006c54:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006c58:	2100      	movs	r1, #0
 8006c5a:	2204      	movs	r2, #4
 8006c5c:	f102 0514 	add.w	r5, r2, #20
 8006c60:	429d      	cmp	r5, r3
 8006c62:	d91f      	bls.n	8006ca4 <_dtoa_r+0x2a4>
 8006c64:	6041      	str	r1, [r0, #4]
 8006c66:	4658      	mov	r0, fp
 8006c68:	f000 fd8e 	bl	8007788 <_Balloc>
 8006c6c:	4682      	mov	sl, r0
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	d13c      	bne.n	8006cec <_dtoa_r+0x2ec>
 8006c72:	4b1b      	ldr	r3, [pc, #108]	@ (8006ce0 <_dtoa_r+0x2e0>)
 8006c74:	4602      	mov	r2, r0
 8006c76:	f240 11af 	movw	r1, #431	@ 0x1af
 8006c7a:	e6d8      	b.n	8006a2e <_dtoa_r+0x2e>
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e7e0      	b.n	8006c42 <_dtoa_r+0x242>
 8006c80:	2401      	movs	r4, #1
 8006c82:	2300      	movs	r3, #0
 8006c84:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c86:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006c88:	f04f 33ff 	mov.w	r3, #4294967295
 8006c8c:	9300      	str	r3, [sp, #0]
 8006c8e:	9307      	str	r3, [sp, #28]
 8006c90:	2200      	movs	r2, #0
 8006c92:	2312      	movs	r3, #18
 8006c94:	e7d0      	b.n	8006c38 <_dtoa_r+0x238>
 8006c96:	2301      	movs	r3, #1
 8006c98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c9a:	e7f5      	b.n	8006c88 <_dtoa_r+0x288>
 8006c9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	9307      	str	r3, [sp, #28]
 8006ca2:	e7d7      	b.n	8006c54 <_dtoa_r+0x254>
 8006ca4:	3101      	adds	r1, #1
 8006ca6:	0052      	lsls	r2, r2, #1
 8006ca8:	e7d8      	b.n	8006c5c <_dtoa_r+0x25c>
 8006caa:	bf00      	nop
 8006cac:	f3af 8000 	nop.w
 8006cb0:	636f4361 	.word	0x636f4361
 8006cb4:	3fd287a7 	.word	0x3fd287a7
 8006cb8:	8b60c8b3 	.word	0x8b60c8b3
 8006cbc:	3fc68a28 	.word	0x3fc68a28
 8006cc0:	509f79fb 	.word	0x509f79fb
 8006cc4:	3fd34413 	.word	0x3fd34413
 8006cc8:	08009321 	.word	0x08009321
 8006ccc:	08009338 	.word	0x08009338
 8006cd0:	7ff00000 	.word	0x7ff00000
 8006cd4:	080092f1 	.word	0x080092f1
 8006cd8:	3ff80000 	.word	0x3ff80000
 8006cdc:	08009430 	.word	0x08009430
 8006ce0:	08009390 	.word	0x08009390
 8006ce4:	0800931d 	.word	0x0800931d
 8006ce8:	080092f0 	.word	0x080092f0
 8006cec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006cf0:	6018      	str	r0, [r3, #0]
 8006cf2:	9b07      	ldr	r3, [sp, #28]
 8006cf4:	2b0e      	cmp	r3, #14
 8006cf6:	f200 80a4 	bhi.w	8006e42 <_dtoa_r+0x442>
 8006cfa:	2c00      	cmp	r4, #0
 8006cfc:	f000 80a1 	beq.w	8006e42 <_dtoa_r+0x442>
 8006d00:	2f00      	cmp	r7, #0
 8006d02:	dd33      	ble.n	8006d6c <_dtoa_r+0x36c>
 8006d04:	4bad      	ldr	r3, [pc, #692]	@ (8006fbc <_dtoa_r+0x5bc>)
 8006d06:	f007 020f 	and.w	r2, r7, #15
 8006d0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d0e:	ed93 7b00 	vldr	d7, [r3]
 8006d12:	05f8      	lsls	r0, r7, #23
 8006d14:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006d18:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006d1c:	d516      	bpl.n	8006d4c <_dtoa_r+0x34c>
 8006d1e:	4ba8      	ldr	r3, [pc, #672]	@ (8006fc0 <_dtoa_r+0x5c0>)
 8006d20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d28:	f7f9 fd90 	bl	800084c <__aeabi_ddiv>
 8006d2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d30:	f004 040f 	and.w	r4, r4, #15
 8006d34:	2603      	movs	r6, #3
 8006d36:	4da2      	ldr	r5, [pc, #648]	@ (8006fc0 <_dtoa_r+0x5c0>)
 8006d38:	b954      	cbnz	r4, 8006d50 <_dtoa_r+0x350>
 8006d3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d42:	f7f9 fd83 	bl	800084c <__aeabi_ddiv>
 8006d46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d4a:	e028      	b.n	8006d9e <_dtoa_r+0x39e>
 8006d4c:	2602      	movs	r6, #2
 8006d4e:	e7f2      	b.n	8006d36 <_dtoa_r+0x336>
 8006d50:	07e1      	lsls	r1, r4, #31
 8006d52:	d508      	bpl.n	8006d66 <_dtoa_r+0x366>
 8006d54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d5c:	f7f9 fc4c 	bl	80005f8 <__aeabi_dmul>
 8006d60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d64:	3601      	adds	r6, #1
 8006d66:	1064      	asrs	r4, r4, #1
 8006d68:	3508      	adds	r5, #8
 8006d6a:	e7e5      	b.n	8006d38 <_dtoa_r+0x338>
 8006d6c:	f000 80d2 	beq.w	8006f14 <_dtoa_r+0x514>
 8006d70:	427c      	negs	r4, r7
 8006d72:	4b92      	ldr	r3, [pc, #584]	@ (8006fbc <_dtoa_r+0x5bc>)
 8006d74:	4d92      	ldr	r5, [pc, #584]	@ (8006fc0 <_dtoa_r+0x5c0>)
 8006d76:	f004 020f 	and.w	r2, r4, #15
 8006d7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d86:	f7f9 fc37 	bl	80005f8 <__aeabi_dmul>
 8006d8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d8e:	1124      	asrs	r4, r4, #4
 8006d90:	2300      	movs	r3, #0
 8006d92:	2602      	movs	r6, #2
 8006d94:	2c00      	cmp	r4, #0
 8006d96:	f040 80b2 	bne.w	8006efe <_dtoa_r+0x4fe>
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1d3      	bne.n	8006d46 <_dtoa_r+0x346>
 8006d9e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006da0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f000 80b7 	beq.w	8006f18 <_dtoa_r+0x518>
 8006daa:	4b86      	ldr	r3, [pc, #536]	@ (8006fc4 <_dtoa_r+0x5c4>)
 8006dac:	2200      	movs	r2, #0
 8006dae:	4620      	mov	r0, r4
 8006db0:	4629      	mov	r1, r5
 8006db2:	f7f9 fe93 	bl	8000adc <__aeabi_dcmplt>
 8006db6:	2800      	cmp	r0, #0
 8006db8:	f000 80ae 	beq.w	8006f18 <_dtoa_r+0x518>
 8006dbc:	9b07      	ldr	r3, [sp, #28]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 80aa 	beq.w	8006f18 <_dtoa_r+0x518>
 8006dc4:	9b00      	ldr	r3, [sp, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	dd37      	ble.n	8006e3a <_dtoa_r+0x43a>
 8006dca:	1e7b      	subs	r3, r7, #1
 8006dcc:	9304      	str	r3, [sp, #16]
 8006dce:	4620      	mov	r0, r4
 8006dd0:	4b7d      	ldr	r3, [pc, #500]	@ (8006fc8 <_dtoa_r+0x5c8>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	4629      	mov	r1, r5
 8006dd6:	f7f9 fc0f 	bl	80005f8 <__aeabi_dmul>
 8006dda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dde:	9c00      	ldr	r4, [sp, #0]
 8006de0:	3601      	adds	r6, #1
 8006de2:	4630      	mov	r0, r6
 8006de4:	f7f9 fb9e 	bl	8000524 <__aeabi_i2d>
 8006de8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006dec:	f7f9 fc04 	bl	80005f8 <__aeabi_dmul>
 8006df0:	4b76      	ldr	r3, [pc, #472]	@ (8006fcc <_dtoa_r+0x5cc>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	f7f9 fa4a 	bl	800028c <__adddf3>
 8006df8:	4605      	mov	r5, r0
 8006dfa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006dfe:	2c00      	cmp	r4, #0
 8006e00:	f040 808d 	bne.w	8006f1e <_dtoa_r+0x51e>
 8006e04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e08:	4b71      	ldr	r3, [pc, #452]	@ (8006fd0 <_dtoa_r+0x5d0>)
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f7f9 fa3c 	bl	8000288 <__aeabi_dsub>
 8006e10:	4602      	mov	r2, r0
 8006e12:	460b      	mov	r3, r1
 8006e14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e18:	462a      	mov	r2, r5
 8006e1a:	4633      	mov	r3, r6
 8006e1c:	f7f9 fe7c 	bl	8000b18 <__aeabi_dcmpgt>
 8006e20:	2800      	cmp	r0, #0
 8006e22:	f040 828b 	bne.w	800733c <_dtoa_r+0x93c>
 8006e26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e2a:	462a      	mov	r2, r5
 8006e2c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006e30:	f7f9 fe54 	bl	8000adc <__aeabi_dcmplt>
 8006e34:	2800      	cmp	r0, #0
 8006e36:	f040 8128 	bne.w	800708a <_dtoa_r+0x68a>
 8006e3a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006e3e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006e42:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f2c0 815a 	blt.w	80070fe <_dtoa_r+0x6fe>
 8006e4a:	2f0e      	cmp	r7, #14
 8006e4c:	f300 8157 	bgt.w	80070fe <_dtoa_r+0x6fe>
 8006e50:	4b5a      	ldr	r3, [pc, #360]	@ (8006fbc <_dtoa_r+0x5bc>)
 8006e52:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e56:	ed93 7b00 	vldr	d7, [r3]
 8006e5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	ed8d 7b00 	vstr	d7, [sp]
 8006e62:	da03      	bge.n	8006e6c <_dtoa_r+0x46c>
 8006e64:	9b07      	ldr	r3, [sp, #28]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f340 8101 	ble.w	800706e <_dtoa_r+0x66e>
 8006e6c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006e70:	4656      	mov	r6, sl
 8006e72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e76:	4620      	mov	r0, r4
 8006e78:	4629      	mov	r1, r5
 8006e7a:	f7f9 fce7 	bl	800084c <__aeabi_ddiv>
 8006e7e:	f7f9 fe6b 	bl	8000b58 <__aeabi_d2iz>
 8006e82:	4680      	mov	r8, r0
 8006e84:	f7f9 fb4e 	bl	8000524 <__aeabi_i2d>
 8006e88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e8c:	f7f9 fbb4 	bl	80005f8 <__aeabi_dmul>
 8006e90:	4602      	mov	r2, r0
 8006e92:	460b      	mov	r3, r1
 8006e94:	4620      	mov	r0, r4
 8006e96:	4629      	mov	r1, r5
 8006e98:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006e9c:	f7f9 f9f4 	bl	8000288 <__aeabi_dsub>
 8006ea0:	f806 4b01 	strb.w	r4, [r6], #1
 8006ea4:	9d07      	ldr	r5, [sp, #28]
 8006ea6:	eba6 040a 	sub.w	r4, r6, sl
 8006eaa:	42a5      	cmp	r5, r4
 8006eac:	4602      	mov	r2, r0
 8006eae:	460b      	mov	r3, r1
 8006eb0:	f040 8117 	bne.w	80070e2 <_dtoa_r+0x6e2>
 8006eb4:	f7f9 f9ea 	bl	800028c <__adddf3>
 8006eb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ebc:	4604      	mov	r4, r0
 8006ebe:	460d      	mov	r5, r1
 8006ec0:	f7f9 fe2a 	bl	8000b18 <__aeabi_dcmpgt>
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	f040 80f9 	bne.w	80070bc <_dtoa_r+0x6bc>
 8006eca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ece:	4620      	mov	r0, r4
 8006ed0:	4629      	mov	r1, r5
 8006ed2:	f7f9 fdf9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ed6:	b118      	cbz	r0, 8006ee0 <_dtoa_r+0x4e0>
 8006ed8:	f018 0f01 	tst.w	r8, #1
 8006edc:	f040 80ee 	bne.w	80070bc <_dtoa_r+0x6bc>
 8006ee0:	4649      	mov	r1, r9
 8006ee2:	4658      	mov	r0, fp
 8006ee4:	f000 fc90 	bl	8007808 <_Bfree>
 8006ee8:	2300      	movs	r3, #0
 8006eea:	7033      	strb	r3, [r6, #0]
 8006eec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006eee:	3701      	adds	r7, #1
 8006ef0:	601f      	str	r7, [r3, #0]
 8006ef2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f000 831d 	beq.w	8007534 <_dtoa_r+0xb34>
 8006efa:	601e      	str	r6, [r3, #0]
 8006efc:	e31a      	b.n	8007534 <_dtoa_r+0xb34>
 8006efe:	07e2      	lsls	r2, r4, #31
 8006f00:	d505      	bpl.n	8006f0e <_dtoa_r+0x50e>
 8006f02:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f06:	f7f9 fb77 	bl	80005f8 <__aeabi_dmul>
 8006f0a:	3601      	adds	r6, #1
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	1064      	asrs	r4, r4, #1
 8006f10:	3508      	adds	r5, #8
 8006f12:	e73f      	b.n	8006d94 <_dtoa_r+0x394>
 8006f14:	2602      	movs	r6, #2
 8006f16:	e742      	b.n	8006d9e <_dtoa_r+0x39e>
 8006f18:	9c07      	ldr	r4, [sp, #28]
 8006f1a:	9704      	str	r7, [sp, #16]
 8006f1c:	e761      	b.n	8006de2 <_dtoa_r+0x3e2>
 8006f1e:	4b27      	ldr	r3, [pc, #156]	@ (8006fbc <_dtoa_r+0x5bc>)
 8006f20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f22:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f26:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f2a:	4454      	add	r4, sl
 8006f2c:	2900      	cmp	r1, #0
 8006f2e:	d053      	beq.n	8006fd8 <_dtoa_r+0x5d8>
 8006f30:	4928      	ldr	r1, [pc, #160]	@ (8006fd4 <_dtoa_r+0x5d4>)
 8006f32:	2000      	movs	r0, #0
 8006f34:	f7f9 fc8a 	bl	800084c <__aeabi_ddiv>
 8006f38:	4633      	mov	r3, r6
 8006f3a:	462a      	mov	r2, r5
 8006f3c:	f7f9 f9a4 	bl	8000288 <__aeabi_dsub>
 8006f40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006f44:	4656      	mov	r6, sl
 8006f46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f4a:	f7f9 fe05 	bl	8000b58 <__aeabi_d2iz>
 8006f4e:	4605      	mov	r5, r0
 8006f50:	f7f9 fae8 	bl	8000524 <__aeabi_i2d>
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f5c:	f7f9 f994 	bl	8000288 <__aeabi_dsub>
 8006f60:	3530      	adds	r5, #48	@ 0x30
 8006f62:	4602      	mov	r2, r0
 8006f64:	460b      	mov	r3, r1
 8006f66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f6a:	f806 5b01 	strb.w	r5, [r6], #1
 8006f6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f72:	f7f9 fdb3 	bl	8000adc <__aeabi_dcmplt>
 8006f76:	2800      	cmp	r0, #0
 8006f78:	d171      	bne.n	800705e <_dtoa_r+0x65e>
 8006f7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f7e:	4911      	ldr	r1, [pc, #68]	@ (8006fc4 <_dtoa_r+0x5c4>)
 8006f80:	2000      	movs	r0, #0
 8006f82:	f7f9 f981 	bl	8000288 <__aeabi_dsub>
 8006f86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f8a:	f7f9 fda7 	bl	8000adc <__aeabi_dcmplt>
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	f040 8095 	bne.w	80070be <_dtoa_r+0x6be>
 8006f94:	42a6      	cmp	r6, r4
 8006f96:	f43f af50 	beq.w	8006e3a <_dtoa_r+0x43a>
 8006f9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8006fc8 <_dtoa_r+0x5c8>)
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f7f9 fb29 	bl	80005f8 <__aeabi_dmul>
 8006fa6:	4b08      	ldr	r3, [pc, #32]	@ (8006fc8 <_dtoa_r+0x5c8>)
 8006fa8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006fac:	2200      	movs	r2, #0
 8006fae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fb2:	f7f9 fb21 	bl	80005f8 <__aeabi_dmul>
 8006fb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fba:	e7c4      	b.n	8006f46 <_dtoa_r+0x546>
 8006fbc:	08009430 	.word	0x08009430
 8006fc0:	08009408 	.word	0x08009408
 8006fc4:	3ff00000 	.word	0x3ff00000
 8006fc8:	40240000 	.word	0x40240000
 8006fcc:	401c0000 	.word	0x401c0000
 8006fd0:	40140000 	.word	0x40140000
 8006fd4:	3fe00000 	.word	0x3fe00000
 8006fd8:	4631      	mov	r1, r6
 8006fda:	4628      	mov	r0, r5
 8006fdc:	f7f9 fb0c 	bl	80005f8 <__aeabi_dmul>
 8006fe0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006fe4:	9415      	str	r4, [sp, #84]	@ 0x54
 8006fe6:	4656      	mov	r6, sl
 8006fe8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fec:	f7f9 fdb4 	bl	8000b58 <__aeabi_d2iz>
 8006ff0:	4605      	mov	r5, r0
 8006ff2:	f7f9 fa97 	bl	8000524 <__aeabi_i2d>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ffe:	f7f9 f943 	bl	8000288 <__aeabi_dsub>
 8007002:	3530      	adds	r5, #48	@ 0x30
 8007004:	f806 5b01 	strb.w	r5, [r6], #1
 8007008:	4602      	mov	r2, r0
 800700a:	460b      	mov	r3, r1
 800700c:	42a6      	cmp	r6, r4
 800700e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007012:	f04f 0200 	mov.w	r2, #0
 8007016:	d124      	bne.n	8007062 <_dtoa_r+0x662>
 8007018:	4bac      	ldr	r3, [pc, #688]	@ (80072cc <_dtoa_r+0x8cc>)
 800701a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800701e:	f7f9 f935 	bl	800028c <__adddf3>
 8007022:	4602      	mov	r2, r0
 8007024:	460b      	mov	r3, r1
 8007026:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800702a:	f7f9 fd75 	bl	8000b18 <__aeabi_dcmpgt>
 800702e:	2800      	cmp	r0, #0
 8007030:	d145      	bne.n	80070be <_dtoa_r+0x6be>
 8007032:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007036:	49a5      	ldr	r1, [pc, #660]	@ (80072cc <_dtoa_r+0x8cc>)
 8007038:	2000      	movs	r0, #0
 800703a:	f7f9 f925 	bl	8000288 <__aeabi_dsub>
 800703e:	4602      	mov	r2, r0
 8007040:	460b      	mov	r3, r1
 8007042:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007046:	f7f9 fd49 	bl	8000adc <__aeabi_dcmplt>
 800704a:	2800      	cmp	r0, #0
 800704c:	f43f aef5 	beq.w	8006e3a <_dtoa_r+0x43a>
 8007050:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007052:	1e73      	subs	r3, r6, #1
 8007054:	9315      	str	r3, [sp, #84]	@ 0x54
 8007056:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800705a:	2b30      	cmp	r3, #48	@ 0x30
 800705c:	d0f8      	beq.n	8007050 <_dtoa_r+0x650>
 800705e:	9f04      	ldr	r7, [sp, #16]
 8007060:	e73e      	b.n	8006ee0 <_dtoa_r+0x4e0>
 8007062:	4b9b      	ldr	r3, [pc, #620]	@ (80072d0 <_dtoa_r+0x8d0>)
 8007064:	f7f9 fac8 	bl	80005f8 <__aeabi_dmul>
 8007068:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800706c:	e7bc      	b.n	8006fe8 <_dtoa_r+0x5e8>
 800706e:	d10c      	bne.n	800708a <_dtoa_r+0x68a>
 8007070:	4b98      	ldr	r3, [pc, #608]	@ (80072d4 <_dtoa_r+0x8d4>)
 8007072:	2200      	movs	r2, #0
 8007074:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007078:	f7f9 fabe 	bl	80005f8 <__aeabi_dmul>
 800707c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007080:	f7f9 fd40 	bl	8000b04 <__aeabi_dcmpge>
 8007084:	2800      	cmp	r0, #0
 8007086:	f000 8157 	beq.w	8007338 <_dtoa_r+0x938>
 800708a:	2400      	movs	r4, #0
 800708c:	4625      	mov	r5, r4
 800708e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007090:	43db      	mvns	r3, r3
 8007092:	9304      	str	r3, [sp, #16]
 8007094:	4656      	mov	r6, sl
 8007096:	2700      	movs	r7, #0
 8007098:	4621      	mov	r1, r4
 800709a:	4658      	mov	r0, fp
 800709c:	f000 fbb4 	bl	8007808 <_Bfree>
 80070a0:	2d00      	cmp	r5, #0
 80070a2:	d0dc      	beq.n	800705e <_dtoa_r+0x65e>
 80070a4:	b12f      	cbz	r7, 80070b2 <_dtoa_r+0x6b2>
 80070a6:	42af      	cmp	r7, r5
 80070a8:	d003      	beq.n	80070b2 <_dtoa_r+0x6b2>
 80070aa:	4639      	mov	r1, r7
 80070ac:	4658      	mov	r0, fp
 80070ae:	f000 fbab 	bl	8007808 <_Bfree>
 80070b2:	4629      	mov	r1, r5
 80070b4:	4658      	mov	r0, fp
 80070b6:	f000 fba7 	bl	8007808 <_Bfree>
 80070ba:	e7d0      	b.n	800705e <_dtoa_r+0x65e>
 80070bc:	9704      	str	r7, [sp, #16]
 80070be:	4633      	mov	r3, r6
 80070c0:	461e      	mov	r6, r3
 80070c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070c6:	2a39      	cmp	r2, #57	@ 0x39
 80070c8:	d107      	bne.n	80070da <_dtoa_r+0x6da>
 80070ca:	459a      	cmp	sl, r3
 80070cc:	d1f8      	bne.n	80070c0 <_dtoa_r+0x6c0>
 80070ce:	9a04      	ldr	r2, [sp, #16]
 80070d0:	3201      	adds	r2, #1
 80070d2:	9204      	str	r2, [sp, #16]
 80070d4:	2230      	movs	r2, #48	@ 0x30
 80070d6:	f88a 2000 	strb.w	r2, [sl]
 80070da:	781a      	ldrb	r2, [r3, #0]
 80070dc:	3201      	adds	r2, #1
 80070de:	701a      	strb	r2, [r3, #0]
 80070e0:	e7bd      	b.n	800705e <_dtoa_r+0x65e>
 80070e2:	4b7b      	ldr	r3, [pc, #492]	@ (80072d0 <_dtoa_r+0x8d0>)
 80070e4:	2200      	movs	r2, #0
 80070e6:	f7f9 fa87 	bl	80005f8 <__aeabi_dmul>
 80070ea:	2200      	movs	r2, #0
 80070ec:	2300      	movs	r3, #0
 80070ee:	4604      	mov	r4, r0
 80070f0:	460d      	mov	r5, r1
 80070f2:	f7f9 fce9 	bl	8000ac8 <__aeabi_dcmpeq>
 80070f6:	2800      	cmp	r0, #0
 80070f8:	f43f aebb 	beq.w	8006e72 <_dtoa_r+0x472>
 80070fc:	e6f0      	b.n	8006ee0 <_dtoa_r+0x4e0>
 80070fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007100:	2a00      	cmp	r2, #0
 8007102:	f000 80db 	beq.w	80072bc <_dtoa_r+0x8bc>
 8007106:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007108:	2a01      	cmp	r2, #1
 800710a:	f300 80bf 	bgt.w	800728c <_dtoa_r+0x88c>
 800710e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007110:	2a00      	cmp	r2, #0
 8007112:	f000 80b7 	beq.w	8007284 <_dtoa_r+0x884>
 8007116:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800711a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800711c:	4646      	mov	r6, r8
 800711e:	9a08      	ldr	r2, [sp, #32]
 8007120:	2101      	movs	r1, #1
 8007122:	441a      	add	r2, r3
 8007124:	4658      	mov	r0, fp
 8007126:	4498      	add	r8, r3
 8007128:	9208      	str	r2, [sp, #32]
 800712a:	f000 fc21 	bl	8007970 <__i2b>
 800712e:	4605      	mov	r5, r0
 8007130:	b15e      	cbz	r6, 800714a <_dtoa_r+0x74a>
 8007132:	9b08      	ldr	r3, [sp, #32]
 8007134:	2b00      	cmp	r3, #0
 8007136:	dd08      	ble.n	800714a <_dtoa_r+0x74a>
 8007138:	42b3      	cmp	r3, r6
 800713a:	9a08      	ldr	r2, [sp, #32]
 800713c:	bfa8      	it	ge
 800713e:	4633      	movge	r3, r6
 8007140:	eba8 0803 	sub.w	r8, r8, r3
 8007144:	1af6      	subs	r6, r6, r3
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	9308      	str	r3, [sp, #32]
 800714a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800714c:	b1f3      	cbz	r3, 800718c <_dtoa_r+0x78c>
 800714e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007150:	2b00      	cmp	r3, #0
 8007152:	f000 80b7 	beq.w	80072c4 <_dtoa_r+0x8c4>
 8007156:	b18c      	cbz	r4, 800717c <_dtoa_r+0x77c>
 8007158:	4629      	mov	r1, r5
 800715a:	4622      	mov	r2, r4
 800715c:	4658      	mov	r0, fp
 800715e:	f000 fcc7 	bl	8007af0 <__pow5mult>
 8007162:	464a      	mov	r2, r9
 8007164:	4601      	mov	r1, r0
 8007166:	4605      	mov	r5, r0
 8007168:	4658      	mov	r0, fp
 800716a:	f000 fc17 	bl	800799c <__multiply>
 800716e:	4649      	mov	r1, r9
 8007170:	9004      	str	r0, [sp, #16]
 8007172:	4658      	mov	r0, fp
 8007174:	f000 fb48 	bl	8007808 <_Bfree>
 8007178:	9b04      	ldr	r3, [sp, #16]
 800717a:	4699      	mov	r9, r3
 800717c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800717e:	1b1a      	subs	r2, r3, r4
 8007180:	d004      	beq.n	800718c <_dtoa_r+0x78c>
 8007182:	4649      	mov	r1, r9
 8007184:	4658      	mov	r0, fp
 8007186:	f000 fcb3 	bl	8007af0 <__pow5mult>
 800718a:	4681      	mov	r9, r0
 800718c:	2101      	movs	r1, #1
 800718e:	4658      	mov	r0, fp
 8007190:	f000 fbee 	bl	8007970 <__i2b>
 8007194:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007196:	4604      	mov	r4, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 81cf 	beq.w	800753c <_dtoa_r+0xb3c>
 800719e:	461a      	mov	r2, r3
 80071a0:	4601      	mov	r1, r0
 80071a2:	4658      	mov	r0, fp
 80071a4:	f000 fca4 	bl	8007af0 <__pow5mult>
 80071a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	4604      	mov	r4, r0
 80071ae:	f300 8095 	bgt.w	80072dc <_dtoa_r+0x8dc>
 80071b2:	9b02      	ldr	r3, [sp, #8]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f040 8087 	bne.w	80072c8 <_dtoa_r+0x8c8>
 80071ba:	9b03      	ldr	r3, [sp, #12]
 80071bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f040 8089 	bne.w	80072d8 <_dtoa_r+0x8d8>
 80071c6:	9b03      	ldr	r3, [sp, #12]
 80071c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80071cc:	0d1b      	lsrs	r3, r3, #20
 80071ce:	051b      	lsls	r3, r3, #20
 80071d0:	b12b      	cbz	r3, 80071de <_dtoa_r+0x7de>
 80071d2:	9b08      	ldr	r3, [sp, #32]
 80071d4:	3301      	adds	r3, #1
 80071d6:	9308      	str	r3, [sp, #32]
 80071d8:	f108 0801 	add.w	r8, r8, #1
 80071dc:	2301      	movs	r3, #1
 80071de:	930a      	str	r3, [sp, #40]	@ 0x28
 80071e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f000 81b0 	beq.w	8007548 <_dtoa_r+0xb48>
 80071e8:	6923      	ldr	r3, [r4, #16]
 80071ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80071ee:	6918      	ldr	r0, [r3, #16]
 80071f0:	f000 fb72 	bl	80078d8 <__hi0bits>
 80071f4:	f1c0 0020 	rsb	r0, r0, #32
 80071f8:	9b08      	ldr	r3, [sp, #32]
 80071fa:	4418      	add	r0, r3
 80071fc:	f010 001f 	ands.w	r0, r0, #31
 8007200:	d077      	beq.n	80072f2 <_dtoa_r+0x8f2>
 8007202:	f1c0 0320 	rsb	r3, r0, #32
 8007206:	2b04      	cmp	r3, #4
 8007208:	dd6b      	ble.n	80072e2 <_dtoa_r+0x8e2>
 800720a:	9b08      	ldr	r3, [sp, #32]
 800720c:	f1c0 001c 	rsb	r0, r0, #28
 8007210:	4403      	add	r3, r0
 8007212:	4480      	add	r8, r0
 8007214:	4406      	add	r6, r0
 8007216:	9308      	str	r3, [sp, #32]
 8007218:	f1b8 0f00 	cmp.w	r8, #0
 800721c:	dd05      	ble.n	800722a <_dtoa_r+0x82a>
 800721e:	4649      	mov	r1, r9
 8007220:	4642      	mov	r2, r8
 8007222:	4658      	mov	r0, fp
 8007224:	f000 fcbe 	bl	8007ba4 <__lshift>
 8007228:	4681      	mov	r9, r0
 800722a:	9b08      	ldr	r3, [sp, #32]
 800722c:	2b00      	cmp	r3, #0
 800722e:	dd05      	ble.n	800723c <_dtoa_r+0x83c>
 8007230:	4621      	mov	r1, r4
 8007232:	461a      	mov	r2, r3
 8007234:	4658      	mov	r0, fp
 8007236:	f000 fcb5 	bl	8007ba4 <__lshift>
 800723a:	4604      	mov	r4, r0
 800723c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800723e:	2b00      	cmp	r3, #0
 8007240:	d059      	beq.n	80072f6 <_dtoa_r+0x8f6>
 8007242:	4621      	mov	r1, r4
 8007244:	4648      	mov	r0, r9
 8007246:	f000 fd19 	bl	8007c7c <__mcmp>
 800724a:	2800      	cmp	r0, #0
 800724c:	da53      	bge.n	80072f6 <_dtoa_r+0x8f6>
 800724e:	1e7b      	subs	r3, r7, #1
 8007250:	9304      	str	r3, [sp, #16]
 8007252:	4649      	mov	r1, r9
 8007254:	2300      	movs	r3, #0
 8007256:	220a      	movs	r2, #10
 8007258:	4658      	mov	r0, fp
 800725a:	f000 faf7 	bl	800784c <__multadd>
 800725e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007260:	4681      	mov	r9, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	f000 8172 	beq.w	800754c <_dtoa_r+0xb4c>
 8007268:	2300      	movs	r3, #0
 800726a:	4629      	mov	r1, r5
 800726c:	220a      	movs	r2, #10
 800726e:	4658      	mov	r0, fp
 8007270:	f000 faec 	bl	800784c <__multadd>
 8007274:	9b00      	ldr	r3, [sp, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	4605      	mov	r5, r0
 800727a:	dc67      	bgt.n	800734c <_dtoa_r+0x94c>
 800727c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800727e:	2b02      	cmp	r3, #2
 8007280:	dc41      	bgt.n	8007306 <_dtoa_r+0x906>
 8007282:	e063      	b.n	800734c <_dtoa_r+0x94c>
 8007284:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007286:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800728a:	e746      	b.n	800711a <_dtoa_r+0x71a>
 800728c:	9b07      	ldr	r3, [sp, #28]
 800728e:	1e5c      	subs	r4, r3, #1
 8007290:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007292:	42a3      	cmp	r3, r4
 8007294:	bfbf      	itttt	lt
 8007296:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007298:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800729a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800729c:	1ae3      	sublt	r3, r4, r3
 800729e:	bfb4      	ite	lt
 80072a0:	18d2      	addlt	r2, r2, r3
 80072a2:	1b1c      	subge	r4, r3, r4
 80072a4:	9b07      	ldr	r3, [sp, #28]
 80072a6:	bfbc      	itt	lt
 80072a8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80072aa:	2400      	movlt	r4, #0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	bfb5      	itete	lt
 80072b0:	eba8 0603 	sublt.w	r6, r8, r3
 80072b4:	9b07      	ldrge	r3, [sp, #28]
 80072b6:	2300      	movlt	r3, #0
 80072b8:	4646      	movge	r6, r8
 80072ba:	e730      	b.n	800711e <_dtoa_r+0x71e>
 80072bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80072be:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80072c0:	4646      	mov	r6, r8
 80072c2:	e735      	b.n	8007130 <_dtoa_r+0x730>
 80072c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80072c6:	e75c      	b.n	8007182 <_dtoa_r+0x782>
 80072c8:	2300      	movs	r3, #0
 80072ca:	e788      	b.n	80071de <_dtoa_r+0x7de>
 80072cc:	3fe00000 	.word	0x3fe00000
 80072d0:	40240000 	.word	0x40240000
 80072d4:	40140000 	.word	0x40140000
 80072d8:	9b02      	ldr	r3, [sp, #8]
 80072da:	e780      	b.n	80071de <_dtoa_r+0x7de>
 80072dc:	2300      	movs	r3, #0
 80072de:	930a      	str	r3, [sp, #40]	@ 0x28
 80072e0:	e782      	b.n	80071e8 <_dtoa_r+0x7e8>
 80072e2:	d099      	beq.n	8007218 <_dtoa_r+0x818>
 80072e4:	9a08      	ldr	r2, [sp, #32]
 80072e6:	331c      	adds	r3, #28
 80072e8:	441a      	add	r2, r3
 80072ea:	4498      	add	r8, r3
 80072ec:	441e      	add	r6, r3
 80072ee:	9208      	str	r2, [sp, #32]
 80072f0:	e792      	b.n	8007218 <_dtoa_r+0x818>
 80072f2:	4603      	mov	r3, r0
 80072f4:	e7f6      	b.n	80072e4 <_dtoa_r+0x8e4>
 80072f6:	9b07      	ldr	r3, [sp, #28]
 80072f8:	9704      	str	r7, [sp, #16]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	dc20      	bgt.n	8007340 <_dtoa_r+0x940>
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007302:	2b02      	cmp	r3, #2
 8007304:	dd1e      	ble.n	8007344 <_dtoa_r+0x944>
 8007306:	9b00      	ldr	r3, [sp, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	f47f aec0 	bne.w	800708e <_dtoa_r+0x68e>
 800730e:	4621      	mov	r1, r4
 8007310:	2205      	movs	r2, #5
 8007312:	4658      	mov	r0, fp
 8007314:	f000 fa9a 	bl	800784c <__multadd>
 8007318:	4601      	mov	r1, r0
 800731a:	4604      	mov	r4, r0
 800731c:	4648      	mov	r0, r9
 800731e:	f000 fcad 	bl	8007c7c <__mcmp>
 8007322:	2800      	cmp	r0, #0
 8007324:	f77f aeb3 	ble.w	800708e <_dtoa_r+0x68e>
 8007328:	4656      	mov	r6, sl
 800732a:	2331      	movs	r3, #49	@ 0x31
 800732c:	f806 3b01 	strb.w	r3, [r6], #1
 8007330:	9b04      	ldr	r3, [sp, #16]
 8007332:	3301      	adds	r3, #1
 8007334:	9304      	str	r3, [sp, #16]
 8007336:	e6ae      	b.n	8007096 <_dtoa_r+0x696>
 8007338:	9c07      	ldr	r4, [sp, #28]
 800733a:	9704      	str	r7, [sp, #16]
 800733c:	4625      	mov	r5, r4
 800733e:	e7f3      	b.n	8007328 <_dtoa_r+0x928>
 8007340:	9b07      	ldr	r3, [sp, #28]
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007346:	2b00      	cmp	r3, #0
 8007348:	f000 8104 	beq.w	8007554 <_dtoa_r+0xb54>
 800734c:	2e00      	cmp	r6, #0
 800734e:	dd05      	ble.n	800735c <_dtoa_r+0x95c>
 8007350:	4629      	mov	r1, r5
 8007352:	4632      	mov	r2, r6
 8007354:	4658      	mov	r0, fp
 8007356:	f000 fc25 	bl	8007ba4 <__lshift>
 800735a:	4605      	mov	r5, r0
 800735c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800735e:	2b00      	cmp	r3, #0
 8007360:	d05a      	beq.n	8007418 <_dtoa_r+0xa18>
 8007362:	6869      	ldr	r1, [r5, #4]
 8007364:	4658      	mov	r0, fp
 8007366:	f000 fa0f 	bl	8007788 <_Balloc>
 800736a:	4606      	mov	r6, r0
 800736c:	b928      	cbnz	r0, 800737a <_dtoa_r+0x97a>
 800736e:	4b84      	ldr	r3, [pc, #528]	@ (8007580 <_dtoa_r+0xb80>)
 8007370:	4602      	mov	r2, r0
 8007372:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007376:	f7ff bb5a 	b.w	8006a2e <_dtoa_r+0x2e>
 800737a:	692a      	ldr	r2, [r5, #16]
 800737c:	3202      	adds	r2, #2
 800737e:	0092      	lsls	r2, r2, #2
 8007380:	f105 010c 	add.w	r1, r5, #12
 8007384:	300c      	adds	r0, #12
 8007386:	f7ff faa4 	bl	80068d2 <memcpy>
 800738a:	2201      	movs	r2, #1
 800738c:	4631      	mov	r1, r6
 800738e:	4658      	mov	r0, fp
 8007390:	f000 fc08 	bl	8007ba4 <__lshift>
 8007394:	f10a 0301 	add.w	r3, sl, #1
 8007398:	9307      	str	r3, [sp, #28]
 800739a:	9b00      	ldr	r3, [sp, #0]
 800739c:	4453      	add	r3, sl
 800739e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073a0:	9b02      	ldr	r3, [sp, #8]
 80073a2:	f003 0301 	and.w	r3, r3, #1
 80073a6:	462f      	mov	r7, r5
 80073a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80073aa:	4605      	mov	r5, r0
 80073ac:	9b07      	ldr	r3, [sp, #28]
 80073ae:	4621      	mov	r1, r4
 80073b0:	3b01      	subs	r3, #1
 80073b2:	4648      	mov	r0, r9
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	f7ff fa9a 	bl	80068ee <quorem>
 80073ba:	4639      	mov	r1, r7
 80073bc:	9002      	str	r0, [sp, #8]
 80073be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80073c2:	4648      	mov	r0, r9
 80073c4:	f000 fc5a 	bl	8007c7c <__mcmp>
 80073c8:	462a      	mov	r2, r5
 80073ca:	9008      	str	r0, [sp, #32]
 80073cc:	4621      	mov	r1, r4
 80073ce:	4658      	mov	r0, fp
 80073d0:	f000 fc70 	bl	8007cb4 <__mdiff>
 80073d4:	68c2      	ldr	r2, [r0, #12]
 80073d6:	4606      	mov	r6, r0
 80073d8:	bb02      	cbnz	r2, 800741c <_dtoa_r+0xa1c>
 80073da:	4601      	mov	r1, r0
 80073dc:	4648      	mov	r0, r9
 80073de:	f000 fc4d 	bl	8007c7c <__mcmp>
 80073e2:	4602      	mov	r2, r0
 80073e4:	4631      	mov	r1, r6
 80073e6:	4658      	mov	r0, fp
 80073e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80073ea:	f000 fa0d 	bl	8007808 <_Bfree>
 80073ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80073f2:	9e07      	ldr	r6, [sp, #28]
 80073f4:	ea43 0102 	orr.w	r1, r3, r2
 80073f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073fa:	4319      	orrs	r1, r3
 80073fc:	d110      	bne.n	8007420 <_dtoa_r+0xa20>
 80073fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007402:	d029      	beq.n	8007458 <_dtoa_r+0xa58>
 8007404:	9b08      	ldr	r3, [sp, #32]
 8007406:	2b00      	cmp	r3, #0
 8007408:	dd02      	ble.n	8007410 <_dtoa_r+0xa10>
 800740a:	9b02      	ldr	r3, [sp, #8]
 800740c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007410:	9b00      	ldr	r3, [sp, #0]
 8007412:	f883 8000 	strb.w	r8, [r3]
 8007416:	e63f      	b.n	8007098 <_dtoa_r+0x698>
 8007418:	4628      	mov	r0, r5
 800741a:	e7bb      	b.n	8007394 <_dtoa_r+0x994>
 800741c:	2201      	movs	r2, #1
 800741e:	e7e1      	b.n	80073e4 <_dtoa_r+0x9e4>
 8007420:	9b08      	ldr	r3, [sp, #32]
 8007422:	2b00      	cmp	r3, #0
 8007424:	db04      	blt.n	8007430 <_dtoa_r+0xa30>
 8007426:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007428:	430b      	orrs	r3, r1
 800742a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800742c:	430b      	orrs	r3, r1
 800742e:	d120      	bne.n	8007472 <_dtoa_r+0xa72>
 8007430:	2a00      	cmp	r2, #0
 8007432:	dded      	ble.n	8007410 <_dtoa_r+0xa10>
 8007434:	4649      	mov	r1, r9
 8007436:	2201      	movs	r2, #1
 8007438:	4658      	mov	r0, fp
 800743a:	f000 fbb3 	bl	8007ba4 <__lshift>
 800743e:	4621      	mov	r1, r4
 8007440:	4681      	mov	r9, r0
 8007442:	f000 fc1b 	bl	8007c7c <__mcmp>
 8007446:	2800      	cmp	r0, #0
 8007448:	dc03      	bgt.n	8007452 <_dtoa_r+0xa52>
 800744a:	d1e1      	bne.n	8007410 <_dtoa_r+0xa10>
 800744c:	f018 0f01 	tst.w	r8, #1
 8007450:	d0de      	beq.n	8007410 <_dtoa_r+0xa10>
 8007452:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007456:	d1d8      	bne.n	800740a <_dtoa_r+0xa0a>
 8007458:	9a00      	ldr	r2, [sp, #0]
 800745a:	2339      	movs	r3, #57	@ 0x39
 800745c:	7013      	strb	r3, [r2, #0]
 800745e:	4633      	mov	r3, r6
 8007460:	461e      	mov	r6, r3
 8007462:	3b01      	subs	r3, #1
 8007464:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007468:	2a39      	cmp	r2, #57	@ 0x39
 800746a:	d052      	beq.n	8007512 <_dtoa_r+0xb12>
 800746c:	3201      	adds	r2, #1
 800746e:	701a      	strb	r2, [r3, #0]
 8007470:	e612      	b.n	8007098 <_dtoa_r+0x698>
 8007472:	2a00      	cmp	r2, #0
 8007474:	dd07      	ble.n	8007486 <_dtoa_r+0xa86>
 8007476:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800747a:	d0ed      	beq.n	8007458 <_dtoa_r+0xa58>
 800747c:	9a00      	ldr	r2, [sp, #0]
 800747e:	f108 0301 	add.w	r3, r8, #1
 8007482:	7013      	strb	r3, [r2, #0]
 8007484:	e608      	b.n	8007098 <_dtoa_r+0x698>
 8007486:	9b07      	ldr	r3, [sp, #28]
 8007488:	9a07      	ldr	r2, [sp, #28]
 800748a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800748e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007490:	4293      	cmp	r3, r2
 8007492:	d028      	beq.n	80074e6 <_dtoa_r+0xae6>
 8007494:	4649      	mov	r1, r9
 8007496:	2300      	movs	r3, #0
 8007498:	220a      	movs	r2, #10
 800749a:	4658      	mov	r0, fp
 800749c:	f000 f9d6 	bl	800784c <__multadd>
 80074a0:	42af      	cmp	r7, r5
 80074a2:	4681      	mov	r9, r0
 80074a4:	f04f 0300 	mov.w	r3, #0
 80074a8:	f04f 020a 	mov.w	r2, #10
 80074ac:	4639      	mov	r1, r7
 80074ae:	4658      	mov	r0, fp
 80074b0:	d107      	bne.n	80074c2 <_dtoa_r+0xac2>
 80074b2:	f000 f9cb 	bl	800784c <__multadd>
 80074b6:	4607      	mov	r7, r0
 80074b8:	4605      	mov	r5, r0
 80074ba:	9b07      	ldr	r3, [sp, #28]
 80074bc:	3301      	adds	r3, #1
 80074be:	9307      	str	r3, [sp, #28]
 80074c0:	e774      	b.n	80073ac <_dtoa_r+0x9ac>
 80074c2:	f000 f9c3 	bl	800784c <__multadd>
 80074c6:	4629      	mov	r1, r5
 80074c8:	4607      	mov	r7, r0
 80074ca:	2300      	movs	r3, #0
 80074cc:	220a      	movs	r2, #10
 80074ce:	4658      	mov	r0, fp
 80074d0:	f000 f9bc 	bl	800784c <__multadd>
 80074d4:	4605      	mov	r5, r0
 80074d6:	e7f0      	b.n	80074ba <_dtoa_r+0xaba>
 80074d8:	9b00      	ldr	r3, [sp, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	bfcc      	ite	gt
 80074de:	461e      	movgt	r6, r3
 80074e0:	2601      	movle	r6, #1
 80074e2:	4456      	add	r6, sl
 80074e4:	2700      	movs	r7, #0
 80074e6:	4649      	mov	r1, r9
 80074e8:	2201      	movs	r2, #1
 80074ea:	4658      	mov	r0, fp
 80074ec:	f000 fb5a 	bl	8007ba4 <__lshift>
 80074f0:	4621      	mov	r1, r4
 80074f2:	4681      	mov	r9, r0
 80074f4:	f000 fbc2 	bl	8007c7c <__mcmp>
 80074f8:	2800      	cmp	r0, #0
 80074fa:	dcb0      	bgt.n	800745e <_dtoa_r+0xa5e>
 80074fc:	d102      	bne.n	8007504 <_dtoa_r+0xb04>
 80074fe:	f018 0f01 	tst.w	r8, #1
 8007502:	d1ac      	bne.n	800745e <_dtoa_r+0xa5e>
 8007504:	4633      	mov	r3, r6
 8007506:	461e      	mov	r6, r3
 8007508:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800750c:	2a30      	cmp	r2, #48	@ 0x30
 800750e:	d0fa      	beq.n	8007506 <_dtoa_r+0xb06>
 8007510:	e5c2      	b.n	8007098 <_dtoa_r+0x698>
 8007512:	459a      	cmp	sl, r3
 8007514:	d1a4      	bne.n	8007460 <_dtoa_r+0xa60>
 8007516:	9b04      	ldr	r3, [sp, #16]
 8007518:	3301      	adds	r3, #1
 800751a:	9304      	str	r3, [sp, #16]
 800751c:	2331      	movs	r3, #49	@ 0x31
 800751e:	f88a 3000 	strb.w	r3, [sl]
 8007522:	e5b9      	b.n	8007098 <_dtoa_r+0x698>
 8007524:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007526:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007584 <_dtoa_r+0xb84>
 800752a:	b11b      	cbz	r3, 8007534 <_dtoa_r+0xb34>
 800752c:	f10a 0308 	add.w	r3, sl, #8
 8007530:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007532:	6013      	str	r3, [r2, #0]
 8007534:	4650      	mov	r0, sl
 8007536:	b019      	add	sp, #100	@ 0x64
 8007538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800753c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800753e:	2b01      	cmp	r3, #1
 8007540:	f77f ae37 	ble.w	80071b2 <_dtoa_r+0x7b2>
 8007544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007546:	930a      	str	r3, [sp, #40]	@ 0x28
 8007548:	2001      	movs	r0, #1
 800754a:	e655      	b.n	80071f8 <_dtoa_r+0x7f8>
 800754c:	9b00      	ldr	r3, [sp, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	f77f aed6 	ble.w	8007300 <_dtoa_r+0x900>
 8007554:	4656      	mov	r6, sl
 8007556:	4621      	mov	r1, r4
 8007558:	4648      	mov	r0, r9
 800755a:	f7ff f9c8 	bl	80068ee <quorem>
 800755e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007562:	f806 8b01 	strb.w	r8, [r6], #1
 8007566:	9b00      	ldr	r3, [sp, #0]
 8007568:	eba6 020a 	sub.w	r2, r6, sl
 800756c:	4293      	cmp	r3, r2
 800756e:	ddb3      	ble.n	80074d8 <_dtoa_r+0xad8>
 8007570:	4649      	mov	r1, r9
 8007572:	2300      	movs	r3, #0
 8007574:	220a      	movs	r2, #10
 8007576:	4658      	mov	r0, fp
 8007578:	f000 f968 	bl	800784c <__multadd>
 800757c:	4681      	mov	r9, r0
 800757e:	e7ea      	b.n	8007556 <_dtoa_r+0xb56>
 8007580:	08009390 	.word	0x08009390
 8007584:	08009314 	.word	0x08009314

08007588 <_free_r>:
 8007588:	b538      	push	{r3, r4, r5, lr}
 800758a:	4605      	mov	r5, r0
 800758c:	2900      	cmp	r1, #0
 800758e:	d041      	beq.n	8007614 <_free_r+0x8c>
 8007590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007594:	1f0c      	subs	r4, r1, #4
 8007596:	2b00      	cmp	r3, #0
 8007598:	bfb8      	it	lt
 800759a:	18e4      	addlt	r4, r4, r3
 800759c:	f000 f8e8 	bl	8007770 <__malloc_lock>
 80075a0:	4a1d      	ldr	r2, [pc, #116]	@ (8007618 <_free_r+0x90>)
 80075a2:	6813      	ldr	r3, [r2, #0]
 80075a4:	b933      	cbnz	r3, 80075b4 <_free_r+0x2c>
 80075a6:	6063      	str	r3, [r4, #4]
 80075a8:	6014      	str	r4, [r2, #0]
 80075aa:	4628      	mov	r0, r5
 80075ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075b0:	f000 b8e4 	b.w	800777c <__malloc_unlock>
 80075b4:	42a3      	cmp	r3, r4
 80075b6:	d908      	bls.n	80075ca <_free_r+0x42>
 80075b8:	6820      	ldr	r0, [r4, #0]
 80075ba:	1821      	adds	r1, r4, r0
 80075bc:	428b      	cmp	r3, r1
 80075be:	bf01      	itttt	eq
 80075c0:	6819      	ldreq	r1, [r3, #0]
 80075c2:	685b      	ldreq	r3, [r3, #4]
 80075c4:	1809      	addeq	r1, r1, r0
 80075c6:	6021      	streq	r1, [r4, #0]
 80075c8:	e7ed      	b.n	80075a6 <_free_r+0x1e>
 80075ca:	461a      	mov	r2, r3
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	b10b      	cbz	r3, 80075d4 <_free_r+0x4c>
 80075d0:	42a3      	cmp	r3, r4
 80075d2:	d9fa      	bls.n	80075ca <_free_r+0x42>
 80075d4:	6811      	ldr	r1, [r2, #0]
 80075d6:	1850      	adds	r0, r2, r1
 80075d8:	42a0      	cmp	r0, r4
 80075da:	d10b      	bne.n	80075f4 <_free_r+0x6c>
 80075dc:	6820      	ldr	r0, [r4, #0]
 80075de:	4401      	add	r1, r0
 80075e0:	1850      	adds	r0, r2, r1
 80075e2:	4283      	cmp	r3, r0
 80075e4:	6011      	str	r1, [r2, #0]
 80075e6:	d1e0      	bne.n	80075aa <_free_r+0x22>
 80075e8:	6818      	ldr	r0, [r3, #0]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	6053      	str	r3, [r2, #4]
 80075ee:	4408      	add	r0, r1
 80075f0:	6010      	str	r0, [r2, #0]
 80075f2:	e7da      	b.n	80075aa <_free_r+0x22>
 80075f4:	d902      	bls.n	80075fc <_free_r+0x74>
 80075f6:	230c      	movs	r3, #12
 80075f8:	602b      	str	r3, [r5, #0]
 80075fa:	e7d6      	b.n	80075aa <_free_r+0x22>
 80075fc:	6820      	ldr	r0, [r4, #0]
 80075fe:	1821      	adds	r1, r4, r0
 8007600:	428b      	cmp	r3, r1
 8007602:	bf04      	itt	eq
 8007604:	6819      	ldreq	r1, [r3, #0]
 8007606:	685b      	ldreq	r3, [r3, #4]
 8007608:	6063      	str	r3, [r4, #4]
 800760a:	bf04      	itt	eq
 800760c:	1809      	addeq	r1, r1, r0
 800760e:	6021      	streq	r1, [r4, #0]
 8007610:	6054      	str	r4, [r2, #4]
 8007612:	e7ca      	b.n	80075aa <_free_r+0x22>
 8007614:	bd38      	pop	{r3, r4, r5, pc}
 8007616:	bf00      	nop
 8007618:	20000b58 	.word	0x20000b58

0800761c <malloc>:
 800761c:	4b02      	ldr	r3, [pc, #8]	@ (8007628 <malloc+0xc>)
 800761e:	4601      	mov	r1, r0
 8007620:	6818      	ldr	r0, [r3, #0]
 8007622:	f000 b825 	b.w	8007670 <_malloc_r>
 8007626:	bf00      	nop
 8007628:	20000018 	.word	0x20000018

0800762c <sbrk_aligned>:
 800762c:	b570      	push	{r4, r5, r6, lr}
 800762e:	4e0f      	ldr	r6, [pc, #60]	@ (800766c <sbrk_aligned+0x40>)
 8007630:	460c      	mov	r4, r1
 8007632:	6831      	ldr	r1, [r6, #0]
 8007634:	4605      	mov	r5, r0
 8007636:	b911      	cbnz	r1, 800763e <sbrk_aligned+0x12>
 8007638:	f000 fcd4 	bl	8007fe4 <_sbrk_r>
 800763c:	6030      	str	r0, [r6, #0]
 800763e:	4621      	mov	r1, r4
 8007640:	4628      	mov	r0, r5
 8007642:	f000 fccf 	bl	8007fe4 <_sbrk_r>
 8007646:	1c43      	adds	r3, r0, #1
 8007648:	d103      	bne.n	8007652 <sbrk_aligned+0x26>
 800764a:	f04f 34ff 	mov.w	r4, #4294967295
 800764e:	4620      	mov	r0, r4
 8007650:	bd70      	pop	{r4, r5, r6, pc}
 8007652:	1cc4      	adds	r4, r0, #3
 8007654:	f024 0403 	bic.w	r4, r4, #3
 8007658:	42a0      	cmp	r0, r4
 800765a:	d0f8      	beq.n	800764e <sbrk_aligned+0x22>
 800765c:	1a21      	subs	r1, r4, r0
 800765e:	4628      	mov	r0, r5
 8007660:	f000 fcc0 	bl	8007fe4 <_sbrk_r>
 8007664:	3001      	adds	r0, #1
 8007666:	d1f2      	bne.n	800764e <sbrk_aligned+0x22>
 8007668:	e7ef      	b.n	800764a <sbrk_aligned+0x1e>
 800766a:	bf00      	nop
 800766c:	20000b54 	.word	0x20000b54

08007670 <_malloc_r>:
 8007670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007674:	1ccd      	adds	r5, r1, #3
 8007676:	f025 0503 	bic.w	r5, r5, #3
 800767a:	3508      	adds	r5, #8
 800767c:	2d0c      	cmp	r5, #12
 800767e:	bf38      	it	cc
 8007680:	250c      	movcc	r5, #12
 8007682:	2d00      	cmp	r5, #0
 8007684:	4606      	mov	r6, r0
 8007686:	db01      	blt.n	800768c <_malloc_r+0x1c>
 8007688:	42a9      	cmp	r1, r5
 800768a:	d904      	bls.n	8007696 <_malloc_r+0x26>
 800768c:	230c      	movs	r3, #12
 800768e:	6033      	str	r3, [r6, #0]
 8007690:	2000      	movs	r0, #0
 8007692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007696:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800776c <_malloc_r+0xfc>
 800769a:	f000 f869 	bl	8007770 <__malloc_lock>
 800769e:	f8d8 3000 	ldr.w	r3, [r8]
 80076a2:	461c      	mov	r4, r3
 80076a4:	bb44      	cbnz	r4, 80076f8 <_malloc_r+0x88>
 80076a6:	4629      	mov	r1, r5
 80076a8:	4630      	mov	r0, r6
 80076aa:	f7ff ffbf 	bl	800762c <sbrk_aligned>
 80076ae:	1c43      	adds	r3, r0, #1
 80076b0:	4604      	mov	r4, r0
 80076b2:	d158      	bne.n	8007766 <_malloc_r+0xf6>
 80076b4:	f8d8 4000 	ldr.w	r4, [r8]
 80076b8:	4627      	mov	r7, r4
 80076ba:	2f00      	cmp	r7, #0
 80076bc:	d143      	bne.n	8007746 <_malloc_r+0xd6>
 80076be:	2c00      	cmp	r4, #0
 80076c0:	d04b      	beq.n	800775a <_malloc_r+0xea>
 80076c2:	6823      	ldr	r3, [r4, #0]
 80076c4:	4639      	mov	r1, r7
 80076c6:	4630      	mov	r0, r6
 80076c8:	eb04 0903 	add.w	r9, r4, r3
 80076cc:	f000 fc8a 	bl	8007fe4 <_sbrk_r>
 80076d0:	4581      	cmp	r9, r0
 80076d2:	d142      	bne.n	800775a <_malloc_r+0xea>
 80076d4:	6821      	ldr	r1, [r4, #0]
 80076d6:	1a6d      	subs	r5, r5, r1
 80076d8:	4629      	mov	r1, r5
 80076da:	4630      	mov	r0, r6
 80076dc:	f7ff ffa6 	bl	800762c <sbrk_aligned>
 80076e0:	3001      	adds	r0, #1
 80076e2:	d03a      	beq.n	800775a <_malloc_r+0xea>
 80076e4:	6823      	ldr	r3, [r4, #0]
 80076e6:	442b      	add	r3, r5
 80076e8:	6023      	str	r3, [r4, #0]
 80076ea:	f8d8 3000 	ldr.w	r3, [r8]
 80076ee:	685a      	ldr	r2, [r3, #4]
 80076f0:	bb62      	cbnz	r2, 800774c <_malloc_r+0xdc>
 80076f2:	f8c8 7000 	str.w	r7, [r8]
 80076f6:	e00f      	b.n	8007718 <_malloc_r+0xa8>
 80076f8:	6822      	ldr	r2, [r4, #0]
 80076fa:	1b52      	subs	r2, r2, r5
 80076fc:	d420      	bmi.n	8007740 <_malloc_r+0xd0>
 80076fe:	2a0b      	cmp	r2, #11
 8007700:	d917      	bls.n	8007732 <_malloc_r+0xc2>
 8007702:	1961      	adds	r1, r4, r5
 8007704:	42a3      	cmp	r3, r4
 8007706:	6025      	str	r5, [r4, #0]
 8007708:	bf18      	it	ne
 800770a:	6059      	strne	r1, [r3, #4]
 800770c:	6863      	ldr	r3, [r4, #4]
 800770e:	bf08      	it	eq
 8007710:	f8c8 1000 	streq.w	r1, [r8]
 8007714:	5162      	str	r2, [r4, r5]
 8007716:	604b      	str	r3, [r1, #4]
 8007718:	4630      	mov	r0, r6
 800771a:	f000 f82f 	bl	800777c <__malloc_unlock>
 800771e:	f104 000b 	add.w	r0, r4, #11
 8007722:	1d23      	adds	r3, r4, #4
 8007724:	f020 0007 	bic.w	r0, r0, #7
 8007728:	1ac2      	subs	r2, r0, r3
 800772a:	bf1c      	itt	ne
 800772c:	1a1b      	subne	r3, r3, r0
 800772e:	50a3      	strne	r3, [r4, r2]
 8007730:	e7af      	b.n	8007692 <_malloc_r+0x22>
 8007732:	6862      	ldr	r2, [r4, #4]
 8007734:	42a3      	cmp	r3, r4
 8007736:	bf0c      	ite	eq
 8007738:	f8c8 2000 	streq.w	r2, [r8]
 800773c:	605a      	strne	r2, [r3, #4]
 800773e:	e7eb      	b.n	8007718 <_malloc_r+0xa8>
 8007740:	4623      	mov	r3, r4
 8007742:	6864      	ldr	r4, [r4, #4]
 8007744:	e7ae      	b.n	80076a4 <_malloc_r+0x34>
 8007746:	463c      	mov	r4, r7
 8007748:	687f      	ldr	r7, [r7, #4]
 800774a:	e7b6      	b.n	80076ba <_malloc_r+0x4a>
 800774c:	461a      	mov	r2, r3
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	42a3      	cmp	r3, r4
 8007752:	d1fb      	bne.n	800774c <_malloc_r+0xdc>
 8007754:	2300      	movs	r3, #0
 8007756:	6053      	str	r3, [r2, #4]
 8007758:	e7de      	b.n	8007718 <_malloc_r+0xa8>
 800775a:	230c      	movs	r3, #12
 800775c:	6033      	str	r3, [r6, #0]
 800775e:	4630      	mov	r0, r6
 8007760:	f000 f80c 	bl	800777c <__malloc_unlock>
 8007764:	e794      	b.n	8007690 <_malloc_r+0x20>
 8007766:	6005      	str	r5, [r0, #0]
 8007768:	e7d6      	b.n	8007718 <_malloc_r+0xa8>
 800776a:	bf00      	nop
 800776c:	20000b58 	.word	0x20000b58

08007770 <__malloc_lock>:
 8007770:	4801      	ldr	r0, [pc, #4]	@ (8007778 <__malloc_lock+0x8>)
 8007772:	f7ff b8ac 	b.w	80068ce <__retarget_lock_acquire_recursive>
 8007776:	bf00      	nop
 8007778:	20000b50 	.word	0x20000b50

0800777c <__malloc_unlock>:
 800777c:	4801      	ldr	r0, [pc, #4]	@ (8007784 <__malloc_unlock+0x8>)
 800777e:	f7ff b8a7 	b.w	80068d0 <__retarget_lock_release_recursive>
 8007782:	bf00      	nop
 8007784:	20000b50 	.word	0x20000b50

08007788 <_Balloc>:
 8007788:	b570      	push	{r4, r5, r6, lr}
 800778a:	69c6      	ldr	r6, [r0, #28]
 800778c:	4604      	mov	r4, r0
 800778e:	460d      	mov	r5, r1
 8007790:	b976      	cbnz	r6, 80077b0 <_Balloc+0x28>
 8007792:	2010      	movs	r0, #16
 8007794:	f7ff ff42 	bl	800761c <malloc>
 8007798:	4602      	mov	r2, r0
 800779a:	61e0      	str	r0, [r4, #28]
 800779c:	b920      	cbnz	r0, 80077a8 <_Balloc+0x20>
 800779e:	4b18      	ldr	r3, [pc, #96]	@ (8007800 <_Balloc+0x78>)
 80077a0:	4818      	ldr	r0, [pc, #96]	@ (8007804 <_Balloc+0x7c>)
 80077a2:	216b      	movs	r1, #107	@ 0x6b
 80077a4:	f000 fc2e 	bl	8008004 <__assert_func>
 80077a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077ac:	6006      	str	r6, [r0, #0]
 80077ae:	60c6      	str	r6, [r0, #12]
 80077b0:	69e6      	ldr	r6, [r4, #28]
 80077b2:	68f3      	ldr	r3, [r6, #12]
 80077b4:	b183      	cbz	r3, 80077d8 <_Balloc+0x50>
 80077b6:	69e3      	ldr	r3, [r4, #28]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077be:	b9b8      	cbnz	r0, 80077f0 <_Balloc+0x68>
 80077c0:	2101      	movs	r1, #1
 80077c2:	fa01 f605 	lsl.w	r6, r1, r5
 80077c6:	1d72      	adds	r2, r6, #5
 80077c8:	0092      	lsls	r2, r2, #2
 80077ca:	4620      	mov	r0, r4
 80077cc:	f000 fc38 	bl	8008040 <_calloc_r>
 80077d0:	b160      	cbz	r0, 80077ec <_Balloc+0x64>
 80077d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077d6:	e00e      	b.n	80077f6 <_Balloc+0x6e>
 80077d8:	2221      	movs	r2, #33	@ 0x21
 80077da:	2104      	movs	r1, #4
 80077dc:	4620      	mov	r0, r4
 80077de:	f000 fc2f 	bl	8008040 <_calloc_r>
 80077e2:	69e3      	ldr	r3, [r4, #28]
 80077e4:	60f0      	str	r0, [r6, #12]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1e4      	bne.n	80077b6 <_Balloc+0x2e>
 80077ec:	2000      	movs	r0, #0
 80077ee:	bd70      	pop	{r4, r5, r6, pc}
 80077f0:	6802      	ldr	r2, [r0, #0]
 80077f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077f6:	2300      	movs	r3, #0
 80077f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077fc:	e7f7      	b.n	80077ee <_Balloc+0x66>
 80077fe:	bf00      	nop
 8007800:	08009321 	.word	0x08009321
 8007804:	080093a1 	.word	0x080093a1

08007808 <_Bfree>:
 8007808:	b570      	push	{r4, r5, r6, lr}
 800780a:	69c6      	ldr	r6, [r0, #28]
 800780c:	4605      	mov	r5, r0
 800780e:	460c      	mov	r4, r1
 8007810:	b976      	cbnz	r6, 8007830 <_Bfree+0x28>
 8007812:	2010      	movs	r0, #16
 8007814:	f7ff ff02 	bl	800761c <malloc>
 8007818:	4602      	mov	r2, r0
 800781a:	61e8      	str	r0, [r5, #28]
 800781c:	b920      	cbnz	r0, 8007828 <_Bfree+0x20>
 800781e:	4b09      	ldr	r3, [pc, #36]	@ (8007844 <_Bfree+0x3c>)
 8007820:	4809      	ldr	r0, [pc, #36]	@ (8007848 <_Bfree+0x40>)
 8007822:	218f      	movs	r1, #143	@ 0x8f
 8007824:	f000 fbee 	bl	8008004 <__assert_func>
 8007828:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800782c:	6006      	str	r6, [r0, #0]
 800782e:	60c6      	str	r6, [r0, #12]
 8007830:	b13c      	cbz	r4, 8007842 <_Bfree+0x3a>
 8007832:	69eb      	ldr	r3, [r5, #28]
 8007834:	6862      	ldr	r2, [r4, #4]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800783c:	6021      	str	r1, [r4, #0]
 800783e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007842:	bd70      	pop	{r4, r5, r6, pc}
 8007844:	08009321 	.word	0x08009321
 8007848:	080093a1 	.word	0x080093a1

0800784c <__multadd>:
 800784c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007850:	690d      	ldr	r5, [r1, #16]
 8007852:	4607      	mov	r7, r0
 8007854:	460c      	mov	r4, r1
 8007856:	461e      	mov	r6, r3
 8007858:	f101 0c14 	add.w	ip, r1, #20
 800785c:	2000      	movs	r0, #0
 800785e:	f8dc 3000 	ldr.w	r3, [ip]
 8007862:	b299      	uxth	r1, r3
 8007864:	fb02 6101 	mla	r1, r2, r1, r6
 8007868:	0c1e      	lsrs	r6, r3, #16
 800786a:	0c0b      	lsrs	r3, r1, #16
 800786c:	fb02 3306 	mla	r3, r2, r6, r3
 8007870:	b289      	uxth	r1, r1
 8007872:	3001      	adds	r0, #1
 8007874:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007878:	4285      	cmp	r5, r0
 800787a:	f84c 1b04 	str.w	r1, [ip], #4
 800787e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007882:	dcec      	bgt.n	800785e <__multadd+0x12>
 8007884:	b30e      	cbz	r6, 80078ca <__multadd+0x7e>
 8007886:	68a3      	ldr	r3, [r4, #8]
 8007888:	42ab      	cmp	r3, r5
 800788a:	dc19      	bgt.n	80078c0 <__multadd+0x74>
 800788c:	6861      	ldr	r1, [r4, #4]
 800788e:	4638      	mov	r0, r7
 8007890:	3101      	adds	r1, #1
 8007892:	f7ff ff79 	bl	8007788 <_Balloc>
 8007896:	4680      	mov	r8, r0
 8007898:	b928      	cbnz	r0, 80078a6 <__multadd+0x5a>
 800789a:	4602      	mov	r2, r0
 800789c:	4b0c      	ldr	r3, [pc, #48]	@ (80078d0 <__multadd+0x84>)
 800789e:	480d      	ldr	r0, [pc, #52]	@ (80078d4 <__multadd+0x88>)
 80078a0:	21ba      	movs	r1, #186	@ 0xba
 80078a2:	f000 fbaf 	bl	8008004 <__assert_func>
 80078a6:	6922      	ldr	r2, [r4, #16]
 80078a8:	3202      	adds	r2, #2
 80078aa:	f104 010c 	add.w	r1, r4, #12
 80078ae:	0092      	lsls	r2, r2, #2
 80078b0:	300c      	adds	r0, #12
 80078b2:	f7ff f80e 	bl	80068d2 <memcpy>
 80078b6:	4621      	mov	r1, r4
 80078b8:	4638      	mov	r0, r7
 80078ba:	f7ff ffa5 	bl	8007808 <_Bfree>
 80078be:	4644      	mov	r4, r8
 80078c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80078c4:	3501      	adds	r5, #1
 80078c6:	615e      	str	r6, [r3, #20]
 80078c8:	6125      	str	r5, [r4, #16]
 80078ca:	4620      	mov	r0, r4
 80078cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078d0:	08009390 	.word	0x08009390
 80078d4:	080093a1 	.word	0x080093a1

080078d8 <__hi0bits>:
 80078d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80078dc:	4603      	mov	r3, r0
 80078de:	bf36      	itet	cc
 80078e0:	0403      	lslcc	r3, r0, #16
 80078e2:	2000      	movcs	r0, #0
 80078e4:	2010      	movcc	r0, #16
 80078e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80078ea:	bf3c      	itt	cc
 80078ec:	021b      	lslcc	r3, r3, #8
 80078ee:	3008      	addcc	r0, #8
 80078f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078f4:	bf3c      	itt	cc
 80078f6:	011b      	lslcc	r3, r3, #4
 80078f8:	3004      	addcc	r0, #4
 80078fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078fe:	bf3c      	itt	cc
 8007900:	009b      	lslcc	r3, r3, #2
 8007902:	3002      	addcc	r0, #2
 8007904:	2b00      	cmp	r3, #0
 8007906:	db05      	blt.n	8007914 <__hi0bits+0x3c>
 8007908:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800790c:	f100 0001 	add.w	r0, r0, #1
 8007910:	bf08      	it	eq
 8007912:	2020      	moveq	r0, #32
 8007914:	4770      	bx	lr

08007916 <__lo0bits>:
 8007916:	6803      	ldr	r3, [r0, #0]
 8007918:	4602      	mov	r2, r0
 800791a:	f013 0007 	ands.w	r0, r3, #7
 800791e:	d00b      	beq.n	8007938 <__lo0bits+0x22>
 8007920:	07d9      	lsls	r1, r3, #31
 8007922:	d421      	bmi.n	8007968 <__lo0bits+0x52>
 8007924:	0798      	lsls	r0, r3, #30
 8007926:	bf49      	itett	mi
 8007928:	085b      	lsrmi	r3, r3, #1
 800792a:	089b      	lsrpl	r3, r3, #2
 800792c:	2001      	movmi	r0, #1
 800792e:	6013      	strmi	r3, [r2, #0]
 8007930:	bf5c      	itt	pl
 8007932:	6013      	strpl	r3, [r2, #0]
 8007934:	2002      	movpl	r0, #2
 8007936:	4770      	bx	lr
 8007938:	b299      	uxth	r1, r3
 800793a:	b909      	cbnz	r1, 8007940 <__lo0bits+0x2a>
 800793c:	0c1b      	lsrs	r3, r3, #16
 800793e:	2010      	movs	r0, #16
 8007940:	b2d9      	uxtb	r1, r3
 8007942:	b909      	cbnz	r1, 8007948 <__lo0bits+0x32>
 8007944:	3008      	adds	r0, #8
 8007946:	0a1b      	lsrs	r3, r3, #8
 8007948:	0719      	lsls	r1, r3, #28
 800794a:	bf04      	itt	eq
 800794c:	091b      	lsreq	r3, r3, #4
 800794e:	3004      	addeq	r0, #4
 8007950:	0799      	lsls	r1, r3, #30
 8007952:	bf04      	itt	eq
 8007954:	089b      	lsreq	r3, r3, #2
 8007956:	3002      	addeq	r0, #2
 8007958:	07d9      	lsls	r1, r3, #31
 800795a:	d403      	bmi.n	8007964 <__lo0bits+0x4e>
 800795c:	085b      	lsrs	r3, r3, #1
 800795e:	f100 0001 	add.w	r0, r0, #1
 8007962:	d003      	beq.n	800796c <__lo0bits+0x56>
 8007964:	6013      	str	r3, [r2, #0]
 8007966:	4770      	bx	lr
 8007968:	2000      	movs	r0, #0
 800796a:	4770      	bx	lr
 800796c:	2020      	movs	r0, #32
 800796e:	4770      	bx	lr

08007970 <__i2b>:
 8007970:	b510      	push	{r4, lr}
 8007972:	460c      	mov	r4, r1
 8007974:	2101      	movs	r1, #1
 8007976:	f7ff ff07 	bl	8007788 <_Balloc>
 800797a:	4602      	mov	r2, r0
 800797c:	b928      	cbnz	r0, 800798a <__i2b+0x1a>
 800797e:	4b05      	ldr	r3, [pc, #20]	@ (8007994 <__i2b+0x24>)
 8007980:	4805      	ldr	r0, [pc, #20]	@ (8007998 <__i2b+0x28>)
 8007982:	f240 1145 	movw	r1, #325	@ 0x145
 8007986:	f000 fb3d 	bl	8008004 <__assert_func>
 800798a:	2301      	movs	r3, #1
 800798c:	6144      	str	r4, [r0, #20]
 800798e:	6103      	str	r3, [r0, #16]
 8007990:	bd10      	pop	{r4, pc}
 8007992:	bf00      	nop
 8007994:	08009390 	.word	0x08009390
 8007998:	080093a1 	.word	0x080093a1

0800799c <__multiply>:
 800799c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a0:	4614      	mov	r4, r2
 80079a2:	690a      	ldr	r2, [r1, #16]
 80079a4:	6923      	ldr	r3, [r4, #16]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	bfa8      	it	ge
 80079aa:	4623      	movge	r3, r4
 80079ac:	460f      	mov	r7, r1
 80079ae:	bfa4      	itt	ge
 80079b0:	460c      	movge	r4, r1
 80079b2:	461f      	movge	r7, r3
 80079b4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80079b8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80079bc:	68a3      	ldr	r3, [r4, #8]
 80079be:	6861      	ldr	r1, [r4, #4]
 80079c0:	eb0a 0609 	add.w	r6, sl, r9
 80079c4:	42b3      	cmp	r3, r6
 80079c6:	b085      	sub	sp, #20
 80079c8:	bfb8      	it	lt
 80079ca:	3101      	addlt	r1, #1
 80079cc:	f7ff fedc 	bl	8007788 <_Balloc>
 80079d0:	b930      	cbnz	r0, 80079e0 <__multiply+0x44>
 80079d2:	4602      	mov	r2, r0
 80079d4:	4b44      	ldr	r3, [pc, #272]	@ (8007ae8 <__multiply+0x14c>)
 80079d6:	4845      	ldr	r0, [pc, #276]	@ (8007aec <__multiply+0x150>)
 80079d8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80079dc:	f000 fb12 	bl	8008004 <__assert_func>
 80079e0:	f100 0514 	add.w	r5, r0, #20
 80079e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80079e8:	462b      	mov	r3, r5
 80079ea:	2200      	movs	r2, #0
 80079ec:	4543      	cmp	r3, r8
 80079ee:	d321      	bcc.n	8007a34 <__multiply+0x98>
 80079f0:	f107 0114 	add.w	r1, r7, #20
 80079f4:	f104 0214 	add.w	r2, r4, #20
 80079f8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80079fc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007a00:	9302      	str	r3, [sp, #8]
 8007a02:	1b13      	subs	r3, r2, r4
 8007a04:	3b15      	subs	r3, #21
 8007a06:	f023 0303 	bic.w	r3, r3, #3
 8007a0a:	3304      	adds	r3, #4
 8007a0c:	f104 0715 	add.w	r7, r4, #21
 8007a10:	42ba      	cmp	r2, r7
 8007a12:	bf38      	it	cc
 8007a14:	2304      	movcc	r3, #4
 8007a16:	9301      	str	r3, [sp, #4]
 8007a18:	9b02      	ldr	r3, [sp, #8]
 8007a1a:	9103      	str	r1, [sp, #12]
 8007a1c:	428b      	cmp	r3, r1
 8007a1e:	d80c      	bhi.n	8007a3a <__multiply+0x9e>
 8007a20:	2e00      	cmp	r6, #0
 8007a22:	dd03      	ble.n	8007a2c <__multiply+0x90>
 8007a24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d05b      	beq.n	8007ae4 <__multiply+0x148>
 8007a2c:	6106      	str	r6, [r0, #16]
 8007a2e:	b005      	add	sp, #20
 8007a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a34:	f843 2b04 	str.w	r2, [r3], #4
 8007a38:	e7d8      	b.n	80079ec <__multiply+0x50>
 8007a3a:	f8b1 a000 	ldrh.w	sl, [r1]
 8007a3e:	f1ba 0f00 	cmp.w	sl, #0
 8007a42:	d024      	beq.n	8007a8e <__multiply+0xf2>
 8007a44:	f104 0e14 	add.w	lr, r4, #20
 8007a48:	46a9      	mov	r9, r5
 8007a4a:	f04f 0c00 	mov.w	ip, #0
 8007a4e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007a52:	f8d9 3000 	ldr.w	r3, [r9]
 8007a56:	fa1f fb87 	uxth.w	fp, r7
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007a60:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007a64:	f8d9 7000 	ldr.w	r7, [r9]
 8007a68:	4463      	add	r3, ip
 8007a6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007a6e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007a72:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007a7c:	4572      	cmp	r2, lr
 8007a7e:	f849 3b04 	str.w	r3, [r9], #4
 8007a82:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007a86:	d8e2      	bhi.n	8007a4e <__multiply+0xb2>
 8007a88:	9b01      	ldr	r3, [sp, #4]
 8007a8a:	f845 c003 	str.w	ip, [r5, r3]
 8007a8e:	9b03      	ldr	r3, [sp, #12]
 8007a90:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007a94:	3104      	adds	r1, #4
 8007a96:	f1b9 0f00 	cmp.w	r9, #0
 8007a9a:	d021      	beq.n	8007ae0 <__multiply+0x144>
 8007a9c:	682b      	ldr	r3, [r5, #0]
 8007a9e:	f104 0c14 	add.w	ip, r4, #20
 8007aa2:	46ae      	mov	lr, r5
 8007aa4:	f04f 0a00 	mov.w	sl, #0
 8007aa8:	f8bc b000 	ldrh.w	fp, [ip]
 8007aac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007ab0:	fb09 770b 	mla	r7, r9, fp, r7
 8007ab4:	4457      	add	r7, sl
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007abc:	f84e 3b04 	str.w	r3, [lr], #4
 8007ac0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007ac4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ac8:	f8be 3000 	ldrh.w	r3, [lr]
 8007acc:	fb09 330a 	mla	r3, r9, sl, r3
 8007ad0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007ad4:	4562      	cmp	r2, ip
 8007ad6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ada:	d8e5      	bhi.n	8007aa8 <__multiply+0x10c>
 8007adc:	9f01      	ldr	r7, [sp, #4]
 8007ade:	51eb      	str	r3, [r5, r7]
 8007ae0:	3504      	adds	r5, #4
 8007ae2:	e799      	b.n	8007a18 <__multiply+0x7c>
 8007ae4:	3e01      	subs	r6, #1
 8007ae6:	e79b      	b.n	8007a20 <__multiply+0x84>
 8007ae8:	08009390 	.word	0x08009390
 8007aec:	080093a1 	.word	0x080093a1

08007af0 <__pow5mult>:
 8007af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007af4:	4615      	mov	r5, r2
 8007af6:	f012 0203 	ands.w	r2, r2, #3
 8007afa:	4607      	mov	r7, r0
 8007afc:	460e      	mov	r6, r1
 8007afe:	d007      	beq.n	8007b10 <__pow5mult+0x20>
 8007b00:	4c25      	ldr	r4, [pc, #148]	@ (8007b98 <__pow5mult+0xa8>)
 8007b02:	3a01      	subs	r2, #1
 8007b04:	2300      	movs	r3, #0
 8007b06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b0a:	f7ff fe9f 	bl	800784c <__multadd>
 8007b0e:	4606      	mov	r6, r0
 8007b10:	10ad      	asrs	r5, r5, #2
 8007b12:	d03d      	beq.n	8007b90 <__pow5mult+0xa0>
 8007b14:	69fc      	ldr	r4, [r7, #28]
 8007b16:	b97c      	cbnz	r4, 8007b38 <__pow5mult+0x48>
 8007b18:	2010      	movs	r0, #16
 8007b1a:	f7ff fd7f 	bl	800761c <malloc>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	61f8      	str	r0, [r7, #28]
 8007b22:	b928      	cbnz	r0, 8007b30 <__pow5mult+0x40>
 8007b24:	4b1d      	ldr	r3, [pc, #116]	@ (8007b9c <__pow5mult+0xac>)
 8007b26:	481e      	ldr	r0, [pc, #120]	@ (8007ba0 <__pow5mult+0xb0>)
 8007b28:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007b2c:	f000 fa6a 	bl	8008004 <__assert_func>
 8007b30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b34:	6004      	str	r4, [r0, #0]
 8007b36:	60c4      	str	r4, [r0, #12]
 8007b38:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007b3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b40:	b94c      	cbnz	r4, 8007b56 <__pow5mult+0x66>
 8007b42:	f240 2171 	movw	r1, #625	@ 0x271
 8007b46:	4638      	mov	r0, r7
 8007b48:	f7ff ff12 	bl	8007970 <__i2b>
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b52:	4604      	mov	r4, r0
 8007b54:	6003      	str	r3, [r0, #0]
 8007b56:	f04f 0900 	mov.w	r9, #0
 8007b5a:	07eb      	lsls	r3, r5, #31
 8007b5c:	d50a      	bpl.n	8007b74 <__pow5mult+0x84>
 8007b5e:	4631      	mov	r1, r6
 8007b60:	4622      	mov	r2, r4
 8007b62:	4638      	mov	r0, r7
 8007b64:	f7ff ff1a 	bl	800799c <__multiply>
 8007b68:	4631      	mov	r1, r6
 8007b6a:	4680      	mov	r8, r0
 8007b6c:	4638      	mov	r0, r7
 8007b6e:	f7ff fe4b 	bl	8007808 <_Bfree>
 8007b72:	4646      	mov	r6, r8
 8007b74:	106d      	asrs	r5, r5, #1
 8007b76:	d00b      	beq.n	8007b90 <__pow5mult+0xa0>
 8007b78:	6820      	ldr	r0, [r4, #0]
 8007b7a:	b938      	cbnz	r0, 8007b8c <__pow5mult+0x9c>
 8007b7c:	4622      	mov	r2, r4
 8007b7e:	4621      	mov	r1, r4
 8007b80:	4638      	mov	r0, r7
 8007b82:	f7ff ff0b 	bl	800799c <__multiply>
 8007b86:	6020      	str	r0, [r4, #0]
 8007b88:	f8c0 9000 	str.w	r9, [r0]
 8007b8c:	4604      	mov	r4, r0
 8007b8e:	e7e4      	b.n	8007b5a <__pow5mult+0x6a>
 8007b90:	4630      	mov	r0, r6
 8007b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b96:	bf00      	nop
 8007b98:	080093fc 	.word	0x080093fc
 8007b9c:	08009321 	.word	0x08009321
 8007ba0:	080093a1 	.word	0x080093a1

08007ba4 <__lshift>:
 8007ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ba8:	460c      	mov	r4, r1
 8007baa:	6849      	ldr	r1, [r1, #4]
 8007bac:	6923      	ldr	r3, [r4, #16]
 8007bae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007bb2:	68a3      	ldr	r3, [r4, #8]
 8007bb4:	4607      	mov	r7, r0
 8007bb6:	4691      	mov	r9, r2
 8007bb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007bbc:	f108 0601 	add.w	r6, r8, #1
 8007bc0:	42b3      	cmp	r3, r6
 8007bc2:	db0b      	blt.n	8007bdc <__lshift+0x38>
 8007bc4:	4638      	mov	r0, r7
 8007bc6:	f7ff fddf 	bl	8007788 <_Balloc>
 8007bca:	4605      	mov	r5, r0
 8007bcc:	b948      	cbnz	r0, 8007be2 <__lshift+0x3e>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	4b28      	ldr	r3, [pc, #160]	@ (8007c74 <__lshift+0xd0>)
 8007bd2:	4829      	ldr	r0, [pc, #164]	@ (8007c78 <__lshift+0xd4>)
 8007bd4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007bd8:	f000 fa14 	bl	8008004 <__assert_func>
 8007bdc:	3101      	adds	r1, #1
 8007bde:	005b      	lsls	r3, r3, #1
 8007be0:	e7ee      	b.n	8007bc0 <__lshift+0x1c>
 8007be2:	2300      	movs	r3, #0
 8007be4:	f100 0114 	add.w	r1, r0, #20
 8007be8:	f100 0210 	add.w	r2, r0, #16
 8007bec:	4618      	mov	r0, r3
 8007bee:	4553      	cmp	r3, sl
 8007bf0:	db33      	blt.n	8007c5a <__lshift+0xb6>
 8007bf2:	6920      	ldr	r0, [r4, #16]
 8007bf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007bf8:	f104 0314 	add.w	r3, r4, #20
 8007bfc:	f019 091f 	ands.w	r9, r9, #31
 8007c00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c08:	d02b      	beq.n	8007c62 <__lshift+0xbe>
 8007c0a:	f1c9 0e20 	rsb	lr, r9, #32
 8007c0e:	468a      	mov	sl, r1
 8007c10:	2200      	movs	r2, #0
 8007c12:	6818      	ldr	r0, [r3, #0]
 8007c14:	fa00 f009 	lsl.w	r0, r0, r9
 8007c18:	4310      	orrs	r0, r2
 8007c1a:	f84a 0b04 	str.w	r0, [sl], #4
 8007c1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c22:	459c      	cmp	ip, r3
 8007c24:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c28:	d8f3      	bhi.n	8007c12 <__lshift+0x6e>
 8007c2a:	ebac 0304 	sub.w	r3, ip, r4
 8007c2e:	3b15      	subs	r3, #21
 8007c30:	f023 0303 	bic.w	r3, r3, #3
 8007c34:	3304      	adds	r3, #4
 8007c36:	f104 0015 	add.w	r0, r4, #21
 8007c3a:	4584      	cmp	ip, r0
 8007c3c:	bf38      	it	cc
 8007c3e:	2304      	movcc	r3, #4
 8007c40:	50ca      	str	r2, [r1, r3]
 8007c42:	b10a      	cbz	r2, 8007c48 <__lshift+0xa4>
 8007c44:	f108 0602 	add.w	r6, r8, #2
 8007c48:	3e01      	subs	r6, #1
 8007c4a:	4638      	mov	r0, r7
 8007c4c:	612e      	str	r6, [r5, #16]
 8007c4e:	4621      	mov	r1, r4
 8007c50:	f7ff fdda 	bl	8007808 <_Bfree>
 8007c54:	4628      	mov	r0, r5
 8007c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c5e:	3301      	adds	r3, #1
 8007c60:	e7c5      	b.n	8007bee <__lshift+0x4a>
 8007c62:	3904      	subs	r1, #4
 8007c64:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c68:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c6c:	459c      	cmp	ip, r3
 8007c6e:	d8f9      	bhi.n	8007c64 <__lshift+0xc0>
 8007c70:	e7ea      	b.n	8007c48 <__lshift+0xa4>
 8007c72:	bf00      	nop
 8007c74:	08009390 	.word	0x08009390
 8007c78:	080093a1 	.word	0x080093a1

08007c7c <__mcmp>:
 8007c7c:	690a      	ldr	r2, [r1, #16]
 8007c7e:	4603      	mov	r3, r0
 8007c80:	6900      	ldr	r0, [r0, #16]
 8007c82:	1a80      	subs	r0, r0, r2
 8007c84:	b530      	push	{r4, r5, lr}
 8007c86:	d10e      	bne.n	8007ca6 <__mcmp+0x2a>
 8007c88:	3314      	adds	r3, #20
 8007c8a:	3114      	adds	r1, #20
 8007c8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007c90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007c94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007c98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007c9c:	4295      	cmp	r5, r2
 8007c9e:	d003      	beq.n	8007ca8 <__mcmp+0x2c>
 8007ca0:	d205      	bcs.n	8007cae <__mcmp+0x32>
 8007ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca6:	bd30      	pop	{r4, r5, pc}
 8007ca8:	42a3      	cmp	r3, r4
 8007caa:	d3f3      	bcc.n	8007c94 <__mcmp+0x18>
 8007cac:	e7fb      	b.n	8007ca6 <__mcmp+0x2a>
 8007cae:	2001      	movs	r0, #1
 8007cb0:	e7f9      	b.n	8007ca6 <__mcmp+0x2a>
	...

08007cb4 <__mdiff>:
 8007cb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb8:	4689      	mov	r9, r1
 8007cba:	4606      	mov	r6, r0
 8007cbc:	4611      	mov	r1, r2
 8007cbe:	4648      	mov	r0, r9
 8007cc0:	4614      	mov	r4, r2
 8007cc2:	f7ff ffdb 	bl	8007c7c <__mcmp>
 8007cc6:	1e05      	subs	r5, r0, #0
 8007cc8:	d112      	bne.n	8007cf0 <__mdiff+0x3c>
 8007cca:	4629      	mov	r1, r5
 8007ccc:	4630      	mov	r0, r6
 8007cce:	f7ff fd5b 	bl	8007788 <_Balloc>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	b928      	cbnz	r0, 8007ce2 <__mdiff+0x2e>
 8007cd6:	4b3f      	ldr	r3, [pc, #252]	@ (8007dd4 <__mdiff+0x120>)
 8007cd8:	f240 2137 	movw	r1, #567	@ 0x237
 8007cdc:	483e      	ldr	r0, [pc, #248]	@ (8007dd8 <__mdiff+0x124>)
 8007cde:	f000 f991 	bl	8008004 <__assert_func>
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ce8:	4610      	mov	r0, r2
 8007cea:	b003      	add	sp, #12
 8007cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf0:	bfbc      	itt	lt
 8007cf2:	464b      	movlt	r3, r9
 8007cf4:	46a1      	movlt	r9, r4
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007cfc:	bfba      	itte	lt
 8007cfe:	461c      	movlt	r4, r3
 8007d00:	2501      	movlt	r5, #1
 8007d02:	2500      	movge	r5, #0
 8007d04:	f7ff fd40 	bl	8007788 <_Balloc>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	b918      	cbnz	r0, 8007d14 <__mdiff+0x60>
 8007d0c:	4b31      	ldr	r3, [pc, #196]	@ (8007dd4 <__mdiff+0x120>)
 8007d0e:	f240 2145 	movw	r1, #581	@ 0x245
 8007d12:	e7e3      	b.n	8007cdc <__mdiff+0x28>
 8007d14:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007d18:	6926      	ldr	r6, [r4, #16]
 8007d1a:	60c5      	str	r5, [r0, #12]
 8007d1c:	f109 0310 	add.w	r3, r9, #16
 8007d20:	f109 0514 	add.w	r5, r9, #20
 8007d24:	f104 0e14 	add.w	lr, r4, #20
 8007d28:	f100 0b14 	add.w	fp, r0, #20
 8007d2c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007d30:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007d34:	9301      	str	r3, [sp, #4]
 8007d36:	46d9      	mov	r9, fp
 8007d38:	f04f 0c00 	mov.w	ip, #0
 8007d3c:	9b01      	ldr	r3, [sp, #4]
 8007d3e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007d42:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007d46:	9301      	str	r3, [sp, #4]
 8007d48:	fa1f f38a 	uxth.w	r3, sl
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	b283      	uxth	r3, r0
 8007d50:	1acb      	subs	r3, r1, r3
 8007d52:	0c00      	lsrs	r0, r0, #16
 8007d54:	4463      	add	r3, ip
 8007d56:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007d5a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007d64:	4576      	cmp	r6, lr
 8007d66:	f849 3b04 	str.w	r3, [r9], #4
 8007d6a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007d6e:	d8e5      	bhi.n	8007d3c <__mdiff+0x88>
 8007d70:	1b33      	subs	r3, r6, r4
 8007d72:	3b15      	subs	r3, #21
 8007d74:	f023 0303 	bic.w	r3, r3, #3
 8007d78:	3415      	adds	r4, #21
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	42a6      	cmp	r6, r4
 8007d7e:	bf38      	it	cc
 8007d80:	2304      	movcc	r3, #4
 8007d82:	441d      	add	r5, r3
 8007d84:	445b      	add	r3, fp
 8007d86:	461e      	mov	r6, r3
 8007d88:	462c      	mov	r4, r5
 8007d8a:	4544      	cmp	r4, r8
 8007d8c:	d30e      	bcc.n	8007dac <__mdiff+0xf8>
 8007d8e:	f108 0103 	add.w	r1, r8, #3
 8007d92:	1b49      	subs	r1, r1, r5
 8007d94:	f021 0103 	bic.w	r1, r1, #3
 8007d98:	3d03      	subs	r5, #3
 8007d9a:	45a8      	cmp	r8, r5
 8007d9c:	bf38      	it	cc
 8007d9e:	2100      	movcc	r1, #0
 8007da0:	440b      	add	r3, r1
 8007da2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007da6:	b191      	cbz	r1, 8007dce <__mdiff+0x11a>
 8007da8:	6117      	str	r7, [r2, #16]
 8007daa:	e79d      	b.n	8007ce8 <__mdiff+0x34>
 8007dac:	f854 1b04 	ldr.w	r1, [r4], #4
 8007db0:	46e6      	mov	lr, ip
 8007db2:	0c08      	lsrs	r0, r1, #16
 8007db4:	fa1c fc81 	uxtah	ip, ip, r1
 8007db8:	4471      	add	r1, lr
 8007dba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007dbe:	b289      	uxth	r1, r1
 8007dc0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007dc4:	f846 1b04 	str.w	r1, [r6], #4
 8007dc8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007dcc:	e7dd      	b.n	8007d8a <__mdiff+0xd6>
 8007dce:	3f01      	subs	r7, #1
 8007dd0:	e7e7      	b.n	8007da2 <__mdiff+0xee>
 8007dd2:	bf00      	nop
 8007dd4:	08009390 	.word	0x08009390
 8007dd8:	080093a1 	.word	0x080093a1

08007ddc <__d2b>:
 8007ddc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007de0:	460f      	mov	r7, r1
 8007de2:	2101      	movs	r1, #1
 8007de4:	ec59 8b10 	vmov	r8, r9, d0
 8007de8:	4616      	mov	r6, r2
 8007dea:	f7ff fccd 	bl	8007788 <_Balloc>
 8007dee:	4604      	mov	r4, r0
 8007df0:	b930      	cbnz	r0, 8007e00 <__d2b+0x24>
 8007df2:	4602      	mov	r2, r0
 8007df4:	4b23      	ldr	r3, [pc, #140]	@ (8007e84 <__d2b+0xa8>)
 8007df6:	4824      	ldr	r0, [pc, #144]	@ (8007e88 <__d2b+0xac>)
 8007df8:	f240 310f 	movw	r1, #783	@ 0x30f
 8007dfc:	f000 f902 	bl	8008004 <__assert_func>
 8007e00:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e08:	b10d      	cbz	r5, 8007e0e <__d2b+0x32>
 8007e0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e0e:	9301      	str	r3, [sp, #4]
 8007e10:	f1b8 0300 	subs.w	r3, r8, #0
 8007e14:	d023      	beq.n	8007e5e <__d2b+0x82>
 8007e16:	4668      	mov	r0, sp
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	f7ff fd7c 	bl	8007916 <__lo0bits>
 8007e1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e22:	b1d0      	cbz	r0, 8007e5a <__d2b+0x7e>
 8007e24:	f1c0 0320 	rsb	r3, r0, #32
 8007e28:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2c:	430b      	orrs	r3, r1
 8007e2e:	40c2      	lsrs	r2, r0
 8007e30:	6163      	str	r3, [r4, #20]
 8007e32:	9201      	str	r2, [sp, #4]
 8007e34:	9b01      	ldr	r3, [sp, #4]
 8007e36:	61a3      	str	r3, [r4, #24]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	bf0c      	ite	eq
 8007e3c:	2201      	moveq	r2, #1
 8007e3e:	2202      	movne	r2, #2
 8007e40:	6122      	str	r2, [r4, #16]
 8007e42:	b1a5      	cbz	r5, 8007e6e <__d2b+0x92>
 8007e44:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007e48:	4405      	add	r5, r0
 8007e4a:	603d      	str	r5, [r7, #0]
 8007e4c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007e50:	6030      	str	r0, [r6, #0]
 8007e52:	4620      	mov	r0, r4
 8007e54:	b003      	add	sp, #12
 8007e56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e5a:	6161      	str	r1, [r4, #20]
 8007e5c:	e7ea      	b.n	8007e34 <__d2b+0x58>
 8007e5e:	a801      	add	r0, sp, #4
 8007e60:	f7ff fd59 	bl	8007916 <__lo0bits>
 8007e64:	9b01      	ldr	r3, [sp, #4]
 8007e66:	6163      	str	r3, [r4, #20]
 8007e68:	3020      	adds	r0, #32
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	e7e8      	b.n	8007e40 <__d2b+0x64>
 8007e6e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e72:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007e76:	6038      	str	r0, [r7, #0]
 8007e78:	6918      	ldr	r0, [r3, #16]
 8007e7a:	f7ff fd2d 	bl	80078d8 <__hi0bits>
 8007e7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007e82:	e7e5      	b.n	8007e50 <__d2b+0x74>
 8007e84:	08009390 	.word	0x08009390
 8007e88:	080093a1 	.word	0x080093a1

08007e8c <__sflush_r>:
 8007e8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e94:	0716      	lsls	r6, r2, #28
 8007e96:	4605      	mov	r5, r0
 8007e98:	460c      	mov	r4, r1
 8007e9a:	d454      	bmi.n	8007f46 <__sflush_r+0xba>
 8007e9c:	684b      	ldr	r3, [r1, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	dc02      	bgt.n	8007ea8 <__sflush_r+0x1c>
 8007ea2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	dd48      	ble.n	8007f3a <__sflush_r+0xae>
 8007ea8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007eaa:	2e00      	cmp	r6, #0
 8007eac:	d045      	beq.n	8007f3a <__sflush_r+0xae>
 8007eae:	2300      	movs	r3, #0
 8007eb0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007eb4:	682f      	ldr	r7, [r5, #0]
 8007eb6:	6a21      	ldr	r1, [r4, #32]
 8007eb8:	602b      	str	r3, [r5, #0]
 8007eba:	d030      	beq.n	8007f1e <__sflush_r+0x92>
 8007ebc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007ebe:	89a3      	ldrh	r3, [r4, #12]
 8007ec0:	0759      	lsls	r1, r3, #29
 8007ec2:	d505      	bpl.n	8007ed0 <__sflush_r+0x44>
 8007ec4:	6863      	ldr	r3, [r4, #4]
 8007ec6:	1ad2      	subs	r2, r2, r3
 8007ec8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007eca:	b10b      	cbz	r3, 8007ed0 <__sflush_r+0x44>
 8007ecc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007ece:	1ad2      	subs	r2, r2, r3
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ed4:	6a21      	ldr	r1, [r4, #32]
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	47b0      	blx	r6
 8007eda:	1c43      	adds	r3, r0, #1
 8007edc:	89a3      	ldrh	r3, [r4, #12]
 8007ede:	d106      	bne.n	8007eee <__sflush_r+0x62>
 8007ee0:	6829      	ldr	r1, [r5, #0]
 8007ee2:	291d      	cmp	r1, #29
 8007ee4:	d82b      	bhi.n	8007f3e <__sflush_r+0xb2>
 8007ee6:	4a2a      	ldr	r2, [pc, #168]	@ (8007f90 <__sflush_r+0x104>)
 8007ee8:	410a      	asrs	r2, r1
 8007eea:	07d6      	lsls	r6, r2, #31
 8007eec:	d427      	bmi.n	8007f3e <__sflush_r+0xb2>
 8007eee:	2200      	movs	r2, #0
 8007ef0:	6062      	str	r2, [r4, #4]
 8007ef2:	04d9      	lsls	r1, r3, #19
 8007ef4:	6922      	ldr	r2, [r4, #16]
 8007ef6:	6022      	str	r2, [r4, #0]
 8007ef8:	d504      	bpl.n	8007f04 <__sflush_r+0x78>
 8007efa:	1c42      	adds	r2, r0, #1
 8007efc:	d101      	bne.n	8007f02 <__sflush_r+0x76>
 8007efe:	682b      	ldr	r3, [r5, #0]
 8007f00:	b903      	cbnz	r3, 8007f04 <__sflush_r+0x78>
 8007f02:	6560      	str	r0, [r4, #84]	@ 0x54
 8007f04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f06:	602f      	str	r7, [r5, #0]
 8007f08:	b1b9      	cbz	r1, 8007f3a <__sflush_r+0xae>
 8007f0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f0e:	4299      	cmp	r1, r3
 8007f10:	d002      	beq.n	8007f18 <__sflush_r+0x8c>
 8007f12:	4628      	mov	r0, r5
 8007f14:	f7ff fb38 	bl	8007588 <_free_r>
 8007f18:	2300      	movs	r3, #0
 8007f1a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f1c:	e00d      	b.n	8007f3a <__sflush_r+0xae>
 8007f1e:	2301      	movs	r3, #1
 8007f20:	4628      	mov	r0, r5
 8007f22:	47b0      	blx	r6
 8007f24:	4602      	mov	r2, r0
 8007f26:	1c50      	adds	r0, r2, #1
 8007f28:	d1c9      	bne.n	8007ebe <__sflush_r+0x32>
 8007f2a:	682b      	ldr	r3, [r5, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d0c6      	beq.n	8007ebe <__sflush_r+0x32>
 8007f30:	2b1d      	cmp	r3, #29
 8007f32:	d001      	beq.n	8007f38 <__sflush_r+0xac>
 8007f34:	2b16      	cmp	r3, #22
 8007f36:	d11e      	bne.n	8007f76 <__sflush_r+0xea>
 8007f38:	602f      	str	r7, [r5, #0]
 8007f3a:	2000      	movs	r0, #0
 8007f3c:	e022      	b.n	8007f84 <__sflush_r+0xf8>
 8007f3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f42:	b21b      	sxth	r3, r3
 8007f44:	e01b      	b.n	8007f7e <__sflush_r+0xf2>
 8007f46:	690f      	ldr	r7, [r1, #16]
 8007f48:	2f00      	cmp	r7, #0
 8007f4a:	d0f6      	beq.n	8007f3a <__sflush_r+0xae>
 8007f4c:	0793      	lsls	r3, r2, #30
 8007f4e:	680e      	ldr	r6, [r1, #0]
 8007f50:	bf08      	it	eq
 8007f52:	694b      	ldreq	r3, [r1, #20]
 8007f54:	600f      	str	r7, [r1, #0]
 8007f56:	bf18      	it	ne
 8007f58:	2300      	movne	r3, #0
 8007f5a:	eba6 0807 	sub.w	r8, r6, r7
 8007f5e:	608b      	str	r3, [r1, #8]
 8007f60:	f1b8 0f00 	cmp.w	r8, #0
 8007f64:	dde9      	ble.n	8007f3a <__sflush_r+0xae>
 8007f66:	6a21      	ldr	r1, [r4, #32]
 8007f68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007f6a:	4643      	mov	r3, r8
 8007f6c:	463a      	mov	r2, r7
 8007f6e:	4628      	mov	r0, r5
 8007f70:	47b0      	blx	r6
 8007f72:	2800      	cmp	r0, #0
 8007f74:	dc08      	bgt.n	8007f88 <__sflush_r+0xfc>
 8007f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f7e:	81a3      	strh	r3, [r4, #12]
 8007f80:	f04f 30ff 	mov.w	r0, #4294967295
 8007f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f88:	4407      	add	r7, r0
 8007f8a:	eba8 0800 	sub.w	r8, r8, r0
 8007f8e:	e7e7      	b.n	8007f60 <__sflush_r+0xd4>
 8007f90:	dfbffffe 	.word	0xdfbffffe

08007f94 <_fflush_r>:
 8007f94:	b538      	push	{r3, r4, r5, lr}
 8007f96:	690b      	ldr	r3, [r1, #16]
 8007f98:	4605      	mov	r5, r0
 8007f9a:	460c      	mov	r4, r1
 8007f9c:	b913      	cbnz	r3, 8007fa4 <_fflush_r+0x10>
 8007f9e:	2500      	movs	r5, #0
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	bd38      	pop	{r3, r4, r5, pc}
 8007fa4:	b118      	cbz	r0, 8007fae <_fflush_r+0x1a>
 8007fa6:	6a03      	ldr	r3, [r0, #32]
 8007fa8:	b90b      	cbnz	r3, 8007fae <_fflush_r+0x1a>
 8007faa:	f7fe fb89 	bl	80066c0 <__sinit>
 8007fae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d0f3      	beq.n	8007f9e <_fflush_r+0xa>
 8007fb6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007fb8:	07d0      	lsls	r0, r2, #31
 8007fba:	d404      	bmi.n	8007fc6 <_fflush_r+0x32>
 8007fbc:	0599      	lsls	r1, r3, #22
 8007fbe:	d402      	bmi.n	8007fc6 <_fflush_r+0x32>
 8007fc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fc2:	f7fe fc84 	bl	80068ce <__retarget_lock_acquire_recursive>
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	4621      	mov	r1, r4
 8007fca:	f7ff ff5f 	bl	8007e8c <__sflush_r>
 8007fce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007fd0:	07da      	lsls	r2, r3, #31
 8007fd2:	4605      	mov	r5, r0
 8007fd4:	d4e4      	bmi.n	8007fa0 <_fflush_r+0xc>
 8007fd6:	89a3      	ldrh	r3, [r4, #12]
 8007fd8:	059b      	lsls	r3, r3, #22
 8007fda:	d4e1      	bmi.n	8007fa0 <_fflush_r+0xc>
 8007fdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fde:	f7fe fc77 	bl	80068d0 <__retarget_lock_release_recursive>
 8007fe2:	e7dd      	b.n	8007fa0 <_fflush_r+0xc>

08007fe4 <_sbrk_r>:
 8007fe4:	b538      	push	{r3, r4, r5, lr}
 8007fe6:	4d06      	ldr	r5, [pc, #24]	@ (8008000 <_sbrk_r+0x1c>)
 8007fe8:	2300      	movs	r3, #0
 8007fea:	4604      	mov	r4, r0
 8007fec:	4608      	mov	r0, r1
 8007fee:	602b      	str	r3, [r5, #0]
 8007ff0:	f7fb f82e 	bl	8003050 <_sbrk>
 8007ff4:	1c43      	adds	r3, r0, #1
 8007ff6:	d102      	bne.n	8007ffe <_sbrk_r+0x1a>
 8007ff8:	682b      	ldr	r3, [r5, #0]
 8007ffa:	b103      	cbz	r3, 8007ffe <_sbrk_r+0x1a>
 8007ffc:	6023      	str	r3, [r4, #0]
 8007ffe:	bd38      	pop	{r3, r4, r5, pc}
 8008000:	20000b4c 	.word	0x20000b4c

08008004 <__assert_func>:
 8008004:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008006:	4614      	mov	r4, r2
 8008008:	461a      	mov	r2, r3
 800800a:	4b09      	ldr	r3, [pc, #36]	@ (8008030 <__assert_func+0x2c>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4605      	mov	r5, r0
 8008010:	68d8      	ldr	r0, [r3, #12]
 8008012:	b954      	cbnz	r4, 800802a <__assert_func+0x26>
 8008014:	4b07      	ldr	r3, [pc, #28]	@ (8008034 <__assert_func+0x30>)
 8008016:	461c      	mov	r4, r3
 8008018:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800801c:	9100      	str	r1, [sp, #0]
 800801e:	462b      	mov	r3, r5
 8008020:	4905      	ldr	r1, [pc, #20]	@ (8008038 <__assert_func+0x34>)
 8008022:	f000 f841 	bl	80080a8 <fiprintf>
 8008026:	f000 f851 	bl	80080cc <abort>
 800802a:	4b04      	ldr	r3, [pc, #16]	@ (800803c <__assert_func+0x38>)
 800802c:	e7f4      	b.n	8008018 <__assert_func+0x14>
 800802e:	bf00      	nop
 8008030:	20000018 	.word	0x20000018
 8008034:	0800953d 	.word	0x0800953d
 8008038:	0800950f 	.word	0x0800950f
 800803c:	08009502 	.word	0x08009502

08008040 <_calloc_r>:
 8008040:	b570      	push	{r4, r5, r6, lr}
 8008042:	fba1 5402 	umull	r5, r4, r1, r2
 8008046:	b93c      	cbnz	r4, 8008058 <_calloc_r+0x18>
 8008048:	4629      	mov	r1, r5
 800804a:	f7ff fb11 	bl	8007670 <_malloc_r>
 800804e:	4606      	mov	r6, r0
 8008050:	b928      	cbnz	r0, 800805e <_calloc_r+0x1e>
 8008052:	2600      	movs	r6, #0
 8008054:	4630      	mov	r0, r6
 8008056:	bd70      	pop	{r4, r5, r6, pc}
 8008058:	220c      	movs	r2, #12
 800805a:	6002      	str	r2, [r0, #0]
 800805c:	e7f9      	b.n	8008052 <_calloc_r+0x12>
 800805e:	462a      	mov	r2, r5
 8008060:	4621      	mov	r1, r4
 8008062:	f7fe fbb6 	bl	80067d2 <memset>
 8008066:	e7f5      	b.n	8008054 <_calloc_r+0x14>

08008068 <__ascii_mbtowc>:
 8008068:	b082      	sub	sp, #8
 800806a:	b901      	cbnz	r1, 800806e <__ascii_mbtowc+0x6>
 800806c:	a901      	add	r1, sp, #4
 800806e:	b142      	cbz	r2, 8008082 <__ascii_mbtowc+0x1a>
 8008070:	b14b      	cbz	r3, 8008086 <__ascii_mbtowc+0x1e>
 8008072:	7813      	ldrb	r3, [r2, #0]
 8008074:	600b      	str	r3, [r1, #0]
 8008076:	7812      	ldrb	r2, [r2, #0]
 8008078:	1e10      	subs	r0, r2, #0
 800807a:	bf18      	it	ne
 800807c:	2001      	movne	r0, #1
 800807e:	b002      	add	sp, #8
 8008080:	4770      	bx	lr
 8008082:	4610      	mov	r0, r2
 8008084:	e7fb      	b.n	800807e <__ascii_mbtowc+0x16>
 8008086:	f06f 0001 	mvn.w	r0, #1
 800808a:	e7f8      	b.n	800807e <__ascii_mbtowc+0x16>

0800808c <__ascii_wctomb>:
 800808c:	4603      	mov	r3, r0
 800808e:	4608      	mov	r0, r1
 8008090:	b141      	cbz	r1, 80080a4 <__ascii_wctomb+0x18>
 8008092:	2aff      	cmp	r2, #255	@ 0xff
 8008094:	d904      	bls.n	80080a0 <__ascii_wctomb+0x14>
 8008096:	228a      	movs	r2, #138	@ 0x8a
 8008098:	601a      	str	r2, [r3, #0]
 800809a:	f04f 30ff 	mov.w	r0, #4294967295
 800809e:	4770      	bx	lr
 80080a0:	700a      	strb	r2, [r1, #0]
 80080a2:	2001      	movs	r0, #1
 80080a4:	4770      	bx	lr
	...

080080a8 <fiprintf>:
 80080a8:	b40e      	push	{r1, r2, r3}
 80080aa:	b503      	push	{r0, r1, lr}
 80080ac:	4601      	mov	r1, r0
 80080ae:	ab03      	add	r3, sp, #12
 80080b0:	4805      	ldr	r0, [pc, #20]	@ (80080c8 <fiprintf+0x20>)
 80080b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80080b6:	6800      	ldr	r0, [r0, #0]
 80080b8:	9301      	str	r3, [sp, #4]
 80080ba:	f000 f837 	bl	800812c <_vfiprintf_r>
 80080be:	b002      	add	sp, #8
 80080c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80080c4:	b003      	add	sp, #12
 80080c6:	4770      	bx	lr
 80080c8:	20000018 	.word	0x20000018

080080cc <abort>:
 80080cc:	b508      	push	{r3, lr}
 80080ce:	2006      	movs	r0, #6
 80080d0:	f000 fa00 	bl	80084d4 <raise>
 80080d4:	2001      	movs	r0, #1
 80080d6:	f7fa ff43 	bl	8002f60 <_exit>

080080da <__sfputc_r>:
 80080da:	6893      	ldr	r3, [r2, #8]
 80080dc:	3b01      	subs	r3, #1
 80080de:	2b00      	cmp	r3, #0
 80080e0:	b410      	push	{r4}
 80080e2:	6093      	str	r3, [r2, #8]
 80080e4:	da08      	bge.n	80080f8 <__sfputc_r+0x1e>
 80080e6:	6994      	ldr	r4, [r2, #24]
 80080e8:	42a3      	cmp	r3, r4
 80080ea:	db01      	blt.n	80080f0 <__sfputc_r+0x16>
 80080ec:	290a      	cmp	r1, #10
 80080ee:	d103      	bne.n	80080f8 <__sfputc_r+0x1e>
 80080f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080f4:	f000 b932 	b.w	800835c <__swbuf_r>
 80080f8:	6813      	ldr	r3, [r2, #0]
 80080fa:	1c58      	adds	r0, r3, #1
 80080fc:	6010      	str	r0, [r2, #0]
 80080fe:	7019      	strb	r1, [r3, #0]
 8008100:	4608      	mov	r0, r1
 8008102:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008106:	4770      	bx	lr

08008108 <__sfputs_r>:
 8008108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800810a:	4606      	mov	r6, r0
 800810c:	460f      	mov	r7, r1
 800810e:	4614      	mov	r4, r2
 8008110:	18d5      	adds	r5, r2, r3
 8008112:	42ac      	cmp	r4, r5
 8008114:	d101      	bne.n	800811a <__sfputs_r+0x12>
 8008116:	2000      	movs	r0, #0
 8008118:	e007      	b.n	800812a <__sfputs_r+0x22>
 800811a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800811e:	463a      	mov	r2, r7
 8008120:	4630      	mov	r0, r6
 8008122:	f7ff ffda 	bl	80080da <__sfputc_r>
 8008126:	1c43      	adds	r3, r0, #1
 8008128:	d1f3      	bne.n	8008112 <__sfputs_r+0xa>
 800812a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800812c <_vfiprintf_r>:
 800812c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008130:	460d      	mov	r5, r1
 8008132:	b09d      	sub	sp, #116	@ 0x74
 8008134:	4614      	mov	r4, r2
 8008136:	4698      	mov	r8, r3
 8008138:	4606      	mov	r6, r0
 800813a:	b118      	cbz	r0, 8008144 <_vfiprintf_r+0x18>
 800813c:	6a03      	ldr	r3, [r0, #32]
 800813e:	b90b      	cbnz	r3, 8008144 <_vfiprintf_r+0x18>
 8008140:	f7fe fabe 	bl	80066c0 <__sinit>
 8008144:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008146:	07d9      	lsls	r1, r3, #31
 8008148:	d405      	bmi.n	8008156 <_vfiprintf_r+0x2a>
 800814a:	89ab      	ldrh	r3, [r5, #12]
 800814c:	059a      	lsls	r2, r3, #22
 800814e:	d402      	bmi.n	8008156 <_vfiprintf_r+0x2a>
 8008150:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008152:	f7fe fbbc 	bl	80068ce <__retarget_lock_acquire_recursive>
 8008156:	89ab      	ldrh	r3, [r5, #12]
 8008158:	071b      	lsls	r3, r3, #28
 800815a:	d501      	bpl.n	8008160 <_vfiprintf_r+0x34>
 800815c:	692b      	ldr	r3, [r5, #16]
 800815e:	b99b      	cbnz	r3, 8008188 <_vfiprintf_r+0x5c>
 8008160:	4629      	mov	r1, r5
 8008162:	4630      	mov	r0, r6
 8008164:	f000 f938 	bl	80083d8 <__swsetup_r>
 8008168:	b170      	cbz	r0, 8008188 <_vfiprintf_r+0x5c>
 800816a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800816c:	07dc      	lsls	r4, r3, #31
 800816e:	d504      	bpl.n	800817a <_vfiprintf_r+0x4e>
 8008170:	f04f 30ff 	mov.w	r0, #4294967295
 8008174:	b01d      	add	sp, #116	@ 0x74
 8008176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800817a:	89ab      	ldrh	r3, [r5, #12]
 800817c:	0598      	lsls	r0, r3, #22
 800817e:	d4f7      	bmi.n	8008170 <_vfiprintf_r+0x44>
 8008180:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008182:	f7fe fba5 	bl	80068d0 <__retarget_lock_release_recursive>
 8008186:	e7f3      	b.n	8008170 <_vfiprintf_r+0x44>
 8008188:	2300      	movs	r3, #0
 800818a:	9309      	str	r3, [sp, #36]	@ 0x24
 800818c:	2320      	movs	r3, #32
 800818e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008192:	f8cd 800c 	str.w	r8, [sp, #12]
 8008196:	2330      	movs	r3, #48	@ 0x30
 8008198:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008348 <_vfiprintf_r+0x21c>
 800819c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80081a0:	f04f 0901 	mov.w	r9, #1
 80081a4:	4623      	mov	r3, r4
 80081a6:	469a      	mov	sl, r3
 80081a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081ac:	b10a      	cbz	r2, 80081b2 <_vfiprintf_r+0x86>
 80081ae:	2a25      	cmp	r2, #37	@ 0x25
 80081b0:	d1f9      	bne.n	80081a6 <_vfiprintf_r+0x7a>
 80081b2:	ebba 0b04 	subs.w	fp, sl, r4
 80081b6:	d00b      	beq.n	80081d0 <_vfiprintf_r+0xa4>
 80081b8:	465b      	mov	r3, fp
 80081ba:	4622      	mov	r2, r4
 80081bc:	4629      	mov	r1, r5
 80081be:	4630      	mov	r0, r6
 80081c0:	f7ff ffa2 	bl	8008108 <__sfputs_r>
 80081c4:	3001      	adds	r0, #1
 80081c6:	f000 80a7 	beq.w	8008318 <_vfiprintf_r+0x1ec>
 80081ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081cc:	445a      	add	r2, fp
 80081ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80081d0:	f89a 3000 	ldrb.w	r3, [sl]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f000 809f 	beq.w	8008318 <_vfiprintf_r+0x1ec>
 80081da:	2300      	movs	r3, #0
 80081dc:	f04f 32ff 	mov.w	r2, #4294967295
 80081e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081e4:	f10a 0a01 	add.w	sl, sl, #1
 80081e8:	9304      	str	r3, [sp, #16]
 80081ea:	9307      	str	r3, [sp, #28]
 80081ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80081f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80081f2:	4654      	mov	r4, sl
 80081f4:	2205      	movs	r2, #5
 80081f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081fa:	4853      	ldr	r0, [pc, #332]	@ (8008348 <_vfiprintf_r+0x21c>)
 80081fc:	f7f7 ffe8 	bl	80001d0 <memchr>
 8008200:	9a04      	ldr	r2, [sp, #16]
 8008202:	b9d8      	cbnz	r0, 800823c <_vfiprintf_r+0x110>
 8008204:	06d1      	lsls	r1, r2, #27
 8008206:	bf44      	itt	mi
 8008208:	2320      	movmi	r3, #32
 800820a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800820e:	0713      	lsls	r3, r2, #28
 8008210:	bf44      	itt	mi
 8008212:	232b      	movmi	r3, #43	@ 0x2b
 8008214:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008218:	f89a 3000 	ldrb.w	r3, [sl]
 800821c:	2b2a      	cmp	r3, #42	@ 0x2a
 800821e:	d015      	beq.n	800824c <_vfiprintf_r+0x120>
 8008220:	9a07      	ldr	r2, [sp, #28]
 8008222:	4654      	mov	r4, sl
 8008224:	2000      	movs	r0, #0
 8008226:	f04f 0c0a 	mov.w	ip, #10
 800822a:	4621      	mov	r1, r4
 800822c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008230:	3b30      	subs	r3, #48	@ 0x30
 8008232:	2b09      	cmp	r3, #9
 8008234:	d94b      	bls.n	80082ce <_vfiprintf_r+0x1a2>
 8008236:	b1b0      	cbz	r0, 8008266 <_vfiprintf_r+0x13a>
 8008238:	9207      	str	r2, [sp, #28]
 800823a:	e014      	b.n	8008266 <_vfiprintf_r+0x13a>
 800823c:	eba0 0308 	sub.w	r3, r0, r8
 8008240:	fa09 f303 	lsl.w	r3, r9, r3
 8008244:	4313      	orrs	r3, r2
 8008246:	9304      	str	r3, [sp, #16]
 8008248:	46a2      	mov	sl, r4
 800824a:	e7d2      	b.n	80081f2 <_vfiprintf_r+0xc6>
 800824c:	9b03      	ldr	r3, [sp, #12]
 800824e:	1d19      	adds	r1, r3, #4
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	9103      	str	r1, [sp, #12]
 8008254:	2b00      	cmp	r3, #0
 8008256:	bfbb      	ittet	lt
 8008258:	425b      	neglt	r3, r3
 800825a:	f042 0202 	orrlt.w	r2, r2, #2
 800825e:	9307      	strge	r3, [sp, #28]
 8008260:	9307      	strlt	r3, [sp, #28]
 8008262:	bfb8      	it	lt
 8008264:	9204      	strlt	r2, [sp, #16]
 8008266:	7823      	ldrb	r3, [r4, #0]
 8008268:	2b2e      	cmp	r3, #46	@ 0x2e
 800826a:	d10a      	bne.n	8008282 <_vfiprintf_r+0x156>
 800826c:	7863      	ldrb	r3, [r4, #1]
 800826e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008270:	d132      	bne.n	80082d8 <_vfiprintf_r+0x1ac>
 8008272:	9b03      	ldr	r3, [sp, #12]
 8008274:	1d1a      	adds	r2, r3, #4
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	9203      	str	r2, [sp, #12]
 800827a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800827e:	3402      	adds	r4, #2
 8008280:	9305      	str	r3, [sp, #20]
 8008282:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008358 <_vfiprintf_r+0x22c>
 8008286:	7821      	ldrb	r1, [r4, #0]
 8008288:	2203      	movs	r2, #3
 800828a:	4650      	mov	r0, sl
 800828c:	f7f7 ffa0 	bl	80001d0 <memchr>
 8008290:	b138      	cbz	r0, 80082a2 <_vfiprintf_r+0x176>
 8008292:	9b04      	ldr	r3, [sp, #16]
 8008294:	eba0 000a 	sub.w	r0, r0, sl
 8008298:	2240      	movs	r2, #64	@ 0x40
 800829a:	4082      	lsls	r2, r0
 800829c:	4313      	orrs	r3, r2
 800829e:	3401      	adds	r4, #1
 80082a0:	9304      	str	r3, [sp, #16]
 80082a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082a6:	4829      	ldr	r0, [pc, #164]	@ (800834c <_vfiprintf_r+0x220>)
 80082a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80082ac:	2206      	movs	r2, #6
 80082ae:	f7f7 ff8f 	bl	80001d0 <memchr>
 80082b2:	2800      	cmp	r0, #0
 80082b4:	d03f      	beq.n	8008336 <_vfiprintf_r+0x20a>
 80082b6:	4b26      	ldr	r3, [pc, #152]	@ (8008350 <_vfiprintf_r+0x224>)
 80082b8:	bb1b      	cbnz	r3, 8008302 <_vfiprintf_r+0x1d6>
 80082ba:	9b03      	ldr	r3, [sp, #12]
 80082bc:	3307      	adds	r3, #7
 80082be:	f023 0307 	bic.w	r3, r3, #7
 80082c2:	3308      	adds	r3, #8
 80082c4:	9303      	str	r3, [sp, #12]
 80082c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082c8:	443b      	add	r3, r7
 80082ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80082cc:	e76a      	b.n	80081a4 <_vfiprintf_r+0x78>
 80082ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80082d2:	460c      	mov	r4, r1
 80082d4:	2001      	movs	r0, #1
 80082d6:	e7a8      	b.n	800822a <_vfiprintf_r+0xfe>
 80082d8:	2300      	movs	r3, #0
 80082da:	3401      	adds	r4, #1
 80082dc:	9305      	str	r3, [sp, #20]
 80082de:	4619      	mov	r1, r3
 80082e0:	f04f 0c0a 	mov.w	ip, #10
 80082e4:	4620      	mov	r0, r4
 80082e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082ea:	3a30      	subs	r2, #48	@ 0x30
 80082ec:	2a09      	cmp	r2, #9
 80082ee:	d903      	bls.n	80082f8 <_vfiprintf_r+0x1cc>
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d0c6      	beq.n	8008282 <_vfiprintf_r+0x156>
 80082f4:	9105      	str	r1, [sp, #20]
 80082f6:	e7c4      	b.n	8008282 <_vfiprintf_r+0x156>
 80082f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80082fc:	4604      	mov	r4, r0
 80082fe:	2301      	movs	r3, #1
 8008300:	e7f0      	b.n	80082e4 <_vfiprintf_r+0x1b8>
 8008302:	ab03      	add	r3, sp, #12
 8008304:	9300      	str	r3, [sp, #0]
 8008306:	462a      	mov	r2, r5
 8008308:	4b12      	ldr	r3, [pc, #72]	@ (8008354 <_vfiprintf_r+0x228>)
 800830a:	a904      	add	r1, sp, #16
 800830c:	4630      	mov	r0, r6
 800830e:	f7fd fd93 	bl	8005e38 <_printf_float>
 8008312:	4607      	mov	r7, r0
 8008314:	1c78      	adds	r0, r7, #1
 8008316:	d1d6      	bne.n	80082c6 <_vfiprintf_r+0x19a>
 8008318:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800831a:	07d9      	lsls	r1, r3, #31
 800831c:	d405      	bmi.n	800832a <_vfiprintf_r+0x1fe>
 800831e:	89ab      	ldrh	r3, [r5, #12]
 8008320:	059a      	lsls	r2, r3, #22
 8008322:	d402      	bmi.n	800832a <_vfiprintf_r+0x1fe>
 8008324:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008326:	f7fe fad3 	bl	80068d0 <__retarget_lock_release_recursive>
 800832a:	89ab      	ldrh	r3, [r5, #12]
 800832c:	065b      	lsls	r3, r3, #25
 800832e:	f53f af1f 	bmi.w	8008170 <_vfiprintf_r+0x44>
 8008332:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008334:	e71e      	b.n	8008174 <_vfiprintf_r+0x48>
 8008336:	ab03      	add	r3, sp, #12
 8008338:	9300      	str	r3, [sp, #0]
 800833a:	462a      	mov	r2, r5
 800833c:	4b05      	ldr	r3, [pc, #20]	@ (8008354 <_vfiprintf_r+0x228>)
 800833e:	a904      	add	r1, sp, #16
 8008340:	4630      	mov	r0, r6
 8008342:	f7fe f811 	bl	8006368 <_printf_i>
 8008346:	e7e4      	b.n	8008312 <_vfiprintf_r+0x1e6>
 8008348:	0800963f 	.word	0x0800963f
 800834c:	08009649 	.word	0x08009649
 8008350:	08005e39 	.word	0x08005e39
 8008354:	08008109 	.word	0x08008109
 8008358:	08009645 	.word	0x08009645

0800835c <__swbuf_r>:
 800835c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800835e:	460e      	mov	r6, r1
 8008360:	4614      	mov	r4, r2
 8008362:	4605      	mov	r5, r0
 8008364:	b118      	cbz	r0, 800836e <__swbuf_r+0x12>
 8008366:	6a03      	ldr	r3, [r0, #32]
 8008368:	b90b      	cbnz	r3, 800836e <__swbuf_r+0x12>
 800836a:	f7fe f9a9 	bl	80066c0 <__sinit>
 800836e:	69a3      	ldr	r3, [r4, #24]
 8008370:	60a3      	str	r3, [r4, #8]
 8008372:	89a3      	ldrh	r3, [r4, #12]
 8008374:	071a      	lsls	r2, r3, #28
 8008376:	d501      	bpl.n	800837c <__swbuf_r+0x20>
 8008378:	6923      	ldr	r3, [r4, #16]
 800837a:	b943      	cbnz	r3, 800838e <__swbuf_r+0x32>
 800837c:	4621      	mov	r1, r4
 800837e:	4628      	mov	r0, r5
 8008380:	f000 f82a 	bl	80083d8 <__swsetup_r>
 8008384:	b118      	cbz	r0, 800838e <__swbuf_r+0x32>
 8008386:	f04f 37ff 	mov.w	r7, #4294967295
 800838a:	4638      	mov	r0, r7
 800838c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800838e:	6823      	ldr	r3, [r4, #0]
 8008390:	6922      	ldr	r2, [r4, #16]
 8008392:	1a98      	subs	r0, r3, r2
 8008394:	6963      	ldr	r3, [r4, #20]
 8008396:	b2f6      	uxtb	r6, r6
 8008398:	4283      	cmp	r3, r0
 800839a:	4637      	mov	r7, r6
 800839c:	dc05      	bgt.n	80083aa <__swbuf_r+0x4e>
 800839e:	4621      	mov	r1, r4
 80083a0:	4628      	mov	r0, r5
 80083a2:	f7ff fdf7 	bl	8007f94 <_fflush_r>
 80083a6:	2800      	cmp	r0, #0
 80083a8:	d1ed      	bne.n	8008386 <__swbuf_r+0x2a>
 80083aa:	68a3      	ldr	r3, [r4, #8]
 80083ac:	3b01      	subs	r3, #1
 80083ae:	60a3      	str	r3, [r4, #8]
 80083b0:	6823      	ldr	r3, [r4, #0]
 80083b2:	1c5a      	adds	r2, r3, #1
 80083b4:	6022      	str	r2, [r4, #0]
 80083b6:	701e      	strb	r6, [r3, #0]
 80083b8:	6962      	ldr	r2, [r4, #20]
 80083ba:	1c43      	adds	r3, r0, #1
 80083bc:	429a      	cmp	r2, r3
 80083be:	d004      	beq.n	80083ca <__swbuf_r+0x6e>
 80083c0:	89a3      	ldrh	r3, [r4, #12]
 80083c2:	07db      	lsls	r3, r3, #31
 80083c4:	d5e1      	bpl.n	800838a <__swbuf_r+0x2e>
 80083c6:	2e0a      	cmp	r6, #10
 80083c8:	d1df      	bne.n	800838a <__swbuf_r+0x2e>
 80083ca:	4621      	mov	r1, r4
 80083cc:	4628      	mov	r0, r5
 80083ce:	f7ff fde1 	bl	8007f94 <_fflush_r>
 80083d2:	2800      	cmp	r0, #0
 80083d4:	d0d9      	beq.n	800838a <__swbuf_r+0x2e>
 80083d6:	e7d6      	b.n	8008386 <__swbuf_r+0x2a>

080083d8 <__swsetup_r>:
 80083d8:	b538      	push	{r3, r4, r5, lr}
 80083da:	4b29      	ldr	r3, [pc, #164]	@ (8008480 <__swsetup_r+0xa8>)
 80083dc:	4605      	mov	r5, r0
 80083de:	6818      	ldr	r0, [r3, #0]
 80083e0:	460c      	mov	r4, r1
 80083e2:	b118      	cbz	r0, 80083ec <__swsetup_r+0x14>
 80083e4:	6a03      	ldr	r3, [r0, #32]
 80083e6:	b90b      	cbnz	r3, 80083ec <__swsetup_r+0x14>
 80083e8:	f7fe f96a 	bl	80066c0 <__sinit>
 80083ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083f0:	0719      	lsls	r1, r3, #28
 80083f2:	d422      	bmi.n	800843a <__swsetup_r+0x62>
 80083f4:	06da      	lsls	r2, r3, #27
 80083f6:	d407      	bmi.n	8008408 <__swsetup_r+0x30>
 80083f8:	2209      	movs	r2, #9
 80083fa:	602a      	str	r2, [r5, #0]
 80083fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008400:	81a3      	strh	r3, [r4, #12]
 8008402:	f04f 30ff 	mov.w	r0, #4294967295
 8008406:	e033      	b.n	8008470 <__swsetup_r+0x98>
 8008408:	0758      	lsls	r0, r3, #29
 800840a:	d512      	bpl.n	8008432 <__swsetup_r+0x5a>
 800840c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800840e:	b141      	cbz	r1, 8008422 <__swsetup_r+0x4a>
 8008410:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008414:	4299      	cmp	r1, r3
 8008416:	d002      	beq.n	800841e <__swsetup_r+0x46>
 8008418:	4628      	mov	r0, r5
 800841a:	f7ff f8b5 	bl	8007588 <_free_r>
 800841e:	2300      	movs	r3, #0
 8008420:	6363      	str	r3, [r4, #52]	@ 0x34
 8008422:	89a3      	ldrh	r3, [r4, #12]
 8008424:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008428:	81a3      	strh	r3, [r4, #12]
 800842a:	2300      	movs	r3, #0
 800842c:	6063      	str	r3, [r4, #4]
 800842e:	6923      	ldr	r3, [r4, #16]
 8008430:	6023      	str	r3, [r4, #0]
 8008432:	89a3      	ldrh	r3, [r4, #12]
 8008434:	f043 0308 	orr.w	r3, r3, #8
 8008438:	81a3      	strh	r3, [r4, #12]
 800843a:	6923      	ldr	r3, [r4, #16]
 800843c:	b94b      	cbnz	r3, 8008452 <__swsetup_r+0x7a>
 800843e:	89a3      	ldrh	r3, [r4, #12]
 8008440:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008444:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008448:	d003      	beq.n	8008452 <__swsetup_r+0x7a>
 800844a:	4621      	mov	r1, r4
 800844c:	4628      	mov	r0, r5
 800844e:	f000 f883 	bl	8008558 <__smakebuf_r>
 8008452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008456:	f013 0201 	ands.w	r2, r3, #1
 800845a:	d00a      	beq.n	8008472 <__swsetup_r+0x9a>
 800845c:	2200      	movs	r2, #0
 800845e:	60a2      	str	r2, [r4, #8]
 8008460:	6962      	ldr	r2, [r4, #20]
 8008462:	4252      	negs	r2, r2
 8008464:	61a2      	str	r2, [r4, #24]
 8008466:	6922      	ldr	r2, [r4, #16]
 8008468:	b942      	cbnz	r2, 800847c <__swsetup_r+0xa4>
 800846a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800846e:	d1c5      	bne.n	80083fc <__swsetup_r+0x24>
 8008470:	bd38      	pop	{r3, r4, r5, pc}
 8008472:	0799      	lsls	r1, r3, #30
 8008474:	bf58      	it	pl
 8008476:	6962      	ldrpl	r2, [r4, #20]
 8008478:	60a2      	str	r2, [r4, #8]
 800847a:	e7f4      	b.n	8008466 <__swsetup_r+0x8e>
 800847c:	2000      	movs	r0, #0
 800847e:	e7f7      	b.n	8008470 <__swsetup_r+0x98>
 8008480:	20000018 	.word	0x20000018

08008484 <_raise_r>:
 8008484:	291f      	cmp	r1, #31
 8008486:	b538      	push	{r3, r4, r5, lr}
 8008488:	4605      	mov	r5, r0
 800848a:	460c      	mov	r4, r1
 800848c:	d904      	bls.n	8008498 <_raise_r+0x14>
 800848e:	2316      	movs	r3, #22
 8008490:	6003      	str	r3, [r0, #0]
 8008492:	f04f 30ff 	mov.w	r0, #4294967295
 8008496:	bd38      	pop	{r3, r4, r5, pc}
 8008498:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800849a:	b112      	cbz	r2, 80084a2 <_raise_r+0x1e>
 800849c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80084a0:	b94b      	cbnz	r3, 80084b6 <_raise_r+0x32>
 80084a2:	4628      	mov	r0, r5
 80084a4:	f000 f830 	bl	8008508 <_getpid_r>
 80084a8:	4622      	mov	r2, r4
 80084aa:	4601      	mov	r1, r0
 80084ac:	4628      	mov	r0, r5
 80084ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084b2:	f000 b817 	b.w	80084e4 <_kill_r>
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d00a      	beq.n	80084d0 <_raise_r+0x4c>
 80084ba:	1c59      	adds	r1, r3, #1
 80084bc:	d103      	bne.n	80084c6 <_raise_r+0x42>
 80084be:	2316      	movs	r3, #22
 80084c0:	6003      	str	r3, [r0, #0]
 80084c2:	2001      	movs	r0, #1
 80084c4:	e7e7      	b.n	8008496 <_raise_r+0x12>
 80084c6:	2100      	movs	r1, #0
 80084c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80084cc:	4620      	mov	r0, r4
 80084ce:	4798      	blx	r3
 80084d0:	2000      	movs	r0, #0
 80084d2:	e7e0      	b.n	8008496 <_raise_r+0x12>

080084d4 <raise>:
 80084d4:	4b02      	ldr	r3, [pc, #8]	@ (80084e0 <raise+0xc>)
 80084d6:	4601      	mov	r1, r0
 80084d8:	6818      	ldr	r0, [r3, #0]
 80084da:	f7ff bfd3 	b.w	8008484 <_raise_r>
 80084de:	bf00      	nop
 80084e0:	20000018 	.word	0x20000018

080084e4 <_kill_r>:
 80084e4:	b538      	push	{r3, r4, r5, lr}
 80084e6:	4d07      	ldr	r5, [pc, #28]	@ (8008504 <_kill_r+0x20>)
 80084e8:	2300      	movs	r3, #0
 80084ea:	4604      	mov	r4, r0
 80084ec:	4608      	mov	r0, r1
 80084ee:	4611      	mov	r1, r2
 80084f0:	602b      	str	r3, [r5, #0]
 80084f2:	f7fa fd25 	bl	8002f40 <_kill>
 80084f6:	1c43      	adds	r3, r0, #1
 80084f8:	d102      	bne.n	8008500 <_kill_r+0x1c>
 80084fa:	682b      	ldr	r3, [r5, #0]
 80084fc:	b103      	cbz	r3, 8008500 <_kill_r+0x1c>
 80084fe:	6023      	str	r3, [r4, #0]
 8008500:	bd38      	pop	{r3, r4, r5, pc}
 8008502:	bf00      	nop
 8008504:	20000b4c 	.word	0x20000b4c

08008508 <_getpid_r>:
 8008508:	f7fa bd12 	b.w	8002f30 <_getpid>

0800850c <__swhatbuf_r>:
 800850c:	b570      	push	{r4, r5, r6, lr}
 800850e:	460c      	mov	r4, r1
 8008510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008514:	2900      	cmp	r1, #0
 8008516:	b096      	sub	sp, #88	@ 0x58
 8008518:	4615      	mov	r5, r2
 800851a:	461e      	mov	r6, r3
 800851c:	da0d      	bge.n	800853a <__swhatbuf_r+0x2e>
 800851e:	89a3      	ldrh	r3, [r4, #12]
 8008520:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008524:	f04f 0100 	mov.w	r1, #0
 8008528:	bf14      	ite	ne
 800852a:	2340      	movne	r3, #64	@ 0x40
 800852c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008530:	2000      	movs	r0, #0
 8008532:	6031      	str	r1, [r6, #0]
 8008534:	602b      	str	r3, [r5, #0]
 8008536:	b016      	add	sp, #88	@ 0x58
 8008538:	bd70      	pop	{r4, r5, r6, pc}
 800853a:	466a      	mov	r2, sp
 800853c:	f000 f848 	bl	80085d0 <_fstat_r>
 8008540:	2800      	cmp	r0, #0
 8008542:	dbec      	blt.n	800851e <__swhatbuf_r+0x12>
 8008544:	9901      	ldr	r1, [sp, #4]
 8008546:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800854a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800854e:	4259      	negs	r1, r3
 8008550:	4159      	adcs	r1, r3
 8008552:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008556:	e7eb      	b.n	8008530 <__swhatbuf_r+0x24>

08008558 <__smakebuf_r>:
 8008558:	898b      	ldrh	r3, [r1, #12]
 800855a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800855c:	079d      	lsls	r5, r3, #30
 800855e:	4606      	mov	r6, r0
 8008560:	460c      	mov	r4, r1
 8008562:	d507      	bpl.n	8008574 <__smakebuf_r+0x1c>
 8008564:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008568:	6023      	str	r3, [r4, #0]
 800856a:	6123      	str	r3, [r4, #16]
 800856c:	2301      	movs	r3, #1
 800856e:	6163      	str	r3, [r4, #20]
 8008570:	b003      	add	sp, #12
 8008572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008574:	ab01      	add	r3, sp, #4
 8008576:	466a      	mov	r2, sp
 8008578:	f7ff ffc8 	bl	800850c <__swhatbuf_r>
 800857c:	9f00      	ldr	r7, [sp, #0]
 800857e:	4605      	mov	r5, r0
 8008580:	4639      	mov	r1, r7
 8008582:	4630      	mov	r0, r6
 8008584:	f7ff f874 	bl	8007670 <_malloc_r>
 8008588:	b948      	cbnz	r0, 800859e <__smakebuf_r+0x46>
 800858a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800858e:	059a      	lsls	r2, r3, #22
 8008590:	d4ee      	bmi.n	8008570 <__smakebuf_r+0x18>
 8008592:	f023 0303 	bic.w	r3, r3, #3
 8008596:	f043 0302 	orr.w	r3, r3, #2
 800859a:	81a3      	strh	r3, [r4, #12]
 800859c:	e7e2      	b.n	8008564 <__smakebuf_r+0xc>
 800859e:	89a3      	ldrh	r3, [r4, #12]
 80085a0:	6020      	str	r0, [r4, #0]
 80085a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085a6:	81a3      	strh	r3, [r4, #12]
 80085a8:	9b01      	ldr	r3, [sp, #4]
 80085aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80085ae:	b15b      	cbz	r3, 80085c8 <__smakebuf_r+0x70>
 80085b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085b4:	4630      	mov	r0, r6
 80085b6:	f000 f81d 	bl	80085f4 <_isatty_r>
 80085ba:	b128      	cbz	r0, 80085c8 <__smakebuf_r+0x70>
 80085bc:	89a3      	ldrh	r3, [r4, #12]
 80085be:	f023 0303 	bic.w	r3, r3, #3
 80085c2:	f043 0301 	orr.w	r3, r3, #1
 80085c6:	81a3      	strh	r3, [r4, #12]
 80085c8:	89a3      	ldrh	r3, [r4, #12]
 80085ca:	431d      	orrs	r5, r3
 80085cc:	81a5      	strh	r5, [r4, #12]
 80085ce:	e7cf      	b.n	8008570 <__smakebuf_r+0x18>

080085d0 <_fstat_r>:
 80085d0:	b538      	push	{r3, r4, r5, lr}
 80085d2:	4d07      	ldr	r5, [pc, #28]	@ (80085f0 <_fstat_r+0x20>)
 80085d4:	2300      	movs	r3, #0
 80085d6:	4604      	mov	r4, r0
 80085d8:	4608      	mov	r0, r1
 80085da:	4611      	mov	r1, r2
 80085dc:	602b      	str	r3, [r5, #0]
 80085de:	f7fa fd0f 	bl	8003000 <_fstat>
 80085e2:	1c43      	adds	r3, r0, #1
 80085e4:	d102      	bne.n	80085ec <_fstat_r+0x1c>
 80085e6:	682b      	ldr	r3, [r5, #0]
 80085e8:	b103      	cbz	r3, 80085ec <_fstat_r+0x1c>
 80085ea:	6023      	str	r3, [r4, #0]
 80085ec:	bd38      	pop	{r3, r4, r5, pc}
 80085ee:	bf00      	nop
 80085f0:	20000b4c 	.word	0x20000b4c

080085f4 <_isatty_r>:
 80085f4:	b538      	push	{r3, r4, r5, lr}
 80085f6:	4d06      	ldr	r5, [pc, #24]	@ (8008610 <_isatty_r+0x1c>)
 80085f8:	2300      	movs	r3, #0
 80085fa:	4604      	mov	r4, r0
 80085fc:	4608      	mov	r0, r1
 80085fe:	602b      	str	r3, [r5, #0]
 8008600:	f7fa fd0e 	bl	8003020 <_isatty>
 8008604:	1c43      	adds	r3, r0, #1
 8008606:	d102      	bne.n	800860e <_isatty_r+0x1a>
 8008608:	682b      	ldr	r3, [r5, #0]
 800860a:	b103      	cbz	r3, 800860e <_isatty_r+0x1a>
 800860c:	6023      	str	r3, [r4, #0]
 800860e:	bd38      	pop	{r3, r4, r5, pc}
 8008610:	20000b4c 	.word	0x20000b4c

08008614 <fmaxf>:
 8008614:	b508      	push	{r3, lr}
 8008616:	ed2d 8b02 	vpush	{d8}
 800861a:	eeb0 8a40 	vmov.f32	s16, s0
 800861e:	eef0 8a60 	vmov.f32	s17, s1
 8008622:	f000 f815 	bl	8008650 <__fpclassifyf>
 8008626:	b930      	cbnz	r0, 8008636 <fmaxf+0x22>
 8008628:	eeb0 8a68 	vmov.f32	s16, s17
 800862c:	eeb0 0a48 	vmov.f32	s0, s16
 8008630:	ecbd 8b02 	vpop	{d8}
 8008634:	bd08      	pop	{r3, pc}
 8008636:	eeb0 0a68 	vmov.f32	s0, s17
 800863a:	f000 f809 	bl	8008650 <__fpclassifyf>
 800863e:	2800      	cmp	r0, #0
 8008640:	d0f4      	beq.n	800862c <fmaxf+0x18>
 8008642:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800864a:	dded      	ble.n	8008628 <fmaxf+0x14>
 800864c:	e7ee      	b.n	800862c <fmaxf+0x18>
	...

08008650 <__fpclassifyf>:
 8008650:	ee10 3a10 	vmov	r3, s0
 8008654:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8008658:	d00d      	beq.n	8008676 <__fpclassifyf+0x26>
 800865a:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800865e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8008662:	d30a      	bcc.n	800867a <__fpclassifyf+0x2a>
 8008664:	4b07      	ldr	r3, [pc, #28]	@ (8008684 <__fpclassifyf+0x34>)
 8008666:	1e42      	subs	r2, r0, #1
 8008668:	429a      	cmp	r2, r3
 800866a:	d908      	bls.n	800867e <__fpclassifyf+0x2e>
 800866c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8008670:	4258      	negs	r0, r3
 8008672:	4158      	adcs	r0, r3
 8008674:	4770      	bx	lr
 8008676:	2002      	movs	r0, #2
 8008678:	4770      	bx	lr
 800867a:	2004      	movs	r0, #4
 800867c:	4770      	bx	lr
 800867e:	2003      	movs	r0, #3
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	007ffffe 	.word	0x007ffffe

08008688 <_init>:
 8008688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800868a:	bf00      	nop
 800868c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800868e:	bc08      	pop	{r3}
 8008690:	469e      	mov	lr, r3
 8008692:	4770      	bx	lr

08008694 <_fini>:
 8008694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008696:	bf00      	nop
 8008698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800869a:	bc08      	pop	{r3}
 800869c:	469e      	mov	lr, r3
 800869e:	4770      	bx	lr
